[
  {
    "objectID": "quickstart/index.html",
    "href": "quickstart/index.html",
    "title": "Welcome to Viash!",
    "section": "",
    "text": "Viash is your go-to script wrapper for building data pipelines from modular software components. All you need is your trusty script and a metadata file to embark on this journey.\nCheck out some of Viash’s key features:"
  },
  {
    "objectID": "quickstart/index.html#requirements",
    "href": "quickstart/index.html#requirements",
    "title": "Welcome to Viash!",
    "section": "Requirements",
    "text": "Requirements\nThis guide assumes you’ve already installed Viash, Docker and Nextflow."
  },
  {
    "objectID": "quickstart/index.html#quickstart-example-project",
    "href": "quickstart/index.html#quickstart-example-project",
    "title": "Welcome to Viash!",
    "section": "Quickstart example project",
    "text": "Quickstart example project\nTo get up and running fast, we provide a template project for you to use. It contains three components, which are combined into a Nextflow pipeline as follows:\n\n\n\n\ngraph LR\n   A(file?.tsv) --&gt; B[/remove_comments/]\n   B --&gt; C[/take_column/]\n   C --&gt; D[/combine_columns/]\n   D --&gt; E(output)\n\n\n\n\n\nThis pipeline takes one or more TSV files as input and stores its output in an output folder."
  },
  {
    "objectID": "quickstart/index.html#step-1-get-the-template",
    "href": "quickstart/index.html#step-1-get-the-template",
    "title": "Welcome to Viash!",
    "section": "Step 1: Get the template",
    "text": "Step 1: Get the template\nFirst create a new repository by clicking the “Use this template” button. If you can’t see the “Use this template” button, log into GitHub first.\nNext, clone the repository using the following command.\ngit clone https://github.com/youruser/my_first_pipeline.git && cd my_first_pipeline\nYour new repository should contain the following files:\ntree my_first_pipeline\n.\n├── LICENSE.md                            License information\n├── README.md                             A readme.\n├── _viash.yaml                           Global Viash settings\n├── resources_test/*.tsv                  Sample files to showcase pipeline and\n│   ├── file1.tsv                         run component unit tests.\n│   └── file2.tsv\n├── src/demo                              Source directory with Viash components\n│   ├── combine_columns\n│   ├── remove_comments\n│   └── take_column\n└── workflows\n    └── demo_pipeline                     Demo Nextflow pipeline\n        ├── main.nf\n        └── nextflow.config"
  },
  {
    "objectID": "quickstart/index.html#step-2-build-the-viash-components",
    "href": "quickstart/index.html#step-2-build-the-viash-components",
    "title": "Welcome to Viash!",
    "section": "Step 2: Build the Viash components",
    "text": "Step 2: Build the Viash components\nWith Viash you can turn the components in src/ into Dockerized Nextflow modules by running:\nviash ns build --setup cachedbuild --parallel\n\n\nOutput\n\n\n\nExporting remove_comments (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/remove_comments\nExporting take_column (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/take_column\nExporting combine_columns (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/combine_columns\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/remove_comments:dev' with Dockerfile\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/combine_columns:dev' with Dockerfile\nExporting remove_comments (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/remove_comments\nExporting take_column (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/take_column\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/take_column:dev' with Dockerfile\nExporting combine_columns (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/combine_columns\n\u001b[32mAll 6 configs built successfully\u001b[0m\n\n\n\nOnce everything is built, a new target directory has been created containing the executables and modules grouped per platform:\nls -l\n\n\nOutput\n\n\n\ntotal 72\n-rw-r--r-- 1 runner docker   747 May  8 06:34 CHANGELOG.md\n-rw-r--r-- 1 runner docker 32219 May  8 06:34 LICENSE.md\n-rw-r--r-- 1 runner docker  1094 May  8 06:34 README.md\n-rw-r--r-- 1 runner docker  1125 May  8 06:34 README.qmd\n-rw-r--r-- 1 runner docker   415 May  8 06:34 _viash.yaml\n-rw-r--r-- 1 runner docker   245 May  8 06:34 main.nf\n-rw-r--r-- 1 runner docker   222 May  8 06:34 nextflow.config\ndrwxr-xr-x 2 runner docker  4096 May  8 06:34 resources_test\ndrwxr-xr-x 3 runner docker  4096 May  8 06:34 src\ndrwxr-xr-x 4 runner docker  4096 May  8 06:35 target\ndrwxr-xr-x 3 runner docker  4096 May  8 06:34 workflows"
  },
  {
    "objectID": "quickstart/index.html#step-3-run-the-pipeline",
    "href": "quickstart/index.html#step-3-run-the-pipeline",
    "title": "Welcome to Viash!",
    "section": "Step 3: Run the pipeline",
    "text": "Step 3: Run the pipeline\nNow run the pipeline with Nextflow:\nnextflow run . \\\n  -main-script workflows/demo_pipeline/main.nf \\\n  -with-docker \\\n  --input resources_test/file*.tsv \\\n  --publish_dir output\n\n\nOutput\n\n\n\nN E X T F L O W  ~  version 22.10.6\nLaunching `workflows/demo_pipeline/main.nf` [stoic_franklin] DSL2 - revision: c65d4e7bba\n[-        ] process &gt; remove_comments:remove_comm... -\n\n[-        ] process &gt; remove_comments:remove_comm... -\n[-        ] process &gt; take_column:take_column_pro... -\n[-        ] process &gt; combine_columns:combine_col... -\n\nexecutor &gt;  local (1)\n[63/a86c1d] process &gt; remove_comments:remove_comm... [  0%] 0 of 1\n[-        ] process &gt; take_column:take_column_pro... -\n[-        ] process &gt; combine_columns:combine_col... -\n\nexecutor &gt;  local (1)\n[63/a86c1d] process &gt; remove_comments:remove_comm... [  0%] 0 of 1\n[-        ] process &gt; take_column:take_column_pro... -\n[-        ] process &gt; combine_columns:combine_col... -\n\nexecutor &gt;  local (2)\n[63/a86c1d] process &gt; remove_comments:remove_comm... [100%] 1 of 1 ✔\n[bd/df229c] process &gt; take_column:take_column_pro... [  0%] 0 of 1\n[-        ] process &gt; combine_columns:combine_col... -\n\nexecutor &gt;  local (3)\n[63/a86c1d] process &gt; remove_comments:remove_comm... [100%] 1 of 1 ✔\n[bd/df229c] process &gt; take_column:take_column_pro... [100%] 1 of 1 ✔\n[cc/d70e64] process &gt; combine_columns:combine_col... [  0%] 0 of 1\n\nexecutor &gt;  local (3)\n[63/a86c1d] process &gt; remove_comments:remove_comm... [100%] 1 of 1 ✔\n[bd/df229c] process &gt; take_column:take_column_pro... [100%] 1 of 1 ✔\n[cc/d70e64] process &gt; combine_columns:combine_col... [  0%] 0 of 1\n\nexecutor &gt;  local (3)\n[63/a86c1d] process &gt; remove_comments:remove_comm... [100%] 1 of 1 ✔\n[bd/df229c] process &gt; take_column:take_column_pro... [100%] 1 of 1 ✔\n[cc/d70e64] process &gt; combine_columns:combine_col... [100%] 1 of 1 ✔\nOutput: [combined, /home/runner/work/website/website/guide/_viash_project_template/work/cc/d70e64d532c086d4ab6d340ff48b90/combined.combine_columns.output]\n\n\n\nThis will run the three modules in sequence, with the final result result being stored in a file named combined.combine_columns.output in a new temp directory:\ncat output/combined.combine_columns.output\n\n\nOutput\n\n\n\n\"1\" 0.11\n\"2\" 0.23\n\"3\" 0.35\n\"4\" 0.47"
  },
  {
    "objectID": "quickstart/index.html#whats-next",
    "href": "quickstart/index.html#whats-next",
    "title": "Welcome to Viash!",
    "section": "What’s next?",
    "text": "What’s next?\nCongratulations, you’ve reached the end of this quickstart tutorial, and we’re excited for you to delve deeper into the world of Viash! Our comprehensive guide and reference documentation is here to help you explore various topics, such as:\n\nCreating a Viash component and converting it into a standalone executable\nEnsuring reproducibility and designing customised Docker images\nEnsuring code reliability with unit testing for Viash\nStreamlining your workflow by performing batch operations on Viash projects\nBuilding Nextflow pipelines using Viash components\n\nSo, get ready to enhance your skills and create outstanding solutions with Viash!"
  },
  {
    "objectID": "installation/index.html",
    "href": "installation/index.html",
    "title": "Installation",
    "section": "",
    "text": "LinuxmacOSWindows\n\n\n\n\nViash is developed in Scala, so you’ll need to install Java 8, OpenJDK 8 or a later version.\nYou can run the following command to check if you have Java installed:\njava -version\n\n\n\n\n\n\nNote\n\n\n\nJava version “1.8.x” and “8” are the same release.\n\n\nTo get the most out of Viash, you’ll also need to install Docker and Nextflow.\n\n\n\nTo install Viash to a bin folder in your current directory, run the following command to download and run the install script:\nwget -qO- dl.viash.io | bash; mv viash $HOME/bin\nTo verify your installation, run the following command:\nviash --help\n\n\n\n\n\nViash is developed in Scala, so you’ll need to install Java 8, OpenJDK 8 or a later version.\nYou can run the following command to check if you have Java installed:\njava -version\n\n\n\n\n\n\nNote\n\n\n\nJava version “1.8.x” and “8” are the same release.\n\n\nTo get the most out of Viash, you’ll also need to install Docker and Nextflow.\n\n\n\nTo install Viash to a bin folder in your current directory, run the following command to download and run the install script:\ncurl -fsSL dl.viash.io | bash; mv viash $HOME/bin\nTo verify your installation, run the following command:\nviash --help\n\n\n\n\n\n\n\n\nViash doesn’t support Windows natively, but Windows Subsystem for Linux 2 can be used instead. Follow the instructions below to get everything ready to use Viash:\n\nInstall WSL2 by following the instructions provided by Microsoft. This will install the default distro, Ubuntu.\nFollow these instructions provided by Docker to install Docker Desktop with a WSL2 backend. This allows you to run Linux docker containers natively.\nOpen Ubuntu from the Start menu to start up WSL2.\nRun the following command in the Ubuntu terminal to upgrade Ubuntu and its packages to the newest version:\n\nsudo apt-get update && sudo apt-get upgrade -y\n\nRun this command to check if docker is working correctly:\n\ndocker run hello-world\nIf this doesn’t work, read the Docker WSL2 instructions again, you might have missed a step or forgot to reboot your system.\n\nViash is developed in Scala, so you’ll need to install Java 8, OpenJDK 8 or a later version. Install the Viash dependencies by executing this command:\n\nsudo apt-get install -y openjdk-12-jdk unzip zip\n\n\n\n\n\n\nNote\n\n\n\nYou can choose to install default-jdk instead of the more explicit openjdk-12-jdk. However, the Nextflow target platform only supports Java version 8 to 12 at this point in time, so keep that in mind.\n\n\n\nInstall Nextflow.\n\n\n\n\nTo install Viash to a bin folder in your current directory, run the following command to download and run the install script:\nwget -qO- dl.viash.io | bash; mv viash $HOME/bin\nTo verify your installation, run the following command:\nviash --help"
  },
  {
    "objectID": "installation/index.html#step-2",
    "href": "installation/index.html#step-2",
    "title": "Installation",
    "section": "Step 2",
    "text": "Step 2\n\nUse the Quickstart"
  },
  {
    "objectID": "privacy.html",
    "href": "privacy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "TL;DR: We do not use cookies and we do not collect any personal data.\n\nWebsite visitors\n\nNo personal information is collected.\nNo information is stored in the browser.\nNo information is shared with, sent to or sold to third-parties.\nNo information is shared with advertising companies.\nNo information is mined and harvested for personal and behavioral trends.\nNo information is monetized.\n\n\n\nInformation we collect and what we use it for\nWe run Google Analytics analytics on viash.io. The following information is collected:\n\nPage URL. We track the page URL of each page view on this website. We use this to understand which pages have been viewed and how many times a particular page has been viewed. For example: https://viash.io/.\nHTTP Referrer. We use the referrer string to understand the number of visitors referred to this website from links on other sites. For example: https://github.com/.\nBrowser. We use this to understand what browsers people use when visiting this website. This is derived from the User-Agent HTTP header. The full User-Agent is discarded. For example: Chrome.\nOperating system. We use this to understand what operating systems people use when visiting this website. We only use the brand of the operating system and don’t include the version number or any other details. This is derived from the User-Agent HTTP header. The full User-Agent is discarded. For example: GNU/Linux.\nDevice type. We use this to understand what devices people use when visiting this website. This is derived from window.innerWidth. The actual width of the browser in pixels is discarded. For example: Desktop.\nVisitor Country. We look up the visitor’s country using the IP address. We do not track anything more granular than the country of origin and the IP address of the visitor is discarded. We never store IP addresses in our database or logs. For example: Canada.\n\n\n\nContact us\nContact us if you have any questions."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Viash Blog",
    "section": "",
    "text": "Viash 0.7.3\n\n\nMinor bug fixes in documentation and config view\n\n\n\n\n\n\n\n\n\nApr 19, 2023\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.7.2\n\n\nProject-relative paths and improved metadata handling\n\n\n\n\n\n\n\n\n\nApr 17, 2023\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.7.1\n\n\nMinor improvements to VDSL3 and schema functionality.\n\n\n\n\n\n\n\n\n\nMar 8, 2023\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.7.0\n\n\nMajor code cleanup and minor improvements to VDSL3\n\n\n\n\n\n\n\n\n\nFeb 28, 2023\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.6.7\n\n\nA minor release with several QoL improvements\n\n\n\n\n\n\n\n\n\nDec 14, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.6.6\n\n\nA small bugfix release\n\n\n\n\n\n\n\n\n\nDec 6, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.6.5\n\n\nA small bugfix release\n\n\n\n\n\n\n\n\n\nDec 2, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.6.4\n\n\nAdd backwards compability by supporting switching to older Viash versions\n\n\n\n\n\n\n\n\n\nNov 30, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.6.3\n\n\nQuality-of-life improvements in Viash.\n\n\n\n\n\n\n\n\n\nNov 9, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.6.2\n\n\nTwo bug fixes\n\n\n\n\n\n\n\n\n\nOct 11, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.6.1\n\n\nMinor improvements in functionality\n\n\n\n\n\n\n\n\n\nOct 3, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.6.0\n\n\nNextflow VDSL3 is now the default, support for tracking memory and cpu requirements more elegantly\n\n\n\n\n\n\n\n\n\nSep 7, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.15\n\n\nAdded testbenches, default argument groups and bugfixes for VDSL3\n\n\n\n\n\n\n\n\n\nJul 14, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.14\n\n\nArgument groups can now be defined in the Viash config\n\n\n\n\n\n\n\n\n\nJun 30, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.13\n\n\nAdded overriding of the container registry for the VDSL3 + VDSL3 bug fixes\n\n\n\n\n\n\n\n\n\nJun 10, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.12\n\n\nImprovements for VDSL3 and the Bash wrapper + several bug fixes\n\n\n\n\n\n\n\n\n\nMay 24, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.11\n\n\nNextflow VDSL3 is here!\n\n\n\n\n\n\n\n\n\nMay 9, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.10.1\n\n\nA quick bug fix\n\n\n\n\n\n\n\n\n\nMar 16, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.10\n\n\nRework of the Viash helper components\n\n\n\n\n\n\n\n\n\nMar 15, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.9\n\n\nAllow interrupting Viash components\n\n\n\n\n\n\n\n\n\nMar 12, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.8\n\n\nAllow defining a Docker image organization, and single values can be used in place of lists\n\n\n\n\n\n\n\n\n\nFeb 28, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.7\n\n\nArgument examples need to be of the same type as the argument itself\n\n\n\n\n\n\n\n\n\nFeb 16, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.6\n\n\nForbidden Bash flags have been renamed\n\n\n\n\n\n\n\n\n\nFeb 3, 2022\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.5\n\n\nResources dir no longer added to PATH automatically and minor changes\n\n\n\n\n\n\n\n\n\nDec 17, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.4\n\n\nAdded cache directive to specify the typing of caching to be performed for the Nextflow platform\n\n\n\n\n\n\n\n\n\nSep 20, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.3\n\n\nNew meta data list for scripts, VIASH_TEMP environment variable for Nextflow, fixed output formatting with separate outputs\n\n\n\n\n\n\n\n\n\nSep 2, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.0\n\n\nImprovements to running Docker executables, and Nextflow platform argument changes\n\n\n\n\n\n\n\n\n\nAug 16, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.2\n\n\nMore settings for Docker and Nextflow platform, and a bug fixes for components with resources\n\n\n\n\n\n\n\n\n\nAug 13, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.5.1\n\n\nViash 0.5.1 adds support for C# scripts and fixes a few bugs\n\n\n\n\n\n\n\n\n\nJul 14, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.4.0.1\n\n\nThree small bug fixes.\n\n\n\n\n\n\n\n\n\nMay 12, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.4.0\n\n\nConfig mod DSL and renames to viash ns arguments\n\n\n\n\n\n\n\n\n\nApr 14, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.3.2\n\n\nDon’t auto-generate viash.yaml and add beta unit testing in Nextflow\n\n\n\n\n\n\n\n\n\nFeb 4, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.3.1\n\n\nAdd fields for specifying authors and the Docker registry\n\n\n\n\n\n\n\n\n\nJan 26, 2021\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.3.0\n\n\nCombine functionality and platform into one config, remove temporary files\n\n\n\n\n\n\n\n\n\nNov 24, 2020\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.2.2\n\n\nGeneration of placeholder code now possible without VIASH START and VIASH END\n\n\n\n\n\n\n\n\n\nSep 22, 2020\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.2.1\n\n\nDocker chown by default\n\n\n\n\n\n\n\n\n\nSep 11, 2020\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.2.0\n\n\nAutoresolve docker paths\n\n\n\n\n\n\n\n\n\nSep 1, 2020\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.1.0\n\n\nChanges to functionality and the native/docker platforms\n\n\n\n\n\n\n\n\n\nMay 14, 2020\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nSay hello to Viash 👋\n\n\nIntroducing Viash, helping you turn a script into a reusable and reproducible Nextflow module to use in your pipelines.\n\n\n\n\n\n\n\n\n\nMay 13, 2020\n\n\nViash Team\n\n\n\n\n\n\n  \n\n\n\n\nViash 0.0.1\n\n\nInitial release\n\n\n\n\n\n\n\n\n\nMay 5, 2020\n\n\nViash Team\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/posts/say-hello/index.html",
    "href": "blog/posts/say-hello/index.html",
    "title": "Say hello to Viash 👋",
    "section": "",
    "text": "Look out for more info soon!"
  },
  {
    "objectID": "blog/posts/viash-0.5.8/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.8/index.html#full-changelog",
    "title": "Viash 0.5.8",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FUNCTIONALITY\n\nDockerPlatform: Allow defining a container’s organisation. Example:\n  - type: docker\n    registry: ghcr.io\n    organisation: viash-io\n    image: viash\n    tag: \"1.0\"\n    target_registry: ghcr.io\n    target_organization: viash-io\nDockerRequirement: Add label instructions. Example: setup: [ [ type: docker, label: [ \"foo BAR\" ]]]\nConfig: In specific places, allow parsing a value as a list of values. Fixes #97. This mostly applies to list values in DockerPlatform, but also to author roles. Examples:\nfunctionality:\n  name: foo\n  authors:\n    - name: Alice\n      role: author # can be a string or a list\nplatforms:\n  - type: docker\n    port: \"80:80\" # can be a string or a list\n    setup:\n      - type: r\n        packages: incgraph # can be a string or a list\n\n\n\nBREAKING CHANGES\n\nviash test: This command doesn’t automatically add the resources dir to the path.\n\n\n\nBUG FIXES\n\nFunctionality: Fix .functionality.add_resources_to_path not being picked up correctly.\nAptRequirement: Set DEBIAN_FRONTEND=noninteractive by default. This can be turned off by specifying:\n  - type: apt\n    packages: [ foo, bar ]\n    interactive: true\n\n\n\nMINOR CHANGES\n\nMain: Slightly better error messages when parsing of viash yaml file fails. Before:\n$ viash test src/test/resources/testbash/config_failed_build.vsh.yaml \nException in thread \"main\" DecodingFailure(Unexpected field: [package]; valid fields: packages, interactive, type, List(DownField(apt), DownArray, DownField(platforms)))\nAfter:\n$ viash test src/test/resources/testbash/config_failed_build.vsh.yaml \nError parsing 'file:/path/to/viash/src/test/resources/testbash/config_failed_build.vsh.yaml'. Details:\nUnexpected field: [package]; valid fields: packages, interactive, type: DownField(apt),DownArray,DownField(platforms)"
  },
  {
    "objectID": "blog/posts/viash-0.0.1/index.html",
    "href": "blog/posts/viash-0.0.1/index.html",
    "title": "Viash 0.0.1",
    "section": "",
    "text": "Initial proof of concept."
  },
  {
    "objectID": "blog/posts/viash-0.0.1/index.html#whats-new",
    "href": "blog/posts/viash-0.0.1/index.html#whats-new",
    "title": "Viash 0.0.1",
    "section": "",
    "text": "Initial proof of concept."
  },
  {
    "objectID": "blog/posts/viash-0.5.13/index.html",
    "href": "blog/posts/viash-0.5.13/index.html",
    "title": "Viash 0.5.13",
    "section": "",
    "text": "VDSL3 gets even more improvements and bug fixes."
  },
  {
    "objectID": "blog/posts/viash-0.5.13/index.html#whats-new",
    "href": "blog/posts/viash-0.5.13/index.html#whats-new",
    "title": "Viash 0.5.13",
    "section": "",
    "text": "VDSL3 gets even more improvements and bug fixes."
  },
  {
    "objectID": "blog/posts/viash-0.5.13/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.13/index.html#full-changelog",
    "title": "Viash 0.5.13",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FUNCTIONALITY\n\nNextflowVdsl3Platform: Allow overriding the container registry of all Viash components by setting the params.override_container_registry value. Only works for auto-derived image names.\n\n\n\nMAJOR CHANGES\n\nFunctionality: renamed tests to test_resources. Backwards compatibility provided but a notification message is displayed on the console.\n\n\n\nMINOR CHANGES\n\nFunctionality and viash ns: Added .enabled in functionality, set to true by default. Filter for disabled components in namespace commands.\nDockerPlatform: Add org.opencontainers.image annotations to built docker images.\nFunctionality: when defining text resources, permit defining path instead of dest. If both dest and path are unset, use a default file name depending on the resource type, such as script.sh or text.txt.\nviash build: Errors are printed in red.\n\n\n\nBUG FIXES\n\nNextflowVdsl3Platform: Undefined input files should not inject a VIASH_PAR_* variable when multiple: true.\nNextflowVdsl3Platform: Make injected resources dir absolute.\nNextflowVdsl3Platform: Fix escaping of triple single quotes.\nNextflowVdsl3Platform: Also apply auto.simplifyInput to Lists.\nDockerPlatform: added a test_setup that allows adding apt/apk/… setup requirements. These are only executed when running tests."
  },
  {
    "objectID": "blog/posts/viash-0.7.3/index.html",
    "href": "blog/posts/viash-0.7.3/index.html",
    "title": "Viash 0.7.3",
    "section": "",
    "text": "Fix minor issues in the documentation and with the way parent paths of resources are printed a config view."
  },
  {
    "objectID": "blog/posts/viash-0.7.3/index.html#whats-new",
    "href": "blog/posts/viash-0.7.3/index.html#whats-new",
    "title": "Viash 0.7.3",
    "section": "",
    "text": "Fix minor issues in the documentation and with the way parent paths of resources are printed a config view."
  },
  {
    "objectID": "blog/posts/viash-0.7.3/index.html#full-changelog",
    "href": "blog/posts/viash-0.7.3/index.html#full-changelog",
    "title": "Viash 0.7.3",
    "section": "Full changelog",
    "text": "Full changelog\n\nBUG FIXES\n\nDockerPlatform: Fixed example in documentation for the namespace_separator parameter (#396).\nviash config view: Resource parent paths should be directories and not file (#398)."
  },
  {
    "objectID": "blog/posts/viash-0.2.0/index.html",
    "href": "blog/posts/viash-0.2.0/index.html",
    "title": "Viash 0.2.0",
    "section": "",
    "text": "Added version attribute\n\n\n\nArguments of type: file are processed to automatically create a mount in docker. More specifically, when you pass an argument value: --input /path/to/file, this will be processed such that the following parameters are passed to docker:\ndocker run -v /path/to:/viash_automount/path/to ... --input /viash_automount/path/to/file\nIf, for some reason, you need to manually specify a mount, you can do this with ---mount /path/to/mount:/mymount.\n\n\n\nFor all parameter types (except for boolean_true and boolean_false), you can specify multiple: true in order to turn this argument into an array-based argument. What this does is allow you to pass multiple values for this argument, e.g. --input file1 --input file2 --input file3:file4:file5.\nThe default separator is : but this can be overridden by changing the separator by setting it to multiple_sep: \",\" (for example).\n\n\n\nViash now supports placing the functionality.yaml, platform*.yaml(s) and script into a single file. For example, this could be a merged script.R:\n#' functionality:\n#'   name: r-estimate\n#'   arguments: ...\n#' platforms:\n#' - type: native\n#' - type: docker\n#'   image: rocker/tidyverse\nlibrary(tidyverse)\ncat(\"Hello world!\\n\")\nInstead of running:\nviash run -f functionality.yaml -p platform_docker.yaml -- arg1\nWith this format, you can now run:\nviash run script.R                     # run script.R with the first platform\nviash run -P docker script.R           # run script.R with the platform called 'docker' with the large P argument\n# use small p to override the platform with a custom yaml:\nviash run -p common_resources/platform_docker.yaml script.R\n# note that any arguments for the run command (e.g. -p or -P) should come before the script.R, as script.R is considered a trailing argument."
  },
  {
    "objectID": "blog/posts/viash-0.2.0/index.html#whats-new",
    "href": "blog/posts/viash-0.2.0/index.html#whats-new",
    "title": "Viash 0.2.0",
    "section": "",
    "text": "Added version attribute\n\n\n\nArguments of type: file are processed to automatically create a mount in docker. More specifically, when you pass an argument value: --input /path/to/file, this will be processed such that the following parameters are passed to docker:\ndocker run -v /path/to:/viash_automount/path/to ... --input /viash_automount/path/to/file\nIf, for some reason, you need to manually specify a mount, you can do this with ---mount /path/to/mount:/mymount.\n\n\n\nFor all parameter types (except for boolean_true and boolean_false), you can specify multiple: true in order to turn this argument into an array-based argument. What this does is allow you to pass multiple values for this argument, e.g. --input file1 --input file2 --input file3:file4:file5.\nThe default separator is : but this can be overridden by changing the separator by setting it to multiple_sep: \",\" (for example).\n\n\n\nViash now supports placing the functionality.yaml, platform*.yaml(s) and script into a single file. For example, this could be a merged script.R:\n#' functionality:\n#'   name: r-estimate\n#'   arguments: ...\n#' platforms:\n#' - type: native\n#' - type: docker\n#'   image: rocker/tidyverse\nlibrary(tidyverse)\ncat(\"Hello world!\\n\")\nInstead of running:\nviash run -f functionality.yaml -p platform_docker.yaml -- arg1\nWith this format, you can now run:\nviash run script.R                     # run script.R with the first platform\nviash run -P docker script.R           # run script.R with the platform called 'docker' with the large P argument\n# use small p to override the platform with a custom yaml:\nviash run -p common_resources/platform_docker.yaml script.R\n# note that any arguments for the run command (e.g. -p or -P) should come before the script.R, as script.R is considered a trailing argument."
  },
  {
    "objectID": "blog/posts/viash-0.2.0/index.html#full-changelog",
    "href": "blog/posts/viash-0.2.0/index.html#full-changelog",
    "title": "Viash 0.2.0",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FEATURES\n\nAllow (optional) version attributes in functionality.yaml and platform.yaml.\nAllow testing a component with the viash test functionality. Tests are executed in a temporary directory on the specified platform. The temporary directory contains all the resource and test files.\nviash --version: Add flag for printing the version of viash.\nAllow fetching resources from URL (http:// and https://)\nAllow retrieving functionality and platform YAMLs from URL.\nFor docker containers, autoresolve path names of files. Use ---v path:path or ---volume path:path to manually mount a specific folder.\nImplement parameter multiplicity. Set multiple: true to denote an argument to have higher multiplicity. Run ./cmd --foo one --foo two --foo three:four in order for multiple values to be added to the same parameter list.\nAdded a new format for defining functionality in which the user passes the script in which the functionality and platforms are listed as yaml headers.\nA ---chown flag has been added to Docker executables to automatically change the ownership of output files to the current user.\nviash ns build: A command for building a whole namespace.\nNXF: Join operations are now fully supported by means of multiple.\nNXF: Modules that perform joins can take either arrays (multiple input files or the same type to be joined) or hashes (multiple input files passed using different options on the CLI). Please refer to the docs for more info.\n\n\n\nMAJOR CHANGES\n\nRemove passthrough parameters.\nSince CLI generation is now performed in the outer script, viash pimp has been deprecated.\nWrite out meta.yaml containing viash run information as well as the original functionality.yaml and platform.yaml content.\nRenamed viash export to viash build.\n\n\n\nMINOR CHANGES\n\nviash run and viash test: Allow changing the temporary directory by defining VIASH_TEMP as a environment variable. Temporary directories are cleaned up after successful executions.\nviash run and viash test: Exit(1) when execution or test fails.\nviash build: Add -m flag for outputting metadata after build.\nviash run: Required parameters can have a default value now. Produce error when a required parameter is not passed, even when a default is provided.\nNXF: Modules are now stored under target/nextflow by default\n\n\n\nBUG FIXES\n\nNXF: Correctly escape path variable when running NXF command.\nNXF: Surround parameters with quotes when running NXF command.\n\n\n\nINTERNAL CHANGES\n\nMove CLI from inner script to outer script.\nRenamed Target to Platform\nRenamed Environment to Requirements"
  },
  {
    "objectID": "blog/posts/viash-0.6.6/index.html",
    "href": "blog/posts/viash-0.6.6/index.html",
    "title": "Viash 0.6.6",
    "section": "",
    "text": "This release fixes an issue where stderr was being redirected to stdout."
  },
  {
    "objectID": "blog/posts/viash-0.6.6/index.html#whats-new",
    "href": "blog/posts/viash-0.6.6/index.html#whats-new",
    "title": "Viash 0.6.6",
    "section": "",
    "text": "This release fixes an issue where stderr was being redirected to stdout."
  },
  {
    "objectID": "blog/posts/viash-0.6.6/index.html#full-changelog",
    "href": "blog/posts/viash-0.6.6/index.html#full-changelog",
    "title": "Viash 0.6.6",
    "section": "Full changelog",
    "text": "Full changelog\n\nBUG FIXES\n\nDon’t redirect stderr to stdout when switching Viash versions (#312)."
  },
  {
    "objectID": "blog/posts/viash-0.5.1/index.html",
    "href": "blog/posts/viash-0.5.1/index.html",
    "title": "Viash 0.5.1",
    "section": "",
    "text": "We’ve added C# scripts (.csx) as a supported language using dotnet-script.\nTo run C# scripts natively, you’ll need to install .NET Core and execute the following command in a terminal:\ndotnet tool install -g dotnet-script\nYou can now run C# scripts like this:\ndotnet script hello_viash.csx\nTo use C# scripts as components, use the new csharp_script type in the functionality section of your config file:\n  resources:\n  - type: csharp_script\n    path: script.csx\nHere’s an example of a simple C# script with Viash in mind:\n// VIASH START\nvar par = new {\n  input = \"Hello World\",\n  name = \"Mike\"\n};\n// VIASH END\n\nSystem.Console.WriteLine(input + \", \" + name + \"!\");\nThe language-specific guide for creating C# script components will be added in the near future.\n\n\n\nFirst off, these special characters can now be used in the description, usage, default and example fields of components:\n\n”\n`\n\\\n\n$\n\nNextflow output files with the same extension won’t overwrite each other any more, like it was the case for arguments like this:\nfunctionality:\n  name: bar\n  arguments:\n    - name: \"--input\"\n      type: file\n      example: input.txt\n    - name: \"--output1\"\n      type: file\n      direction: output\n      required: true\n      example: output.txt\n    - name: \"--output2\"\n      type: file\n      direction: output\n      required: true\n      example: optional.txt\nIn this case, the two output files would have been identical in the past. ___"
  },
  {
    "objectID": "blog/posts/viash-0.5.1/index.html#whats-new",
    "href": "blog/posts/viash-0.5.1/index.html#whats-new",
    "title": "Viash 0.5.1",
    "section": "",
    "text": "We’ve added C# scripts (.csx) as a supported language using dotnet-script.\nTo run C# scripts natively, you’ll need to install .NET Core and execute the following command in a terminal:\ndotnet tool install -g dotnet-script\nYou can now run C# scripts like this:\ndotnet script hello_viash.csx\nTo use C# scripts as components, use the new csharp_script type in the functionality section of your config file:\n  resources:\n  - type: csharp_script\n    path: script.csx\nHere’s an example of a simple C# script with Viash in mind:\n// VIASH START\nvar par = new {\n  input = \"Hello World\",\n  name = \"Mike\"\n};\n// VIASH END\n\nSystem.Console.WriteLine(input + \", \" + name + \"!\");\nThe language-specific guide for creating C# script components will be added in the near future.\n\n\n\nFirst off, these special characters can now be used in the description, usage, default and example fields of components:\n\n”\n`\n\\\n\n$\n\nNextflow output files with the same extension won’t overwrite each other any more, like it was the case for arguments like this:\nfunctionality:\n  name: bar\n  arguments:\n    - name: \"--input\"\n      type: file\n      example: input.txt\n    - name: \"--output1\"\n      type: file\n      direction: output\n      required: true\n      example: output.txt\n    - name: \"--output2\"\n      type: file\n      direction: output\n      required: true\n      example: optional.txt\nIn this case, the two output files would have been identical in the past. ___"
  },
  {
    "objectID": "blog/posts/viash-0.5.1/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.1/index.html#full-changelog",
    "title": "Viash 0.5.1",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FEATURES\n\nCSharpScript: Added support for C# scripts (type: \"csharp_script\") to viash.\n\n\n\nMINOR CHANGES\n\nNextflowPlatform: Added directive_cpus, directive_max_forks, directive_memory and directive_time parameters.\n\n\n\nBUG FIXES\n\nBashWrapper: Refactor escaping descriptions, usages, defaults, and examples (#34).\nNextflowPlatform: Refactor escaping descriptions, usages, defaults and examples (#75).\nNextflowPlatform: Add argument to output path to avoid naming conflicts for components with multiple output files (#76).\nNextflowPlatform, renderCLI(): Only add flag to rendered command when boolean_true is actually true (#78).\nDockerPlatform: Only chown when output file exists.\n\n\n\nTESTING\n\nviash build: Capture stdout messages when errors are expected, so that they don’t clutter the expected output.\nviash build: Check --help description output on the whole text instead of per letter or word basis.\nTestingAllComponentsSuite: Only testing bash natively, because other dependencies might not be available."
  },
  {
    "objectID": "blog/posts/viash-0.5.0/index.html",
    "href": "blog/posts/viash-0.5.0/index.html",
    "title": "Viash 0.5.0",
    "section": "",
    "text": "Here are the most important changes:\n\nImprovements to Docker backend: In the past, you needed to perform --setup on your Docker-based components and executables in order for the image to be built before you could run the component or executable. Now you can simply run your component or executable and Viash will do the image building automatically by default if it detects an image isn’t present yet. This behaviour can be changed by using a Docker setup strategy. For example:\nviash build config.vsh.yaml -p docker --setup alwayscachedbuild\nNextflow gets some argument changes: Arguments for the Nextflow platform now have optional required and default values, just like their native and Docker counterparts. For example:\n  arguments:\n    - name: --name\n      type: string\n      description: Input name\n      required: true\n    - name: --repeat\n      type: integer\n      description: Times to repeat the name\n      default: 100\nTake a look at the Functionality page for more information on arguments and their properties.\nAs long as you use long-option arguments (e.g. --my-option) in the config file for required arguments, the way of specifying argument values for the Nextflow platform is identical to the Docker platform. You still access non-required arguments via this syntax: --&lt;component_name&gt;__&lt;argument_name&gt; &lt;value&gt;. For example:\nmy_component -- --my_component__input Hello!\nVerbosity levels for viash run: Executables now have 8 levels of verbosity\n\nemergency\nalert\ncritical\nerror\nwarning\nnotice\ninfo\ndebug\n\nThe default verbosity level is notice. You can pass the -v or --verbose option to bump up the verbosity by one level. By passing -vv the verbosity goes up by two levels. You can manually set the verbosity by using the --verbosity &lt;int_level&gt; option. For example, if you wanted to only show errors or worse:\nviash run config.vsh.yaml -- --verbosity 3"
  },
  {
    "objectID": "blog/posts/viash-0.5.0/index.html#whats-new",
    "href": "blog/posts/viash-0.5.0/index.html#whats-new",
    "title": "Viash 0.5.0",
    "section": "",
    "text": "Here are the most important changes:\n\nImprovements to Docker backend: In the past, you needed to perform --setup on your Docker-based components and executables in order for the image to be built before you could run the component or executable. Now you can simply run your component or executable and Viash will do the image building automatically by default if it detects an image isn’t present yet. This behaviour can be changed by using a Docker setup strategy. For example:\nviash build config.vsh.yaml -p docker --setup alwayscachedbuild\nNextflow gets some argument changes: Arguments for the Nextflow platform now have optional required and default values, just like their native and Docker counterparts. For example:\n  arguments:\n    - name: --name\n      type: string\n      description: Input name\n      required: true\n    - name: --repeat\n      type: integer\n      description: Times to repeat the name\n      default: 100\nTake a look at the Functionality page for more information on arguments and their properties.\nAs long as you use long-option arguments (e.g. --my-option) in the config file for required arguments, the way of specifying argument values for the Nextflow platform is identical to the Docker platform. You still access non-required arguments via this syntax: --&lt;component_name&gt;__&lt;argument_name&gt; &lt;value&gt;. For example:\nmy_component -- --my_component__input Hello!\nVerbosity levels for viash run: Executables now have 8 levels of verbosity\n\nemergency\nalert\ncritical\nerror\nwarning\nnotice\ninfo\ndebug\n\nThe default verbosity level is notice. You can pass the -v or --verbose option to bump up the verbosity by one level. By passing -vv the verbosity goes up by two levels. You can manually set the verbosity by using the --verbosity &lt;int_level&gt; option. For example, if you wanted to only show errors or worse:\nviash run config.vsh.yaml -- --verbosity 3"
  },
  {
    "objectID": "blog/posts/viash-0.5.0/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.0/index.html#full-changelog",
    "title": "Viash 0.5.0",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nDockerPlatform: A Docker setup will be performed by default. Default strategy has been changed to ifneedbepullelsecachedbuild (#57). ---setup strategy has been removed and ---docker_setup_strategy has been renamed to ---setup. This change allows running a component for the first time. During first time setup, the Docker container will be pulled or built automatically.\nNativePlatform: Deprecated the native setup field.\n\n\n\nMAJOR CHANGES\n\nNXF: This version changes the handling logic for arguments. An argument can be either required or not and can have a default: ... value or not. Checks are implemented to verify that required arguments are effectively provided during pipeline running.\nNXF: If one sticks to long-option argments in the viash config, for all arguments that are required, the way of specifying the arguments on the CLI is identical for the Docker and Nextflow platforms. Non-required arguments can still be accessed from CLI using --&lt;component_name&gt;__&lt;argument_name&gt; ....\nNXF: Running a module as a standalone pipeline has become easier.\nviash run: Implement verbosity levels (#58). viash executables now have 7 levels of verbosity: emergency, alert, critical, error, warning, notice, info, debug. The default verbosity level is ‘notice’. Passing -v or --verbose bumps up the verbosity level by one, -vv by two. The verbosity level can be set manually by passing --verbosity x.\n\n\n\nMINOR CHANGES\n\nDocker Platform: Added privileged argument, allowing to run docker with the --privileged flag.\nDocker Requirements: Allow specifying environment variables in the Dockerfile.\nConfig modding: Added a +0= operator to prepend items to a list.\nviash run: Added a --version flag to viash executables for viewing the version of the component.\nFunctionality: Added checks on the functionality and argument names.\nviash run: Added examples to functionality and arguments. Reworked --help formatting to include more information and be more consistent (#56).\n\n\n\nBUG FIXES\n\nDocker R Requirements: Install remotes when using { type: r, packages: [ foo ] }.\nconfig: Throw error when user made a typo in the viash config (#62).\n\n\n\nTESTING\n\nNXF: Add an end-to-end test for running a nextflow pipeline using viash components.\nDocker: Reorganized viash docker build testbench into a main testbench with smaller auxiliary testbenches to keep them more manageable and clear what happens where.\nviash ns: Added a basic testbench for namespace tests."
  },
  {
    "objectID": "blog/posts/viash-0.1.0/index.html",
    "href": "blog/posts/viash-0.1.0/index.html",
    "title": "Viash 0.1.0",
    "section": "",
    "text": "ftype has been renamed to function_type. The value for this field is also being checked.\nplatform has been removed.\nInstead, the first resource listed is expected to have type: r_script, type: bash_script, type: python_script, or type: executable. The other resources are expected to have type: file by default, and are left untouched by Viash.\nin the arguments, field flagValue has been removed. Instead, use type: boolean_true and type: boolean_false to achieve the same effect.\n\n\n\n\n\nThe r: packages: field has been renamed to r: cran:."
  },
  {
    "objectID": "blog/posts/viash-0.1.0/index.html#whats-new",
    "href": "blog/posts/viash-0.1.0/index.html#whats-new",
    "title": "Viash 0.1.0",
    "section": "",
    "text": "ftype has been renamed to function_type. The value for this field is also being checked.\nplatform has been removed.\nInstead, the first resource listed is expected to have type: r_script, type: bash_script, type: python_script, or type: executable. The other resources are expected to have type: file by default, and are left untouched by Viash.\nin the arguments, field flagValue has been removed. Instead, use type: boolean_true and type: boolean_false to achieve the same effect.\n\n\n\n\n\nThe r: packages: field has been renamed to r: cran:."
  },
  {
    "objectID": "blog/posts/viash-0.1.0/index.html#full-changelog",
    "href": "blog/posts/viash-0.1.0/index.html#full-changelog",
    "title": "Viash 0.1.0",
    "section": "Full changelog",
    "text": "Full changelog\n\nMAJOR CHANGES\n\nRefactoring of the Functionality class as discussed in VIP1 (#1). This has resulted in a lot of internal changes, but the changes with regard to the yaml definitions are relatively minor. See the section below for more info.\n\n\n\nMINOR CHANGES\n\nUpdated the functionality.yamls under atoms/ and src/test/ to reflect these aforementioned changes.\nAllow for bioconductor and other repositories in the R environment.\nAdd support for pip versioning syntax.\n\n\n\nBUG FIXES\n\nDo not quote passthrough flags.\nAllow for spaces inside of Docker volume paths.\n\n\n\nDOCUMENTATION\n\nUpdated the README.md.\nProvide some small examples at doc/examples."
  },
  {
    "objectID": "blog/posts/viash-0.5.9/index.html",
    "href": "blog/posts/viash-0.5.9/index.html",
    "title": "Viash 0.5.9",
    "section": "",
    "text": "The biggest change in this release is that long running Viash components (VS Code server or R Studio server for example) can now be interrupted by pressing CTRL-C or by sending it an INT or SIGINT signal. Before this release, you had to manually stop the Docker container to get the component to terminate."
  },
  {
    "objectID": "blog/posts/viash-0.5.9/index.html#whats-new",
    "href": "blog/posts/viash-0.5.9/index.html#whats-new",
    "title": "Viash 0.5.9",
    "section": "",
    "text": "The biggest change in this release is that long running Viash components (VS Code server or R Studio server for example) can now be interrupted by pressing CTRL-C or by sending it an INT or SIGINT signal. Before this release, you had to manually stop the Docker container to get the component to terminate."
  },
  {
    "objectID": "blog/posts/viash-0.5.9/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.9/index.html#full-changelog",
    "title": "Viash 0.5.9",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FEATURES\n\nviash run: A long running Viash component can be interrupted by pressing CTRL-C or by sending it an INT or SIGINT signal.\nDockerPlatform: Automatically add a few labels based on metadata to Dockerfile.\nDockerPlatform: Added value target_image_source for setting the source of the target image. This is used for defining labels in the dockerfile. Example:\ntarget_image_source: https://github.com/foo/bar\n\n\n\nMINOR CHANGES\n\nviash ns list: Added --format yaml/json argument to be able to return the output as a json as well. Useful for when jq is installed but yq is not. Example:\n  viash ns list -p docker -f json | jq '.[] | .info.config'\nviash config view: Same as above.\n\n\n\nDEPRECATION\n\nCLI: Deprecated -P flag use -p intead.\nDockerPlatform: Deprecated version value."
  },
  {
    "objectID": "blog/posts/viash-0.5.14/index.html",
    "href": "blog/posts/viash-0.5.14/index.html",
    "title": "Viash 0.5.14",
    "section": "",
    "text": "Argument groups allow for grouping arguments together by function or category, making the --help output a lot more clear for components with a lot of arguments."
  },
  {
    "objectID": "blog/posts/viash-0.5.14/index.html#whats-new",
    "href": "blog/posts/viash-0.5.14/index.html#whats-new",
    "title": "Viash 0.5.14",
    "section": "",
    "text": "Argument groups allow for grouping arguments together by function or category, making the --help output a lot more clear for components with a lot of arguments."
  },
  {
    "objectID": "blog/posts/viash-0.5.14/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.14/index.html#full-changelog",
    "title": "Viash 0.5.14",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FUNCTIONALITY\n\nFunctionality: Allow specifying argument groups. Example:\nfunctionality:\n  ...\n  argument_groups:\n    - name: First group\n      arguments: [foo, bar]\n      description: Description\nAddition of the viash_nxf_schema component for converting a Viash config (for a workflow) into a nextflow schema file.\nNextflowVdsl3Platform: Use --param_list to initialise a Nextflow channel with multiple parameter sets. Possible formats are csv, json, yaml, or simply a yaml_blob. A csv should have column names which correspond to the different arguments of this pipeline. A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. A yaml blob can also be passed directly as a parameter. Inside the Nextflow pipeline code, params.param_list can also be used to directly a list of parameter sets. When passing a csv, json or yaml, relative path names are relativized to the location of the parameter file.\nExamples:\nnextflow run \"target/foo/bar/main.nf\" --param_list '[{\"id\": \"foo\", \"input\": \"/path/to/bar\"}]'\nnextflow run \"target/foo/bar/main.nf\" --param_list \"params.csv\" --reference \"/path/to/ref\"\n\n\n\nMAJOR CHANGES\n\nNextflowVdsl3Platform: The functionality is now slurped from a json instead of manually taking care of the formatting in Groovy.\nNextflowVdsl3Platform: The --help is auto-generated from the config.\n\n\n\nMINOR CHANGES\n\nNextflowVdsl3Platform: Allow both --publish_dir and --publishDir when auto.publish = true.\nNextflowVdsl3Platform: Allow passing parameters with multiplicity &gt; 1 from Nextflow CLI.\nMain: Added viash --cli_export which outputs the internal cli construction information to console. This is to be used to automate populating the documentation website.\nviash ns: Display success and failure summary statistics, printed to stderr.\nDataObject: .alternatives is now a OneOrMore[String] instead of List[String], meaning you can now specify { type: string, name: \"--foo\", alternatives: \"-f\" } instead of { type: string, name: \"--foo\", alternatives: [ \"-f\" ] }\nBashWrapper: Added metadata field meta_executable, which is a shorthand notation for meta_executable=\"$meta_resources_dir/$meta_functionality_name\"\n\n\n\nINTERNAL CHANGES\n\nArguments: Internal naming of functionality.arguments is changed from DataObject to Arguments. Change is also applied to child classes, e.g. StringObject -&gt; StringArgument.\nScript: Allow more control over where injected code ends up.\nRestructure type system to allow type-specific arguments.\n\n\n\nBUG FIXES\n\nDockerPlatform: Change org.opencontainers.image.version annotation to functionality.version when set. Additionally fixed retrieving the git tag possibly returning fatal: No names found, cannot describe anything. or similar.\nviash config inject: Fix config inject when .functionality.inputs or .functionality.outputs is used.\nBashWrapper: Don’t add bc as dependency. Only perform integer/float min/max checks when bc is available, otherwise ignore.\nDockerPlatform: Fix inputs & outputs arguments being present twice.\nviash ns test: Silently skip Nextflow platforms as these don’t support tests and will always fail.\nTestbenches: Better capture expected error messages while running testbenches. Having these show on the console could be confusing.\nNextflowVdsl3Platform: Fix issue when running multiple VDSL3 modules concurrently on the same channel."
  },
  {
    "objectID": "blog/posts/viash-0.7.2/index.html",
    "href": "blog/posts/viash-0.7.2/index.html",
    "title": "Viash 0.7.2",
    "section": "",
    "text": "This update adds functionality to resolve paths starting with a slash as relative to the project directory, improves handling of info metadata in the config, and fixes to the operator precedence of config mods."
  },
  {
    "objectID": "blog/posts/viash-0.7.2/index.html#whats-new",
    "href": "blog/posts/viash-0.7.2/index.html#whats-new",
    "title": "Viash 0.7.2",
    "section": "",
    "text": "This update adds functionality to resolve paths starting with a slash as relative to the project directory, improves handling of info metadata in the config, and fixes to the operator precedence of config mods."
  },
  {
    "objectID": "blog/posts/viash-0.7.2/index.html#full-changelog",
    "href": "blog/posts/viash-0.7.2/index.html#full-changelog",
    "title": "Viash 0.7.2",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FUNCTIONALITY\n\nResolve resource and merge paths starting with a slash (/) as relative to the project directory (#380). To define absolute paths (which is not recommended anyway), prefix the path with the file:// protocol. Examples:\n\n/foo is a file or directory called foo in the current project directory.\nfile:/foo is a file or directory called foo in the system root.\n\n\n\n\nMINOR CHANGES\n\nviash config view: Do not modify (e.g. strip empty fields) of the .functionality.info and .functionality.arguments[].info fields (#386).\n\n\n\nBUG FIXES\n\nConfigMods: Fix operator precedence issues with conditions in the config mod parsers (#390).\n\n\n\nINTERNAL CHANGES\n\nClean up unused code (#380).\nMove circe encoders/decoders for File and Path from io.viash.functionality.arguments to io.viash.helpers.circe (#380).\nStore the project root directory (that is, the directory of the _viash.yaml) in a ViashProject object (#380).\nTests: Reworked language tests to be grouped in their own subfolder and split off the bash language test from the general testbash folder (#381).\nTests: Add additional language tests for viash config inject (#381).\nTests: Added test for io.viash.helpers.IO (#380)."
  },
  {
    "objectID": "blog/posts/viash-0.6.1/index.html",
    "href": "blog/posts/viash-0.6.1/index.html",
    "title": "Viash 0.6.1",
    "section": "",
    "text": "This release contains mostly minor improvements of functionality released in Viash 0.6.0. Most notably:\n\nSupport was added for type: long arguments\nmeta[\"n_proc\"] has been renamed to meta[\"cpus\"]. meta[\"cpus\"] is now an integer, whereas meta[\"memory_*\"] are now longs.\nviash ns exec is able to recognise {platform} and {namespace} fields.\nAnd various bug fixes and improvements to documentation and unit testing."
  },
  {
    "objectID": "blog/posts/viash-0.6.1/index.html#whats-new",
    "href": "blog/posts/viash-0.6.1/index.html#whats-new",
    "title": "Viash 0.6.1",
    "section": "",
    "text": "This release contains mostly minor improvements of functionality released in Viash 0.6.0. Most notably:\n\nSupport was added for type: long arguments\nmeta[\"n_proc\"] has been renamed to meta[\"cpus\"]. meta[\"cpus\"] is now an integer, whereas meta[\"memory_*\"] are now longs.\nviash ns exec is able to recognise {platform} and {namespace} fields.\nAnd various bug fixes and improvements to documentation and unit testing."
  },
  {
    "objectID": "blog/posts/viash-0.6.1/index.html#full-changelog",
    "href": "blog/posts/viash-0.6.1/index.html#full-changelog",
    "title": "Viash 0.6.1",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nDeprecated usage resources_dir variable inside scripts, use meta[\"resources_dir\"] instead (or $meta_resources_dir in Bash, or meta$resources_dir in R).\nDeprecated meta[\"n_proc\"] in favour for meta[\"cpus\"].\n\n\n\nNEW FUNCTIONALITY\n\nviash ns exec: Added two more fields:\n\n{platform}: the platform name (if applicable)\n{namespace}: the namespace of the component\n\nLongArgument: Added support for 64-bit integers with type: long as opposed to type: integer which are 32-bit integers.\n\n\n\nMAJOR CHANGES\n\nAllow passing integers/doubles/booleans to string parameters (#225). Removed the ‘Version’ helper class.\n\n\n\nMINOR CHANGES\n\nmeta[\"cpus\"] is now an integer, meta[\"memory_*\"] are now longs (#224).\nDockerPlatform: Only store author names in the authors metadata.\nNextflowPlatform: Only store author names in the authors metadata.\nArgument[_]: Turn multiple_sep from Char into String.\n\n\n\nINTERNAL CHANGES\n\nAll meta[...] variables are now processed similar to Argument[_]s, instead of using custom code to convert object types and detect Docker mounts.\nEscaper: Make more generic Escaper helper class.\n\n\n\nDOCUMENTATION\n\nHardcoded URLs pointing to viash.io in the documentation annotations were replaced with a new keyword system.\nReplaced references to “DSL” with “Dynamic Config Modding” in the --help output.\nAdded an example for Ruby based Docker setups.\n\n\n\nBUG FIXES\n\nviash ns: Reverse exit code outputs, was returning 1 when everything was OK and 0 when errors were detected (#227).\nviash config inject: Fix processing of arguments when argument groups are defined (#231).\nFixed a few typos in the CLI.\nFixed the formatting of ns exec documentation.\nVDSL3: Fix stub functionality.\nVDSL3: Fix error during error message.\nviash test: Fix issue where VIASH_TEMP could not be a relative directory when running viash test (#242).\nBashScript, CSharpScript, JavaScriptScript, PythonScript, RScript, ScalaScript: Fix quoting issues of certain characters (#113).\n\n\n\nDEPRECATION\n\nNextflowPlatform: Deprecate --param_list_format parameter.\n\n\n\nTESTING\n\nBashScript, CSharpScript, JavaScriptScript, PythonScript, RScript, ScalaScript: Implement more rigorous testing of which characters are escaped.\nBashWrapper: Escape usage of multiple_sep. This fixes various checks and transformations not working when when multiple_sep is set to \";\" (#235)."
  },
  {
    "objectID": "blog/posts/viash-0.6.5/index.html",
    "href": "blog/posts/viash-0.6.5/index.html",
    "title": "Viash 0.6.5",
    "section": "",
    "text": "A small update which fixes an issue with viash ns list that was introduced in Viash 0.6.3."
  },
  {
    "objectID": "blog/posts/viash-0.6.5/index.html#whats-new",
    "href": "blog/posts/viash-0.6.5/index.html#whats-new",
    "title": "Viash 0.6.5",
    "section": "",
    "text": "A small update which fixes an issue with viash ns list that was introduced in Viash 0.6.3."
  },
  {
    "objectID": "blog/posts/viash-0.6.5/index.html#full-changelog",
    "href": "blog/posts/viash-0.6.5/index.html#full-changelog",
    "title": "Viash 0.6.5",
    "section": "Full changelog",
    "text": "Full changelog\n\nBUG FIXES\n\nviash ns list: When the -p &lt;platform&gt; is defined, filter the output by that platform."
  },
  {
    "objectID": "blog/posts/viash-0.5.10/index.html",
    "href": "blog/posts/viash-0.5.10/index.html",
    "title": "Viash 0.5.10",
    "section": "",
    "text": "The viash_install, viash_build, viash_test and viash_push components have been reworked."
  },
  {
    "objectID": "blog/posts/viash-0.5.10/index.html#whats-new",
    "href": "blog/posts/viash-0.5.10/index.html#whats-new",
    "title": "Viash 0.5.10",
    "section": "",
    "text": "The viash_install, viash_build, viash_test and viash_push components have been reworked."
  },
  {
    "objectID": "blog/posts/viash-0.5.10/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.10/index.html#full-changelog",
    "title": "Viash 0.5.10",
    "section": "Full changelog",
    "text": "Full changelog\n\nMAJOR CHANGES\n\nviash_install:\n\nAdded --log_prefix: This prefix is used to determine the path of the log files for viash_build, viash_test and viash_push.\nAdded --organization: Id of the organisation to be used in the Docker image name, i.e. &lt;registry&gt;/&lt;organization&gt;/&lt;namespace&gt;&lt;namespace_sep&gt;&lt;name&gt;.\nAdded --target_image_source: Url to the Git repo in which this project resides.\nRemoved --log.\n\nviash_build:\n\nReduce code duplication by contructing the command with Bash Arrays.\nRenamed --platforms to --platform.\nAdded --organization: Id of the organisation to be used in the Docker image name, i.e. &lt;registry&gt;/&lt;organization&gt;/&lt;namespace&gt;&lt;namespace_sep&gt;&lt;name&gt;.\nAdded --target_image_source: Url to the Git repo in which this project resides.\nChanged default of --log from log.txt to .viash_build_log.txt.\nAdded --verbose: Print out the underlying viash ns build command before running it.\n\nviash_test:\n\nReduce code duplication by contructing the command with Bash Arrays.\nRenamed --platforms to --platform.\nAdded --organization: Id of the organisation to be used in the Docker image name, i.e. &lt;registry&gt;/&lt;organization&gt;/&lt;namespace&gt;&lt;namespace_sep&gt;&lt;name&gt;.\nAdded --target_image_source: Url to the Git repo in which this project resides.\nChanged default of --log from log.txt to .viash_test_log.txt.\nChanged default of --tsv from log.tsv to .viash_test_log.tsv.\nAdded --verbose: Print out the underlying viash ns test command before running it.\n\nviash_push:\n\nReduce code duplication by contructing the command with Bash Arrays.\nAdded --organization: Id of the organisation to be used in the Docker image name, i.e. &lt;registry&gt;/&lt;organization&gt;/&lt;namespace&gt;&lt;namespace_sep&gt;&lt;name&gt;.\nChanged default of --log from log.txt to .viash_push_log.txt.\nAdded --verbose: Print out the underlying viash ns build command before running it.\n\n\n\n\nMINOR CHANGES\n\nNextflowPlatform: Added the organization field to the nextflow platform as well."
  },
  {
    "objectID": "blog/posts/viash-0.5.4/index.html",
    "href": "blog/posts/viash-0.5.4/index.html",
    "title": "Viash 0.5.4",
    "section": "",
    "text": "A cache type can now be specified in the config file for the Nextflow platform. Previously this was hardcoded to be deep, but the default caching method is now default.\nTo use deep caching again, add this to your config file:\ncache: deep"
  },
  {
    "objectID": "blog/posts/viash-0.5.4/index.html#whats-new",
    "href": "blog/posts/viash-0.5.4/index.html#whats-new",
    "title": "Viash 0.5.4",
    "section": "",
    "text": "A cache type can now be specified in the config file for the Nextflow platform. Previously this was hardcoded to be deep, but the default caching method is now default.\nTo use deep caching again, add this to your config file:\ncache: deep"
  },
  {
    "objectID": "blog/posts/viash-0.5.4/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.4/index.html#full-changelog",
    "title": "Viash 0.5.4",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nNextflowPlatform: The default caching mechanism is now what Nextflow uses as default. In order to replicate earlier caching, cache: deep should be specified in the Viash config file.\n\n\n\nNEW FEATURES\n\nNextflowPlatform: Added cache directive to specify the typing of caching to be performed."
  },
  {
    "objectID": "blog/posts/viash-0.6.3/index.html",
    "href": "blog/posts/viash-0.6.3/index.html",
    "title": "Viash 0.6.3",
    "section": "",
    "text": "This release features contains mostly quality of life improvements and some experimental functionality. Most notably:\n\nviash ns list now only returns a config just once instead of once per platform.\nA functionality’s info field can contain any data structures. An .info field was added to arguments as well.\nBug fixes for using Viash with podman, Nextflow&gt;=22.10 and R&lt;4.0.\nExperimental support for inheriting from config partials."
  },
  {
    "objectID": "blog/posts/viash-0.6.3/index.html#whats-new",
    "href": "blog/posts/viash-0.6.3/index.html#whats-new",
    "title": "Viash 0.6.3",
    "section": "",
    "text": "This release features contains mostly quality of life improvements and some experimental functionality. Most notably:\n\nviash ns list now only returns a config just once instead of once per platform.\nA functionality’s info field can contain any data structures. An .info field was added to arguments as well.\nBug fixes for using Viash with podman, Nextflow&gt;=22.10 and R&lt;4.0.\nExperimental support for inheriting from config partials."
  },
  {
    "objectID": "blog/posts/viash-0.6.3/index.html#full-changelog",
    "href": "blog/posts/viash-0.6.3/index.html#full-changelog",
    "title": "Viash 0.6.3",
    "section": "Full changelog",
    "text": "Full changelog\n\nMAJOR CHANGES\n\nConfig: Made major internal changes w.r.t. how config files are read and at which point a platform (native, docker, nextflow) is applied to the functionality script. The only visible side effect is that viash ns list will output each config only once instead of multiple times.\nFunctionality: Structured annotation can be added to a functionality and its arguments using the info field. Example:\nfunctionality:\n  name: foo\n  info:\n    site: https://abc.xyz\n    tags: [ one, two, three ]\n  arguments:\n    - name: --foo\n      type: string\n      info:\n        foo: bar\n        a:\n          b:\n            c\n\n\n\nMINOR CHANGES\n\nBashWrapper: Allow printing the executor command by adding ---verbose ---verbose to a viash run or an executable.\nTestbenches: Rework MainBuildAuxiliaryNativeParameterCheck to create stimulus files and loop over the file from bash instead of looping natively. This prevents creating thousands of new processes which would only test a single parameter. Note this still calls the main script for each stimulus separately, but that was the case anyway, only much much worse.\nTestbenches: Split some grouped test benches into slightly smaller test benches that group tested functionality better.\nAnnotations: Complete the config schema annotations. Make sure all arguments are documented. Added an annotation internalFunctionality and undocumented for arguments that should not be documented. Added a testbench that verifies that all arguments are in fact annotated, skipping those that are not in the class constructor. Adds a hierarchy field in the __this__ member to list the relation of the own and parent classes.\nTestbenches: Add exit code to helper method testMainWithStdErr.\nTestbenches: Add testbench to verify viash underscore components (viash_build, viash_install, viash_push, viash_skeleton, viash_test).\nTestbenches: Update viash underscore component tests to use $meta_executable.\nviash ns exec: Allow choosing whether the {platform} field should be filled in, based on the --apply_platform parameter.\n\n\n\nBUG FIXES\n\nDockerPlatform: Remove duplicate auto-mounts (#257).\nUnderscore component tests: Fix tests for viash_skeleton and viash_test components.\nNextflowVDSL3Platform: Fix ‘Module scriptPath has not been defined yet’ error when Nextflow&gt;=22.10 (#269).\nconfig inject: Doesn’t work when must_exist == true (#273).\nRScript: Fix compatibility issue where the new character escaping in r_script required R&gt;=4.0 (#275). Escaping is now handled without using the new r'(foo)' notation.\n\n\n\nDEPRECATION\n\nDockerRequirements: The resources: setting has been deprecated and will be removed in Viash 0.7.0. Please use copy: instead.\nDockerRequirements: The privileged: setting has been deprecated and will be removed in Viash 0.7.0. Please use run_args: \"--privileged\" instead.\n\n\n\nEXPERIMENTAL FUNCTIONALITY\n\nConfig: Any part of a Viash config can use inheritance to fill data (#271). For example: Contents of src/test/config.vsh.yaml:\n__inherits__: ../api/base.yaml\nfunctionality:\n  name: test\n  resources:\n    - type: bash_script\n      path: script.sh\n      text: |\n        echo Copying $par_input to $par_output\n        cp $par_input $par_output\nContents of src/api/base.yaml:\nfunctionality:\n  arguments:\n    - name: \"--input\"\n      type: file\n    - name: \"--output\"\n      type: file\n      direction: output\nThe resulting yaml will be:\nfunctionality:\n  name: test\n  arguments:\n    - name: \"--input\"\n      type: file\n    - name: \"--output\"\n      type: file\n      direction: output\n  resources:\n    - type: bash_script\n      path: script.sh\n      text: |\n        echo Copying $par_input to $par_output\n        cp $par_input $par_output"
  },
  {
    "objectID": "blog/posts/viash-0.6.2/index.html",
    "href": "blog/posts/viash-0.6.2/index.html",
    "title": "Viash 0.6.2",
    "section": "",
    "text": "This is a quick release to push two bug fixes related to security and being able to run Nextflow with optional output files."
  },
  {
    "objectID": "blog/posts/viash-0.6.2/index.html#whats-new",
    "href": "blog/posts/viash-0.6.2/index.html#whats-new",
    "title": "Viash 0.6.2",
    "section": "",
    "text": "This is a quick release to push two bug fixes related to security and being able to run Nextflow with optional output files."
  },
  {
    "objectID": "blog/posts/viash-0.6.2/index.html#full-changelog",
    "href": "blog/posts/viash-0.6.2/index.html#full-changelog",
    "title": "Viash 0.6.2",
    "section": "Full changelog",
    "text": "Full changelog\n\nBUG FIXES\n\nGit: Strip credentials from remote repositories when retrieving the path.\nVDSL3: Allow optional output files to be null."
  },
  {
    "objectID": "blog/posts/viash-0.3.0/index.html",
    "href": "blog/posts/viash-0.3.0/index.html",
    "title": "Viash 0.3.0",
    "section": "",
    "text": "config.vsh.yaml is the new standard format, temporary files are removed when using run and test commands."
  },
  {
    "objectID": "blog/posts/viash-0.3.0/index.html#whats-new",
    "href": "blog/posts/viash-0.3.0/index.html#whats-new",
    "title": "Viash 0.3.0",
    "section": "",
    "text": "config.vsh.yaml is the new standard format, temporary files are removed when using run and test commands."
  },
  {
    "objectID": "blog/posts/viash-0.3.0/index.html#full-changelog",
    "href": "blog/posts/viash-0.3.0/index.html#full-changelog",
    "title": "Viash 0.3.0",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nFile format functionality.yaml is no longer supported. Use config.vsh.yaml or script.vsh.R/py/... instead.\nviash run and viash test: By default, temporary files are removed when the execution succeeded, otherwise they are kept. This behaviour can be overridden by specifying --keep true to always keep the temporary files, and --keep false to always remove them.\nNXF: function_type: todir now returns the output directory on the Channel rather than its contents.\n\n\n\nNEW FEATURES\n\nAdded viash ns test: Run all tests in a particular namespace. For each test, the exit code and duration is reported. Results can be written to a tsv file.\nAdded support for JavaScript scripts.\nAdded support for Scala scripts.\nNXF: publishing has a few more options:\n\npublish: Publish or yes (default is false)\nper_id: Publish results in directories containing the unique (sample) ID (default is true)\npath: A prefix path for the results to be published (default is empty)\n\nFunctionality resources and tests: Allow copying whole directories instead of only single files. Also allow to rename the destination folder by specifying a value for ‘dest’.\nPlatform R / Python dependencies: Allow running a simple command.\n\n\n\nMAJOR CHANGES\n\nThe -P &lt;platform&gt; parameter will be deprecated. For now, all -P values are simply passed to -p.\nviash ns build and viash ns test: Now use all available platforms if -p is not specified.\nBy default, python packages will not be installed as user. Use user: true to modify this behaviour.\n\n\n\nMINOR CHANGES\n\nName of autogenerated Docker image is now ns/tool.\nInternal changes to make it easier to extend viash with more scripting languages.\nNXF: Default image is now ns/tool for consistency.\nNXF: Repurpose asis function type for having simple publishing steps (see docs).\nNXF: Add component name to main process name\nR dependencies: by default, do not reinstall Bioconductor packages. Set bioc_force_install: true to revert this behaviour.\n\n\n\nBUG FIXES\n\nviash build: Do not display error messages when pwd is not a git repository.\n\n\n\nTESTING\n\nviash test: Add tests for viash test functionality."
  },
  {
    "objectID": "blog/posts/viash-0.3.2/index.html",
    "href": "blog/posts/viash-0.3.2/index.html",
    "title": "Viash 0.3.2",
    "section": "",
    "text": "The viash build command doesn’t generate a viash.yaml automatically anymore, added beta functionality for running tests in Nextflow."
  },
  {
    "objectID": "blog/posts/viash-0.3.2/index.html#whats-new",
    "href": "blog/posts/viash-0.3.2/index.html#whats-new",
    "title": "Viash 0.3.2",
    "section": "",
    "text": "The viash build command doesn’t generate a viash.yaml automatically anymore, added beta functionality for running tests in Nextflow."
  },
  {
    "objectID": "blog/posts/viash-0.3.2/index.html#full-changelog",
    "href": "blog/posts/viash-0.3.2/index.html#full-changelog",
    "title": "Viash 0.3.2",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nviash build: Do not automatically generate a viash.yaml when creating an executable. Instead, you need to add the -w|--write_meta flag in order to let viash know that it should generate a viash.yaml in the resources dir.\n\n\n\nMAJOR CHANGES\n\nNXF: Add beta functionality for running viash tests in Nextflow.\n\n\n\nMINOR CHANGES\n\nResources: Rework the way resources paths are converted to absolute URIs, should not have any impact on UX.\n\n\n\nBUG FIXES\n\nNXF: Add temporary workaround for determining the used image name when running a component.\nDocker Platform: Set default setup strategy to “alwayscachedbuild” as this used to be the default viash behaviour.\nNXF: Fix issue where resource dir would not get mounted depending on which inputs are provided.\nNXF: Accept multiple inputs when component is running as standalone."
  },
  {
    "objectID": "blog/posts/viash-0.5.5/index.html",
    "href": "blog/posts/viash-0.5.5/index.html",
    "title": "Viash 0.5.5",
    "section": "",
    "text": "The resources directory is no longer added to the PATH variable by default. You can re-enable this behaviour by setting add_resources_to_path to true in the functionality part of the config file.\nHere’s a snippet of a config file to illustrate this:\nfunctionality:\n  name: example_component\n  description: Serve as a simple example.\n  add_resources_to_path: true\n  ..."
  },
  {
    "objectID": "blog/posts/viash-0.5.5/index.html#whats-new",
    "href": "blog/posts/viash-0.5.5/index.html#whats-new",
    "title": "Viash 0.5.5",
    "section": "",
    "text": "The resources directory is no longer added to the PATH variable by default. You can re-enable this behaviour by setting add_resources_to_path to true in the functionality part of the config file.\nHere’s a snippet of a config file to illustrate this:\nfunctionality:\n  name: example_component\n  description: Serve as a simple example.\n  add_resources_to_path: true\n  ..."
  },
  {
    "objectID": "blog/posts/viash-0.5.5/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.5/index.html#full-changelog",
    "title": "Viash 0.5.5",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nFunctionality: The resources dir no longer automatically added to the PATH variable. To alter this behaviour, set .functionality.add_resources_to_path to true.\n\n\n\nMINOR CHANGES\n\nBash Script: only define variables which have values.\nCSharp Test Component: Change Docker image to dataintuitive/dotnet-script to have more control over the lifecycle of versioned tags.\nUpdated Code of Conduct from v2.0 to v2.1.\n\n\n\nBUG FIXES\n\nViash namespace: Fix incorrect output path when the parent directory of a Viash component is not equal to the value of .functionality.name."
  },
  {
    "objectID": "blog/posts/viash-0.7.1/index.html",
    "href": "blog/posts/viash-0.7.1/index.html",
    "title": "Viash 0.7.1",
    "section": "",
    "text": "This is a minor release which improves caching in VDSL3 components and changes the formats of the schema files for the Viash config and CLI."
  },
  {
    "objectID": "blog/posts/viash-0.7.1/index.html#whats-new",
    "href": "blog/posts/viash-0.7.1/index.html#whats-new",
    "title": "Viash 0.7.1",
    "section": "",
    "text": "This is a minor release which improves caching in VDSL3 components and changes the formats of the schema files for the Viash config and CLI."
  },
  {
    "objectID": "blog/posts/viash-0.7.1/index.html#full-changelog",
    "href": "blog/posts/viash-0.7.1/index.html#full-changelog",
    "title": "Viash 0.7.1",
    "section": "Full changelog",
    "text": "Full changelog\n\nMINOR CHANGES\n\nDataflowHelper: Add assertions and defs.\n\n\n\nBUG FIXES\n\nVDSL3: Only the first two elements from an event in a channel are now passed to a process. This avoids calculating cache entries based on arguments that are not used by the process, causing false-negative cache misses.\nconfig_schema:\n\nCorrect some incorrect markdown tags.\nAdd project config.\nCorrect documentation/markdown tags to the correct order.\nAdd summary description and example for ‘resource’ and ‘argument’, to be used on the reference website.\nAdd documentation for the Nextflow directives.\n\ncli_schema: Correct documentation/markdown tags to the correct order."
  },
  {
    "objectID": "blog/posts/viash-0.4.0/index.html",
    "href": "blog/posts/viash-0.4.0/index.html",
    "title": "Viash 0.4.0",
    "section": "",
    "text": "The viash ns command’s –namespace argument has been renamed to –query_namespace, introduction of custom DSL for overriding config properties at runtime."
  },
  {
    "objectID": "blog/posts/viash-0.4.0/index.html#whats-new",
    "href": "blog/posts/viash-0.4.0/index.html#whats-new",
    "title": "Viash 0.4.0",
    "section": "",
    "text": "The viash ns command’s –namespace argument has been renamed to –query_namespace, introduction of custom DSL for overriding config properties at runtime."
  },
  {
    "objectID": "blog/posts/viash-0.4.0/index.html#full-changelog",
    "href": "blog/posts/viash-0.4.0/index.html#full-changelog",
    "title": "Viash 0.4.0",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FEATURES\n\nConfig modding: A custom viash DSL allows overriding viash config properties at runtime. See online documentation for more information. Example:\nviash ns test \\\n  -p docker \\\n  -c '.functionality.version := \"1.0.0\"' \\\n  -c '.platforms[.type == \"docker\"].target_registry := \"my.docker-registry.com\"' \\\n  -c '.platforms[.type == \"docker\"].setup_strategy := \"pull\"' \\\n  -l\nviash build: The image can be pushed with --push. The same can be done by passing ---push to a viash executable.\nviash ns can query the name, namespace, or both, with the following arguments:\n\n--query_namespace or -n: filter the namespace with a regex.\n--query_name: filter the name with a regex.\n--query or -q: filter the namespace/name with a regex.\n\nAdded the project_build, project_clean, project_push and project_test components to this repository.\nAdded a field .functionality.info of type Map[String, String] in order to be able to specify custom annotations to the component.\n\n\n\nBREAKING CHANGES\n\nviash ns: Argument --namespace has been renamed to --query_namespace.\nviash ns: Argument --namespace does not implicitly change the namespace of the functionality anymore. You can use the command DSL to reproduce this effect; for example: -c '.functionality.namespace := \"foo\"'.\nDocker & NXF: Attribute version is deprecated. Instead, the default value will be .functionality.version, which can be overridden by using the tag attribute.\nNXF: When running a viash component as a Nextflow module on its own, you now need to specify all input files on the command line. For instance, if --input and --reference are input file arguments, you need to start the process by running nextflow run main.nf --input &lt;...&gt; --reference &lt;...&gt; &lt;other arguments&gt;. Previously only the input file needed to be specified.\nDocker & NXF: Default separator between namespace and image name has been changed from \"/\" to \"_\".\n\n\n\nMINOR CHANGES\n\nDocker & NXF: Parsing of image attributes for both Docker and Nextflow platforms are better aligned. You can define an image by specifying either of the following:\n\n{ image: 'ubuntu:latest' }\n{ image: ubuntu, tag: latest }\n\nDocker & NXF: Allow changing the separator between a namespace and the image name.\n\n\n\nNEXTFLOW REFACTORING\nThe generation of Nextflow modules has been refactored thoroughly.\n\nNXF: The implicitly generated names for output files/directories have been improved leading to less clashes.\nNXF: Allow for multiple output files/directories from a module while keeping compatibility for single output. Please refer to the docs.\nNXF: Allow for zero input files by means of passing an empty list [] in the triplet\nNXF: Remove requirement for function_type: todir\nNXF: It is now possible to not only specify label: ... for a nextflow platform but also labels: [ ...].\n\n\n\nBUG FIXES\n\nAllow quotes in functionality descriptions.\nNXF: Providing a default: ... value for output file arguments is no longer necessary."
  },
  {
    "objectID": "blog/posts/viash-0.6.7/index.html",
    "href": "blog/posts/viash-0.6.7/index.html",
    "title": "Viash 0.6.7",
    "section": "",
    "text": "Another minor release which contains several quality of life improvements for the Nextflow VDSL3 platform, as well as automated warnings for deprecated functionality."
  },
  {
    "objectID": "blog/posts/viash-0.6.7/index.html#whats-new",
    "href": "blog/posts/viash-0.6.7/index.html#whats-new",
    "title": "Viash 0.6.7",
    "section": "",
    "text": "Another minor release which contains several quality of life improvements for the Nextflow VDSL3 platform, as well as automated warnings for deprecated functionality."
  },
  {
    "objectID": "blog/posts/viash-0.6.7/index.html#full-changelog",
    "href": "blog/posts/viash-0.6.7/index.html#full-changelog",
    "title": "Viash 0.6.7",
    "section": "Full changelog",
    "text": "Full changelog\n\nMINOR CHANGES\n\nNextflowPlatform: Create directories during a stub run when output path is a nested directory (#314).\nAutomatically generate a warning for deprecated parameters while parsing a .viash.yaml configuration file using the inline documentation deprecation annotations.\nAdd a “planned removal” field in the deprecation annotations.\nAdd testbenches to verify proper formatting of the deprecation versions and compare current version to the planned removal version so no deprecated parameters get to stick around beyond what was planned.\nNextflowPlatform: Nextflow processes are created lazily; that is, only when running a Nextflow workflow (#321).\n\n\n\nBUG FIXES\n\nNextflowPlatform: Automatically split Viash config strings into strings of length 65000 since the JVM has a limit (65536) on the length of string constants (#323)."
  },
  {
    "objectID": "blog/posts/viash-0.5.15/index.html",
    "href": "blog/posts/viash-0.5.15/index.html",
    "title": "Viash 0.5.15",
    "section": "",
    "text": "This release introduces testbenches and new default argument groups: Inputs, Outputs and Arguments."
  },
  {
    "objectID": "blog/posts/viash-0.5.15/index.html#whats-new",
    "href": "blog/posts/viash-0.5.15/index.html#whats-new",
    "title": "Viash 0.5.15",
    "section": "",
    "text": "This release introduces testbenches and new default argument groups: Inputs, Outputs and Arguments."
  },
  {
    "objectID": "blog/posts/viash-0.5.15/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.15/index.html#full-changelog",
    "title": "Viash 0.5.15",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nWorkflowHelper::helpMessage: Now only takes one argument, namely the config.\n\n\n\nMAJOR CHANGES\n\nNamespace: Changed the namespace of viash from com.dataintuitive.viash to io.viash.\n\n\n\nMINOR CHANGES\n\nTestbenches: Add a testbench framework to test lots of character sequences, single or repeating to be tested in the yaml config. This can be used to later extend to other tests.\nTestbenches::vdsl3: Add testbenches to verify functionality:\n\nVdsl3’s param_list (yamlblob, yaml, json, csv).\nNextflow’s own params-file.\nVdsl3’s recalculating resource file paths to be relative to the param_list file instead of the workflow file (only available for yaml, json, csv).\nVdsl3’s wrapping of modules to run these as a separate workflow automagically out of the box.\n\nMain: Added viash --schema_export which outputs a schema of the Viash config file to console. This is to be used to automate populating the documentation website.\nHelper: Split help message by argument group.\nHelper: Remove unneeded arguments.\nFunctionality: Add default groups Inputs, Outputs and Arguments for all arguments missing from user-defined argument_groups.\nWorkflowHelper::helpMessage: Rewrite to bring on par with Viash’s help message.\nBooleanArguments: Renamed internal class names for BooleanArguments to be better in line with how they are named in the config yaml. BooleanArgumentRegular -&gt; BooleanArgument (in line with boolean) BooleanArgumentTrue -&gt; BooleanTrueArgument (in line with boolean_true) BooleanArgumentFalse -&gt; BooleanFalseArgument (in line with boolean_false)\n\n\n\nBUG FIXES\n\nNextflowVdsl3Platform: Change how --id is processed when a VDSL3 module is called from the CLI.\nNextflowVdsl3Platform: Fix error when param_list is null.\nNextflowVdsl3Platform: Fix error when optional, multiple arguments are set to null.\nTestbenches: Better capture expected error messages while running testbenches again. Code changes right before previous release re-introduced some of the messages.\nNextflowVdsl3Platform: Fix issue where optional parameters aren’t removed when .run(args: [optarg: null]).\nWorkflowHelper::readCsv: Treat empty values as undefined instead of throwing an error.\nNextflowVdsl3Platform: Use $NXF_TEMP or $VIASH_TEMP as temporary directory if the container engine is not set to docker, podman or charlieengine, else set to /tmp.\nResources: When adding a resource folder, allow a trailing / at the end of the path. Previously this caused the target folder to be erased and the content of the resource folder to be written directly into the target folder."
  },
  {
    "objectID": "blog/posts/viash-0.5.2/index.html",
    "href": "blog/posts/viash-0.5.2/index.html",
    "title": "Viash 0.5.2",
    "section": "",
    "text": "This is a small release containing two small features and a bug fix. The new run_args field allows you to add docker run arguments to the Docker platform section of a config file. For example:\nplatforms:\n  - type: docker\n    image: bash:4.0\n    run_args: \"--expose 127.0.0.1:80:8080/tcp --env MY_ENV_VAR=foo\"\nThere’s also a new field for the Nextflow platform: separate_multiple_outputs. By default, this is set to true and separates the outputs generated by a Nextflow component with multiple outputs as separate events on the channel. You can now choose to disable this behaviour:\nplatforms:\n  - type: nextflow\n    publish: true\n    separate_multiple_outputs: false"
  },
  {
    "objectID": "blog/posts/viash-0.5.2/index.html#whats-new",
    "href": "blog/posts/viash-0.5.2/index.html#whats-new",
    "title": "Viash 0.5.2",
    "section": "",
    "text": "This is a small release containing two small features and a bug fix. The new run_args field allows you to add docker run arguments to the Docker platform section of a config file. For example:\nplatforms:\n  - type: docker\n    image: bash:4.0\n    run_args: \"--expose 127.0.0.1:80:8080/tcp --env MY_ENV_VAR=foo\"\nThere’s also a new field for the Nextflow platform: separate_multiple_outputs. By default, this is set to true and separates the outputs generated by a Nextflow component with multiple outputs as separate events on the channel. You can now choose to disable this behaviour:\nplatforms:\n  - type: nextflow\n    publish: true\n    separate_multiple_outputs: false"
  },
  {
    "objectID": "blog/posts/viash-0.5.2/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.2/index.html#full-changelog",
    "title": "Viash 0.5.2",
    "section": "Full changelog",
    "text": "Full changelog\n\nMINOR CHANGES\n\nDockerPlatform: Added run_args field to allow setting docker run arguments.\nNextflowPlatform: Added argument separate_multiple_outputs to allow not separating the outputs generated by a component with multiple outputs as separate events on the channel.\n\n\n\nBUG FIX\n\nIO: Allow overwriting directory resources upon rebuild."
  },
  {
    "objectID": "blog/posts/viash-0.5.12/index.html",
    "href": "blog/posts/viash-0.5.12/index.html",
    "title": "Viash 0.5.12",
    "section": "",
    "text": "This release contains a bunch improvements for VDSL3 and adds some parameters to the viash test and viash test ns commands."
  },
  {
    "objectID": "blog/posts/viash-0.5.12/index.html#whats-new",
    "href": "blog/posts/viash-0.5.12/index.html#whats-new",
    "title": "Viash 0.5.12",
    "section": "",
    "text": "This release contains a bunch improvements for VDSL3 and adds some parameters to the viash test and viash test ns commands."
  },
  {
    "objectID": "blog/posts/viash-0.5.12/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.12/index.html#full-changelog",
    "title": "Viash 0.5.12",
    "section": "Full changelog",
    "text": "Full changelog\n\nMINOR CHANGES\n\n--help: Don’t print “my_component ” when no version is specified, but instead simply “my_component”.\nNextflowVdsl3Platform: Set mode=copy for auto.publish and auto.transcript.\nNextflowVdsl3Platform: When a module is used multiple times in the same workflow, don’t throw an error anymore, instead simply generate a warning.\nNextflowVdsl3Platform: Throw an error when an input file was not found.\nviash build: Indent auto-generated code according the indentation of VIASH START when found.\nMain: Handle not finding the config file or resources in a config file better. Display a more helpful message instead of a stack trace.\nBashWrapper: Add checks on parameters for valid integer, double and boolean values.\nBashWrapper: Add option to limit string and integer values to specific choice values.\nBashWrapper: Add option to set min and max values for integer and double values.\nDependencies:\n\nScala was upgraded from 2.12.10 to 2.12.15\nsbt was upgraded from 1.3.4 to 1.6.1\nsbt-scoverage was upgraded from 1.5.1 to 1.9.3\n\n\n\n\nBUG FIXES\n\nviash_test: Add back --no_cache parameter to viash_test.\nviash_test: Fix --append parameter for viash_test, was not getting passed through.\nviash ns test: Fix --append parameter, actually start from a clean file if append is false.\nviash_push: Fix component not being built during a release of Viash.\nPythonRequirements: Fix packages being mentioned twice in a Dockerfile.\nMain: Added support spaces in filenames of config files and resources\nBashWrapper: Display a message when the last parsed argument would require more values than are still available. Now display a message that values are missing, used to silently crash the wrapper.\nviash config inject: Fix error when file argument is must_exist: true."
  },
  {
    "objectID": "blog/posts/viash-0.2.2/index.html",
    "href": "blog/posts/viash-0.2.2/index.html",
    "title": "Viash 0.2.2",
    "section": "",
    "text": "Allow generating placeholder without VIASH START/VIASH END blocks.\nA script does not need to contain a VIASH START/VIASH END block in order to function.\nPreviously, each script had to contain a codeblock as follows:\n## VIASH START\npar &lt;- list(\n  input = \"foo\",\n  output = \"bar\n)\n## VIASH END"
  },
  {
    "objectID": "blog/posts/viash-0.2.2/index.html#whats-new",
    "href": "blog/posts/viash-0.2.2/index.html#whats-new",
    "title": "Viash 0.2.2",
    "section": "",
    "text": "Allow generating placeholder without VIASH START/VIASH END blocks.\nA script does not need to contain a VIASH START/VIASH END block in order to function.\nPreviously, each script had to contain a codeblock as follows:\n## VIASH START\npar &lt;- list(\n  input = \"foo\",\n  output = \"bar\n)\n## VIASH END"
  },
  {
    "objectID": "blog/posts/viash-0.2.2/index.html#full-changelog",
    "href": "blog/posts/viash-0.2.2/index.html#full-changelog",
    "title": "Viash 0.2.2",
    "section": "Full changelog",
    "text": "Full changelog\n\nMINOR CHANGES\n\nAllow generating placeholder without VIASH START/VIASH END blocks.\n\n\n\nBUG FIXES\n\nviash ns build: Some platforms would sometimes not be detected.\nviash run: Avoid error when no arguments need to be chowned."
  },
  {
    "objectID": "blog/posts/viash-0.5.7/index.html",
    "href": "blog/posts/viash-0.5.7/index.html",
    "title": "Viash 0.5.7",
    "section": "",
    "text": "Examples for arguments now need to be of the same type as the argument itself. You can’t provide an integer for a string-based argument for example.\nA handy new command has been added: viash config inject. This can be used to inject a Viash header into a script based on the arguments of the config file.\nThere have been some improvements to the Docker platform as well.\nYou can now add yum packages as a requirement:\nplatforms:\n  - type: docker\n    image: bash:latest\n    setup:\n      - type: yum\n        packages: [ wget ]\nYou can now include ADD and COPY instructions in the config file:\nplatforms:\n  - type: docker\n    image: bash:latest\n    setup:\n      - type: docker\n        add: [ \"http://foo.bar .\" ]"
  },
  {
    "objectID": "blog/posts/viash-0.5.7/index.html#whats-new",
    "href": "blog/posts/viash-0.5.7/index.html#whats-new",
    "title": "Viash 0.5.7",
    "section": "",
    "text": "Examples for arguments now need to be of the same type as the argument itself. You can’t provide an integer for a string-based argument for example.\nA handy new command has been added: viash config inject. This can be used to inject a Viash header into a script based on the arguments of the config file.\nThere have been some improvements to the Docker platform as well.\nYou can now add yum packages as a requirement:\nplatforms:\n  - type: docker\n    image: bash:latest\n    setup:\n      - type: yum\n        packages: [ wget ]\nYou can now include ADD and COPY instructions in the config file:\nplatforms:\n  - type: docker\n    image: bash:latest\n    setup:\n      - type: docker\n        add: [ \"http://foo.bar .\" ]"
  },
  {
    "objectID": "blog/posts/viash-0.5.7/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.7/index.html#full-changelog",
    "title": "Viash 0.5.7",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nviash config: An argument’s example now needs to be of the same type as the argument itself. For example, [ type: integer, name: foo, example: 10 ] is valid, whereas [ type: integer, name: foo, example: bar ] is not, as ‘bar’ cannot be cast to an integer.\n\n\n\nNEW FUNCTIONALITY\n\nviash config inject: A command for inserting a Viash header into your script.\nYumRequirement: Added a requirement setup for installing through yum. Example: setup: [ [ type: yum, packages: [ wget] ] ]\nDockerRequirement: Allow using copy and add instructions. Example: setup: [ [ type: docker, add: [ \"http://foo.bar .\" ]]]\n\n\n\nBUG FIXES\n\nViashTest: Fix verbosity passthrough.\n--help: Fix repeated usage flag when printing the help."
  },
  {
    "objectID": "blog/posts/viash-0.5.6/index.html",
    "href": "blog/posts/viash-0.5.6/index.html",
    "title": "Viash 0.5.6",
    "section": "",
    "text": "Viash can now be installed without Docker needing to be installed on your system. You do need unzip and wget to complete the installation.\nThe Docker related messages are more user friendly now."
  },
  {
    "objectID": "blog/posts/viash-0.5.6/index.html#whats-new",
    "href": "blog/posts/viash-0.5.6/index.html#whats-new",
    "title": "Viash 0.5.6",
    "section": "",
    "text": "Viash can now be installed without Docker needing to be installed on your system. You do need unzip and wget to complete the installation.\nThe Docker related messages are more user friendly now."
  },
  {
    "objectID": "blog/posts/viash-0.5.6/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.6/index.html#full-changelog",
    "title": "Viash 0.5.6",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nBashWrapper: Forbidden flags -v, --verbose, --verbosity have been renamed to ---v, ---verbose, ---verbosity.\n\n\n\nMINOR CHANGES\n\nSet version of helper scripts to the same version as Viash.\nDockerPlatform: Produce helpful warning message when Docker image can’t be found remotely (#94).\nDockerPlatform: Produce helpful error message when Docker isn’t installed or the daemon is not running (#94 bis).\n\n\n\nBUG FIXES\n\nviash_install:\n\nPassing Viash path as a string instead of as a file to ensure the path is not converted to an absolute path\nSwitch from Docker backend to a Native backend, ‘unzip’ and ‘wget’ are required.\nCorrectly set the log file for viash_test.\n\nDockerPlatform: Added sleep workaround to avoid concurrency issue where a file is executed to build docker containers but apparently still in the process of being written.\nDockerPlatform: Fix order issue of —verbose flag in combination with —setup, allowing to run viash run config.vsh.yaml -- ---setup cb ---verbose and actually get output."
  },
  {
    "objectID": "blog/posts/viash-0.5.10.1/index.html",
    "href": "blog/posts/viash-0.5.10.1/index.html",
    "title": "Viash 0.5.10.1",
    "section": "",
    "text": "This quick release fixes a bug that prevented the correct passthrough of the new organization field."
  },
  {
    "objectID": "blog/posts/viash-0.5.10.1/index.html#whats-new",
    "href": "blog/posts/viash-0.5.10.1/index.html#whats-new",
    "title": "Viash 0.5.10.1",
    "section": "",
    "text": "This quick release fixes a bug that prevented the correct passthrough of the new organization field."
  },
  {
    "objectID": "blog/posts/viash-0.5.10.1/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.10.1/index.html#full-changelog",
    "title": "Viash 0.5.10.1",
    "section": "Full changelog",
    "text": "Full changelog\n\nBUG FIX\n\nNextflowPlatform: Fix passthrough of organization field."
  },
  {
    "objectID": "blog/posts/viash-0.7.0/index.html",
    "href": "blog/posts/viash-0.7.0/index.html",
    "title": "Viash 0.7.0",
    "section": "",
    "text": "Default namespace separator has been changed from _ to /. This means Docker images will be named &lt;Registry&gt;/&lt;Organization&gt;/&lt;Namespace&gt;/&lt;Name&gt; by default. For example, ghcr.io/openpipelines-bio/mapping/cellranger_count instead of ghcr.io/openpipelines-bio/mapping_cellranger_count.\nRemoved deprecated code of unused functionality to simplify code.\n\nShorthand notation for specitying input/output arguments\nShorthand notation for specifying Docker requirements\nLegacy Nextflow platform\n\nImprovements in VDSL3 and the Nextflow Workflow Helper to make behaviour more predictable and fixing some bugs in the meantime. Run the following to get access to the updated helpers:\nWF_DIR=\"src/wf_utils\"\n[[ -d $WF_DIR ]] || mkdir -p $WF_DIR\nviash export resource platforms/nextflow/ProfilesHelper.config &gt; $WF_DIR/ProfilesHelper.config\nviash export resource platforms/nextflow/WorkflowHelper.nf &gt; $WF_DIR/WorkflowHelper.nf\nviash export resource platforms/nextflow/DataflowHelper.nf &gt; $WF_DIR/DataflowHelper.nf\nImprovements to test benches and several bug fixes."
  },
  {
    "objectID": "blog/posts/viash-0.7.0/index.html#whats-new",
    "href": "blog/posts/viash-0.7.0/index.html#whats-new",
    "title": "Viash 0.7.0",
    "section": "",
    "text": "Default namespace separator has been changed from _ to /. This means Docker images will be named &lt;Registry&gt;/&lt;Organization&gt;/&lt;Namespace&gt;/&lt;Name&gt; by default. For example, ghcr.io/openpipelines-bio/mapping/cellranger_count instead of ghcr.io/openpipelines-bio/mapping_cellranger_count.\nRemoved deprecated code of unused functionality to simplify code.\n\nShorthand notation for specitying input/output arguments\nShorthand notation for specifying Docker requirements\nLegacy Nextflow platform\n\nImprovements in VDSL3 and the Nextflow Workflow Helper to make behaviour more predictable and fixing some bugs in the meantime. Run the following to get access to the updated helpers:\nWF_DIR=\"src/wf_utils\"\n[[ -d $WF_DIR ]] || mkdir -p $WF_DIR\nviash export resource platforms/nextflow/ProfilesHelper.config &gt; $WF_DIR/ProfilesHelper.config\nviash export resource platforms/nextflow/WorkflowHelper.nf &gt; $WF_DIR/WorkflowHelper.nf\nviash export resource platforms/nextflow/DataflowHelper.nf &gt; $WF_DIR/DataflowHelper.nf\nImprovements to test benches and several bug fixes."
  },
  {
    "objectID": "blog/posts/viash-0.7.0/index.html#full-changelog",
    "href": "blog/posts/viash-0.7.0/index.html#full-changelog",
    "title": "Viash 0.7.0",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nViash config: Previously deprecated fields are now removed.\n\nfunctionality.inputs: Use arguments or argument_groups instead.\nfunctionality.outputs: Use arguments or argument_groups instead.\nfunctionality.tests: Use test_resources instead. No functional difference.\nfunctionality.enabled: Use status: enabled instead.\nfunctionality.requirements.n_proc: Use cpus instead.\nplatforms.DockerPlatform.privileged: Add a --privileged flag in run_args instead.\nplatforms.DockerPlatform.apk: Use setup: [{ type: apk, packages: ... }] instead.\nplatforms.DockerPlatform.apt: Use setup: [{ type: apt, packages: ... }] instead.\nplatforms.DockerPlatform.yum: Use setup: [{ type: yum, packages: ... }] instead.\nplatforms.DockerPlatform.r: Use setup: [{ type: r, packages: ... }] instead.\nplatforms.DockerPlatform.python: Use setup: [{ type: python, packages: ... }] instead.\nplatforms.DockerPlatform.docker: Use setup: [{ type: docker, run: ... }] instead.\nplatforms.DockerPlatform.docker.setup.resources: Use setup: [{ type: docker, copy: ... }] instead.\nplatforms.NextflowLegacy: Use the Nextflow VDSL3 platform instead.\nfunctionality.ArgumentGroups: No longer supports strings referring to arguments in the arguments: section. Instead directly put the arguments inside the argument groups.\n\nviash_install: The bootstrap script has been reworked in line with the project config introduced in 0.6.4:\n\nThe default location for installing the Viash executable is now ./viash (was: bin/viash).\nThe new viash_install support --output and --tag.\nThe various settings that existed in viash_install (organisation, tag, …) are moved to the project config.\n\nPlease note that this new viash_install bootstrap script can be run from the CLI using:\ncurl -fsSL dl.viash.io | bash\nThe old get.viash.io is still available but points to the version 0.6.7 version of this component and is deprecated.\nWorkflowHelper: paramsToList, paramsToChannel and viashChannel are now deprecated and will be removed in a future release.\nviash (ns) build: Change the default value of the namespace separator in a Docker platform from _ to /. Add \".platforms[.type == 'docker'].namespace_separator := '_'\" to the project config _viash.yaml to revert to the previous behaviour.\n\n\n\nMAJOR CHANGES\n\nVDSL3: now uses the newly implemented channelFromParams and preprocessInputs instead of viashChannel.\n\n\n\nNEW FEATURES\n\nWorkflowHelper: Added preprocessInputs and channelFromParams to replace paramsToList, paramsToChannel and viashChannel. This refactor allows processing parameters that are already in a Channel using preprocessInputs, which is necessary when passing parameters from a workflow to a subworkflow in a Nextflow pipeline.\n\n\n\nMINOR CHANGES\n\nMain: Capture build, setup and push errors and output an exit code.\nFile downloading: Add check to pre-emptively catch file errors (e.g. 404).\nScala: Updated to Scala 2.13 and updated several dependencies.\nMain: Improve match completeness in some edge cases and throw exceptions where needed.\nChangelog: Reformat the changelog to a more structured format. For every release, there is now a date, title, and summary. This both improves the changelog itself but can then also be used to postprocess the CHANGELOG programmatically.\nVDSL3: Add a default value for id when running a VDSL3 module as a standalone pipeline.\nTestBenches:\n\nVerify switching of Viash versions\nPrepare ConfigDeriver by copying base resources to the targetFolder. Use cases so far showed that it’s always required and it simplifies the usage.\nRemove some old & unmaintained IntelliJ Idea editor-fold tags. Given that the testbenches were split up, these were broken but also no longer needed.\nAdd 2 testbenches for computational requirements when running viash run or viash test.\nAdded tests for different values for the --id and --param_list parameters of VDSL3 modules.\n\nviash test: Use test as a random tag during testing, instead of test plus a random string.\n\n\n\nBUG FIXES\n\nWorkflowHelper: fixed where passing a relative path as --param_list would cause incorrect resolving of input files.\nTestbenches: Fix GitTest testbench to correctly increment temporary folder naming and dispose them after the test finishes.\nviash xxx url: Fix passing a url to viash as the config file to process. Add a short testbench to test principle functionality.\nTestbenches: Simplify testr container.\nMain: Improve error reporting to the user in some cases where files or folders can’t be found. Depending on the thrown exception, more or less context was given.\nVDSL3: Create parent directory of output files before starting the script."
  },
  {
    "objectID": "blog/posts/viash-0.5.3/index.html",
    "href": "blog/posts/viash-0.5.3/index.html",
    "title": "Viash 0.5.3",
    "section": "",
    "text": "This release provides more information to scripts with the new meta list. This list contains two values for now:\n\nmeta[\"resources_dir\"]: Path to the directory containing the resources\nmeta[\"functionality_name\"]: Name of the component\n\nA new environment variable is now available for export when working with the Nextflow platform: VIASH_TEMP.\n\n\nAll resources defined in the config file are copied over to a temporary location right before a Viash component is executed. This location is can now be easily accessed in your scripts, allowing you to modify and copy the files as needed.\nHere are some examples in different scripting languages on how to access the meta data, it works similarly to the par list:\nBash:\necho $meta_resources_dir \nPython:\nprint(meta[\"resources_dir\"])\nR:\ncat(meta$resources_dir)\n\n\n\nThe name of the component can now be accessed in the same way as the resources directory. This allows you to print the name of the component out to a console window for example. Here’s how to access this data in different scripting languages:\nBash:\necho $meta_functionality_name\nPython:\nprint(meta[\"functionality_name\"])\nR:\ncat(meta$functionality_name)"
  },
  {
    "objectID": "blog/posts/viash-0.5.3/index.html#whats-new",
    "href": "blog/posts/viash-0.5.3/index.html#whats-new",
    "title": "Viash 0.5.3",
    "section": "",
    "text": "This release provides more information to scripts with the new meta list. This list contains two values for now:\n\nmeta[\"resources_dir\"]: Path to the directory containing the resources\nmeta[\"functionality_name\"]: Name of the component\n\nA new environment variable is now available for export when working with the Nextflow platform: VIASH_TEMP.\n\n\nAll resources defined in the config file are copied over to a temporary location right before a Viash component is executed. This location is can now be easily accessed in your scripts, allowing you to modify and copy the files as needed.\nHere are some examples in different scripting languages on how to access the meta data, it works similarly to the par list:\nBash:\necho $meta_resources_dir \nPython:\nprint(meta[\"resources_dir\"])\nR:\ncat(meta$resources_dir)\n\n\n\nThe name of the component can now be accessed in the same way as the resources directory. This allows you to print the name of the component out to a console window for example. Here’s how to access this data in different scripting languages:\nBash:\necho $meta_functionality_name\nPython:\nprint(meta[\"functionality_name\"])\nR:\ncat(meta$functionality_name)"
  },
  {
    "objectID": "blog/posts/viash-0.5.3/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.3/index.html#full-changelog",
    "title": "Viash 0.5.3",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FEATURES\n\nSimilar to par, each script now also has a meta list. meta contains meta information about the component or the execution thereof. It currently has the following fields:\n\nmeta[\"resources_dir\"]: Path to the directory containing the resources\nmeta[\"functionality_name\"]: Name of the component\n\nNextflowPlatform: Export VIASH_TEMP environment variable.\n\n\n\nBUG FIXES\n\nNextflowPlatform: Fix output formatting when separate_multiple_outputs is false."
  },
  {
    "objectID": "blog/posts/viash-0.2.1/index.html",
    "href": "blog/posts/viash-0.2.1/index.html",
    "title": "Viash 0.2.1",
    "section": "",
    "text": "Running a script using a Docker platform will now chown output files by default, as well as any temporary files. You can turn off this feature by specifying chown: false in the yaml of a Docker platform.\n\n\n\nData references in Map form can now have values being lists. In other words, we can have multiple options which have one or more values.\n\n\n\nviash ns build has been greatly improved! You can automatically build the docker container by adding --setup to the command, as well as make the whole thing run in parallel using the --parallel or -l flag.\nTo build a docker container, you can run either of the following:\nviash run -f path/to/config.yaml -P docker -- ---setup\nviash build -f path/to/functionality.yaml -P docker -o target/docker/path/to --setup\nNote that the first will only build the docker container, whereas the second will build the executable and then build the docker container.\nTo build a lot of them all at once, run:\nviash ns build -P docker --parallel --setup\n\n\n\nYou can now choose the order in which platform requirements are installed!\nBefore:\ntype: docker\nimage: rocker/tidyverse\ntarget_image: \"viash_test/r\"\nr:\n  cran:\n  - optparse\n  github:\n  - dynverse/dynutils@devel\n  bioc:\n  - limma\napt:\n  packages:\n  - libhdf5-serial-dev\ndocker:\n  build_arg:\n  - GITHUB_PAT=\"$GITHUB_PAT\"\n  run:\n  - git clone --depth 1 https://github.com/data-intuitive/viash_docs.git && rm -r viash_docs/.git\n↑ in which order will these three components be run? Who knows!\nNow:\ntype: docker\nimage: rocker/tidyverse\ntarget_image: \"viash_test/r\"\nsetup:\n- type: docker\n  build_arg:\n  - GITHUB_PAT=\"$GITHUB_PAT\"\n- type: apt\n  packages:\n  - libhdf5-serial-dev\n- type: r\n  cran:\n  - optparse\n  - dynutils\n  github:\n  - rcannood/princurve@devel\n  bioc:\n  - limma\n- type: docker\n  run:\n  - git clone --depth 1 https://github.com/data-intuitive/viash_docs.git && rm -r viash_docs/.git\nThis will ensure that the setup instructions are installed in the given order."
  },
  {
    "objectID": "blog/posts/viash-0.2.1/index.html#whats-new",
    "href": "blog/posts/viash-0.2.1/index.html#whats-new",
    "title": "Viash 0.2.1",
    "section": "",
    "text": "Running a script using a Docker platform will now chown output files by default, as well as any temporary files. You can turn off this feature by specifying chown: false in the yaml of a Docker platform.\n\n\n\nData references in Map form can now have values being lists. In other words, we can have multiple options which have one or more values.\n\n\n\nviash ns build has been greatly improved! You can automatically build the docker container by adding --setup to the command, as well as make the whole thing run in parallel using the --parallel or -l flag.\nTo build a docker container, you can run either of the following:\nviash run -f path/to/config.yaml -P docker -- ---setup\nviash build -f path/to/functionality.yaml -P docker -o target/docker/path/to --setup\nNote that the first will only build the docker container, whereas the second will build the executable and then build the docker container.\nTo build a lot of them all at once, run:\nviash ns build -P docker --parallel --setup\n\n\n\nYou can now choose the order in which platform requirements are installed!\nBefore:\ntype: docker\nimage: rocker/tidyverse\ntarget_image: \"viash_test/r\"\nr:\n  cran:\n  - optparse\n  github:\n  - dynverse/dynutils@devel\n  bioc:\n  - limma\napt:\n  packages:\n  - libhdf5-serial-dev\ndocker:\n  build_arg:\n  - GITHUB_PAT=\"$GITHUB_PAT\"\n  run:\n  - git clone --depth 1 https://github.com/data-intuitive/viash_docs.git && rm -r viash_docs/.git\n↑ in which order will these three components be run? Who knows!\nNow:\ntype: docker\nimage: rocker/tidyverse\ntarget_image: \"viash_test/r\"\nsetup:\n- type: docker\n  build_arg:\n  - GITHUB_PAT=\"$GITHUB_PAT\"\n- type: apt\n  packages:\n  - libhdf5-serial-dev\n- type: r\n  cran:\n  - optparse\n  - dynutils\n  github:\n  - rcannood/princurve@devel\n  bioc:\n  - limma\n- type: docker\n  run:\n  - git clone --depth 1 https://github.com/data-intuitive/viash_docs.git && rm -r viash_docs/.git\nThis will ensure that the setup instructions are installed in the given order."
  },
  {
    "objectID": "blog/posts/viash-0.2.1/index.html#full-changelog",
    "href": "blog/posts/viash-0.2.1/index.html#full-changelog",
    "title": "Viash 0.2.1",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FEATURES\n\nNXF: Data references in Map form can now have values being lists. In other words, we can have multiple options which have one or more values.\nviash ns build: Added –parallel and –setup flag.\nviash build: Added –setup flag.\nAllow changing the order of setup commands using the setup: variable.\n(HIDDEN) Do not escape ${VIASH_...} elements in default values and descriptions!\n\n\n\nMINOR CHANGES\n\nRemove ---chown flag, move to platform.docker.chown; is set to true by default.\nPerform chown during both run and test using a Docker platform.\n\n\n\nBUG FIXES\n\nIssue trying to parse positional arguments even when none is provided."
  },
  {
    "objectID": "blog/posts/viash-0.3.1/index.html",
    "href": "blog/posts/viash-0.3.1/index.html",
    "title": "Viash 0.3.1",
    "section": "",
    "text": "Add authors field to config, added registry fields to Docker platform config."
  },
  {
    "objectID": "blog/posts/viash-0.3.1/index.html#whats-new",
    "href": "blog/posts/viash-0.3.1/index.html#whats-new",
    "title": "Viash 0.3.1",
    "section": "",
    "text": "Add authors field to config, added registry fields to Docker platform config."
  },
  {
    "objectID": "blog/posts/viash-0.3.1/index.html#full-changelog",
    "href": "blog/posts/viash-0.3.1/index.html#full-changelog",
    "title": "Viash 0.3.1",
    "section": "Full changelog",
    "text": "Full changelog\n\nNEW FEATURES\n\nFunctionality: Added list of authors field. Example:\nfunctionality:\n  authors:\n    - name: Bob Cando\n      roles: [maintainer, author]\n      email: bob@cando.com\n      props: {github: bobcando, orcid: XXXAAABBB}\nDocker: Allow specifying the registry with target_registry. Example:\n- type: docker\n  image: bash:4.0\n  target_registry: foo.io\n  target_image: bar\n  target_tag: 0.1\nDocker: version is now a synonym for target_tag. If both version and target_tag are not defined, functionality.version will be used instead.\nDocker: Can change the Docker Setup Strategy by specifying\n\nin the yaml: setup_strategy: xxx\non command-line: ---docker_setup_strategy xxx or ---dss xxx\n\nSupported values for the setup strategy are:\n\nalwaysbuild / build: build the image from the dockerfile (DEFAULT)\nalwayscachedbuild / cachedbuild: build the image from the dockerfile, with caching\nalwayspull / pull: pull the image from a registry\nalwayspullelsebuild / pullelsebuild: try to pull the image from a registry, else build it\nalwayspullelsecachedbuild / pullelsecachedbuild: try to pull the image from a registry, else build it with caching\nifneedbebuild: if the image does not exist locally, build the image\nifneedbecachedbuild: if the image does not exist locally, build the image with caching\nifneedbepull: if the image does not exist locally, pull the image\nifneedbepullelsebuild: if the image does not exist locally, pull the image else build it\nifneedbepullelsecachedbuild: if the image does not exist locally, pull the image else build it with caching\ndonothing / meh: do not build or pull anything\n\n\n\n\nMAJOR CHANGES\n\nLicense: viash is now licensed under GPL-3.\n\n\n\nMINOR CHANGES\n\nCLI: Allow parameters before and after specifying a viash config yaml. For example, both following commands now work. Up until now, only the latter would work.\n\nviash run config.vsh.yaml -p docker\nviash run -p docker config.vsh.yaml\n\nFunctionality: Arguments field can now be omitted.\nScripts: Wrapped scripts now contain a minimal header at the top.\n\n\n\nBUG FIXES\n\nNXF viash build: Do not assume each config yaml has at least one test.\nScripts: Fix Docker chown failing when multiple outputs are defined (#21).\nJavaScriptRequirements: Fix type getting set to “python” when unparsing.\nviash run . ---debug: Debug session should now work again\nNative ---setup: Fix missing newlines when running native —setup commands.\nMain: Fix crashing when no arguments are supplied.\nNamespace: Show error message when the config file can’t be parsed.\nExecutable resource: Fix Docker automount handling for Executable resources.\n\n\n\nTESTING\n\nYAML: Test invertibility of parsing/unparsing config objects."
  },
  {
    "objectID": "blog/posts/viash-0.4.0.1/index.html#full-changelog",
    "href": "blog/posts/viash-0.4.0.1/index.html#full-changelog",
    "title": "Viash 0.4.0.1",
    "section": "Full changelog",
    "text": "Full changelog\n\nBUG FIX\n\nNXF: Return original_params instead of updated params for now.\nNXF: Reinstate function_type: asis in line with the refactored module generation code\nviash ns test: print header when --tsv foo.tsv --append true but foo.tsv doesn’t exist yet. Fixes #45."
  },
  {
    "objectID": "blog/posts/viash-0.6.0/index.html",
    "href": "blog/posts/viash-0.6.0/index.html",
    "title": "Viash 0.6.0",
    "section": "",
    "text": "The first (major) release this year! The biggest changes are:\n\nNextflow VDSL3 is now the default Nextflow platform, whereas the legacy Nextflow platform has been deprecated.\nSupport for tracking memory and cpu requirements more elegantly.\nGrouping arguments in groups more concisely.\nThe addition of a viash ns exec command, to be able to execute commands on Viash components more easily."
  },
  {
    "objectID": "blog/posts/viash-0.6.0/index.html#whats-new",
    "href": "blog/posts/viash-0.6.0/index.html#whats-new",
    "title": "Viash 0.6.0",
    "section": "",
    "text": "The first (major) release this year! The biggest changes are:\n\nNextflow VDSL3 is now the default Nextflow platform, whereas the legacy Nextflow platform has been deprecated.\nSupport for tracking memory and cpu requirements more elegantly.\nGrouping arguments in groups more concisely.\nThe addition of a viash ns exec command, to be able to execute commands on Viash components more easily."
  },
  {
    "objectID": "blog/posts/viash-0.6.0/index.html#full-changelog",
    "href": "blog/posts/viash-0.6.0/index.html#full-changelog",
    "title": "Viash 0.6.0",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nNextflowPlatform: variant: vdsl3 is now the default NextflowPlatform. variant: legacy has been deprecated.\nFunctionality: Fields .inputs and .outputs has been deprecated. Please use .argument_groups instead (#186). Before:\nfunctionality:\n  inputs:\n    - name: \"--foo\"\n  outputs:\n    - name: \"--bar\"\nNow:\nfunctionality:\n  argument_groups:\n    - name: Inputs\n      arguments:\n        - name: \"--foo\"\n          type: file\n    - name: Outputs\n      arguments:\n        - name: \"--bar\"\n          type: file\n          direction: output\nPassing strings to an argument group’s arguments has been deprecated. Please simply copy the argument itself into the argument group (#186). Before:\nfunctionality:\n  arguments:\n    - name: \"--foo\"\n      type: file\n    - name: \"--bar\"\n      type: file\n      direction: output\n  argument_groups:\n    - name: Inputs\n      arguments: [ foo ]\n    - name: Outputs\n      arguments: [ bar ]\nNow:\nfunctionality:\n  argument_groups:\n    - name: Inputs\n      arguments:\n        - name: \"--foo\"\n          type: file\n    - name: Outputs\n      arguments:\n        - name: \"--bar\"\n          type: file\n          direction: output\n\n\n\nNEW FUNCTIONALITY\n\nAllow setting the number of processes and memory limit from within the Viash config, as well as a list of required commands. Example:\nfunctionality:\nname: foo\nrequirements:\n  cpus: 10\n  memory: 10GB\n  commands: [ bash, r, perl ]\nYou can override the default requirements at runtime:\n\n./foo ---cpus 4 ---memory 100PB (for NativePlatform or DockerPlatform)\nBy adding process.cpus = 4 and process.memory \"100 PB\" to a nextflow.config (for NextflowPlatform)\n\nThis results the following meta variables to be injected into a script:\n\nmeta_cpus (in Bash) or meta[\"cpus\"] (in any other language): Number of processes the script is allowed to spawn.\nmeta_memory_b (in Bash) or meta[\"memory_b\"] (in any other language): Amount of memory the script is allowed to allocate, in bytes.\nmeta_memory_kb (in Bash) or meta[\"memory_kb\"] (in any other language): Same but in kilobytes, rounded up.\nmeta_memory_mb (in Bash) or meta[\"memory_mb\"] (in any other language): Same but in megabytes, rounded up.\nmeta_memory_gb (in Bash) or meta[\"memory_gb\"] (in any other language): Same but in gigabytes, rounded up.\nmeta_memory_tb (in Bash) or meta[\"memory_tb\"] (in any other language): Same but in terabytes, rounded up.\nmeta_memory_pb (in Bash) or meta[\"memory_pb\"] (in any other language): Same but in petabytes, rounded up.\n\nviash ns exec: Added a command for executing arbitrary commands for all found Viash components. The syntax of this command is inspired by find . -exec echo {} \\;.\nThe following fields are automatically replaced:\n\n{} | {path}: path to the config file\n{abs-path}: absolute path to the config file\n{dir}: path to the parent directory of the config file\n{abs-dir}: absolute path to the directory of the config file\n{main-script}: path to the main script (if any)\n{abs-main-script}: absolute path to the main script (if any)\n{functionality-name}: name of the component\n\nA command suffixed by \\; (or nothing) will execute one command for each of the Viash components, whereas a command suffixed by + will execute one command for all Viash components.\nConfigMod: Added a del(...) config mod to be able to delete a value from the yaml. Example: del(.functionality.version).\n\n\n\nMAJOR CHANGES\n\nFolder structure: Adjusted the folder structure to correctly reflect the the namespace change of viash from com.dataintuitive.viash to io.viash.\nFunctionality: Reworked the enabled field from boolean to a status field which can have the following statusses: enabled, disabled and deprecated. When parsing a config file which has the status field set to deprecated a warning message is displayed on stderr. Backwards for enabled is provided where enabled: true =&gt; status: enabled and enabled: false =&gt; status: false. The enabled field is marked deprecated.\n\n\n\nMINOR CHANGES\n\nResources: Handle edge case when no resources are specified in the vsh.yaml config file and display a warning message.\nBashWrapper: Add a warning when an argument containing flags (e.g. --foo) is not recognized and will be handled as a positional argument as this is likely a mistake.\nFunctionality: Add check to verify there are no double argument names or short names in the config vsh.yaml declarations.\nBashWrapper: Add check to verify a parameter isn’t declared twice on the CLI, except in the case multiple: true is declared as then it’s a valid use case.\nBashWrapper: For int min/max checking: use native bash functionality so there is no dependency to bc. For double min/max checking: add fallback code to use awk in case bc is not present on the system (most likely to happen when running tests in a docker container).\nviash ns list/viash config view: Allow viewing the post-processed argument groups by passing the --parse_argument_groups parameter.\n\n\n\nTESTING\n\nConfigMod: Added unit tests for condition config mods.\nMainTestDockerSuite: Derive config alternatives from the base vsh.yaml instead of adding the changes in separate files. This both reduces file clutter and prevents having to change several files when there are updates in the config format.\nGitTest: Added unit tests for Git helper (#216).\n\n\n\nBUG FIXES\n\ncsharp_script, javascript_script, python_script, r_script, scala_script: Make meta fields for memory and cpus optional.\nNextflowVdsl3Platform: Don’t generate an error when --publish_dir is not defined and -profile no_publish is used.\nViash run: Viash now properly returns the exit code from the executed script.\nGit: Fix incorrect metadata when git repository is empty (#216)."
  },
  {
    "objectID": "blog/posts/viash-0.5.11/index.html",
    "href": "blog/posts/viash-0.5.11/index.html",
    "title": "Viash 0.5.11",
    "section": "",
    "text": "This release contains additional sugar syntax for specifying inputs and outputs in a Viash config, a beta implementation for the next-generation Viash platform, and several other minor improvements."
  },
  {
    "objectID": "blog/posts/viash-0.5.11/index.html#whats-new",
    "href": "blog/posts/viash-0.5.11/index.html#whats-new",
    "title": "Viash 0.5.11",
    "section": "",
    "text": "This release contains additional sugar syntax for specifying inputs and outputs in a Viash config, a beta implementation for the next-generation Viash platform, and several other minor improvements."
  },
  {
    "objectID": "blog/posts/viash-0.5.11/index.html#full-changelog",
    "href": "blog/posts/viash-0.5.11/index.html#full-changelog",
    "title": "Viash 0.5.11",
    "section": "Full changelog",
    "text": "Full changelog\n\nMAJOR CHANGES\n\nFunctionality: Now also accepts ‘inputs’ and ‘outputs’ in addition to ‘arguments’. For inputs and outputs, any specified arguments will have default type: file and direction: input or direction: output respectively.\n\n\n\nMINOR CHANGES\n\nDockerPlatform: Move description labels to the end of the Dockerfile to improve cross-component caching.\nFunctionality: Arguments where .multiple is true can now have lists as default and example.\nviash_build: Added unit test for this component.\nviash_test: Added unit test for this component.\nPythonRequirements: Allow upgrading dependencies. Example: [ type: python. pypi: anndata, upgrade: true ].\nNextflowLegacyPlatform: Remove annoying messages when building Nxf modules.\nConfigMods: Expanded the DSL to allow specifying at which point to apply a config mod. This functionality was necessary to allow for setting fields which alter the way configs are parsed. Example of when this is useful: &lt;preparse&gt; .platforms[.type == \"nextflow\"].variant := \"vdsl3\". Updating workflow of parsing a config file is:\n\nread Yaml from file\napply preparse config mods\nparse resulting Json as Config, thereby instantiating default values etc.\nconvert Config back to Json\napply postparse config mods (original config mods)\nconvert final Json back to Config\n\n\n\n\nBETA FUNCTIONALITY\n\nNextflowVdsl3Platform: A beta implementation of the next-generation Viash+Nextflow platform. See https://github.com/viash-io/viash/issues/82 for more information. You can access the previous Nextflow platform by using the variant parameter:\n- type: nextflow\n  variant: legacy\n  separate_multiple_outputs: false\n\n\n\nBUG FIXES\n\nviash_build and viash_test: The query_name and query_namespace arguments were switched around. These arguments are now passed correctly.\nBashScript, JavaScriptScript, PythonScript, RScript: Correctly escape ' (#113). Update unit tests accordingly.\nCSharpScript, ScalaScript: Correctly escape \" (#113). Update unit tests accordingly.\nviash_build, viash_test, viash_push: Don’t try to remove log files if they don’t exist.\n\n\n\nINTERNAL CHANGES\n\nDataObject:\n\nRenamed otype to flags.\nRenamed oType to type\nDeprecated tag (unused feature).\n\nAll abstract / inherited classes: Renamed oType to type.\n\n\n\nDEPRECATION\n\nFunctionality: Deprecated function_type and add_resources_to_path. These should be unused features, by now."
  },
  {
    "objectID": "blog/posts/viash-0.6.4/index.html",
    "href": "blog/posts/viash-0.6.4/index.html",
    "title": "Viash 0.6.4",
    "section": "",
    "text": "This release adds features related to managing Viash projects and allows for better runtime introspection of Nextflow VDSL3 modules.\nThe most notable changes are:\n\nYou can switch versions of Viash using the VIASH_VERSION environment variable! Example:\nVIASH_VERSION=0.6.0 viash --version\nMore importantly, you can specify the version of Viash you want in a project config. See below for more info.\nIntroducing Viash project config files as an experimental feature. It allows storing project-related settings in a _viash.yaml config file which you should store at the root of your repository. Example:\nviash_version: 0.6.4\nsource: src\ntarget: target\nconfig_mods: |\n  .platforms[.type == 'docker'].target_registry := 'ghcr.io'\n  .platforms[.type == 'docker'].target_organization := 'viash-io'\n  .platforms[.type == 'docker'].namespace_separator := '/'\n  .platforms[.type == 'docker'].target_image_source := 'https://github.com/viash-io/viash'\nIt’s now possible to specify in which order Viash will merge Viash configs. Example:\nfunctionality:\n  name: foo\n  arguments:\n    - __merge__: obj_input.yaml\n      name: \"--one\"\n    - __merge__: [., obj_input.yaml]\n      name: \"--two\"\n    - __merge__: [obj_input.yaml, .]\n     name: \"--three\"\n\nPlease take note of the following breaking changes:\n\nPassing non-existent paths to a Viash component will cause the component to generate an error when no file or folder is found. Set must_exist to false to revert to the previous behaviour.\nThe arguments --write_meta/-w and --meta/-m no longer exist, because every viash build/run/test run will generate a .config.vsh.yaml meta file."
  },
  {
    "objectID": "blog/posts/viash-0.6.4/index.html#whats-new",
    "href": "blog/posts/viash-0.6.4/index.html#whats-new",
    "title": "Viash 0.6.4",
    "section": "",
    "text": "This release adds features related to managing Viash projects and allows for better runtime introspection of Nextflow VDSL3 modules.\nThe most notable changes are:\n\nYou can switch versions of Viash using the VIASH_VERSION environment variable! Example:\nVIASH_VERSION=0.6.0 viash --version\nMore importantly, you can specify the version of Viash you want in a project config. See below for more info.\nIntroducing Viash project config files as an experimental feature. It allows storing project-related settings in a _viash.yaml config file which you should store at the root of your repository. Example:\nviash_version: 0.6.4\nsource: src\ntarget: target\nconfig_mods: |\n  .platforms[.type == 'docker'].target_registry := 'ghcr.io'\n  .platforms[.type == 'docker'].target_organization := 'viash-io'\n  .platforms[.type == 'docker'].namespace_separator := '/'\n  .platforms[.type == 'docker'].target_image_source := 'https://github.com/viash-io/viash'\nIt’s now possible to specify in which order Viash will merge Viash configs. Example:\nfunctionality:\n  name: foo\n  arguments:\n    - __merge__: obj_input.yaml\n      name: \"--one\"\n    - __merge__: [., obj_input.yaml]\n      name: \"--two\"\n    - __merge__: [obj_input.yaml, .]\n     name: \"--three\"\n\nPlease take note of the following breaking changes:\n\nPassing non-existent paths to a Viash component will cause the component to generate an error when no file or folder is found. Set must_exist to false to revert to the previous behaviour.\nThe arguments --write_meta/-w and --meta/-m no longer exist, because every viash build/run/test run will generate a .config.vsh.yaml meta file."
  },
  {
    "objectID": "blog/posts/viash-0.6.4/index.html#full-changelog",
    "href": "blog/posts/viash-0.6.4/index.html#full-changelog",
    "title": "Viash 0.6.4",
    "section": "Full changelog",
    "text": "Full changelog\n\nBREAKING CHANGES\n\nConfig: Viash configs whose filenames start with a . are ignored (#291).\nviash build: --write_meta/-m and --meta/-m arguments have been removed. Instead, the .config.vsh.yaml file is always created when building Viash components (#293).\nFileArgument: Default setting of must_exist was changed from false to true. As such, the component will throw an error by default if an input file or output file is missing (#295).\nConfig merging: __inherits__ has been renamed to __merge__.\n\n\n\nNEW FUNCTIONALITY\n\nYou can switch versions of Viash using the VIASH_VERSION environment variable (#304)! Example:\nVIASH_VERSION=0.6.0 viash --version\nTraceability: Running viash build and viash test creates a .config.vsh.yaml file by default, which contains the processed config of the component. As a side effect, this allows for reading in the .config.vsh.yaml from within the component to learn more about the component being tested (#291 and #293).\nFileArgument: Added create_parent option, which will check if the directory of an output file exists and create it if necessary (#295).\n\n\n\nMINOR CHANGES\n\nviash run, viash test: When running or testing a component, Viash will add an extension to the temporary file that is created. Before: /tmp/viash-run-wdckjnce, now: /tmp/viash-run-wdckjnce.py (#302).\nNextflowPlatform: Add DataflowHelper.nf as a retrievable resource in Viash (#301).\nNextflowPlatform: During a stubrun, argument requirements are turned off and the publishDir, cpus, memory, and label directives are also removed from the process (#301).\nNextflowPlatform: Added a filter processing argument to filter the incoming channel after the map, mapData, mapId and mapPassthrough have been applied (#296).\nNextflowPlatform: Added the Viash config to the Nextflow module for later introspection (#296). For example:\ninclude { foo } from \"$targetDir/path/foo/main.nf\"\n\nfoo.run(filter: { tup -&gt;\n  def preferredNormalization = foo.config.functionality.info.preferred_normalization\n  tup.normalization_id == preferredNormalization\n})\nBUG FIXES\nBashWrapper: Don’t overwrite meta values when trailing arguments are provided (#295).\n\n\n\nEXPERIMENTAL FEATURES\n\nViash Project: Viash will automatically search for a _viash.yaml file in the directory of a component and its parent directories (#294).\nContents of _viash.yaml:\nsource: src\ntarget: target\nconfig_mods: |\n  .platforms[.type == 'docker'].target_registry := 'ghcr.io'\n  .platforms[.type == 'docker'].target_organization := 'viash-io'\n  .platforms[.type == 'docker'].namespace_separator := '/'\n  .platforms[.type == 'docker'].target_image_source := 'https://github.com/viash-io/viash'\nConfig merging: Allow specifying the order in which Viash will merge configs (#289). If . is not in the list of inherited objects, it will be added at the end.\nContents of config.vsh.yaml:\nfunctionality:\n  name: foo\n  arguments:\n    - __merge__: obj_input.yaml\n      name: \"--one\"\n    - __merge__: [., obj_input.yaml]\n      name: \"--two\"\n    - __merge__: [obj_input.yaml, .]\n      name: \"--three\"\nContents of obj_input.yaml:\ntype: file\nname: --input\ndescription: A h5ad file\nOutput of viash config view config.vsh.yaml (stripped irrelevant bits):\nfunctionality:\n  arguments:\n  - type: \"file\"\n    name: \"--one\"\n    description: \"A h5ad file\"\n  - type: \"file\"\n    name: \"--input\"\n    description: \"A h5ad file\"\n  - type: \"file\"\n    name: \"--three\"\n    description: \"A h5ad file\""
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Reference",
    "section": "",
    "text": "Viash CLI Commands\n\n\nViash Build\nViash Config View\nViash Config Inject\nViash Ns Build\nViash Ns Test\nViash Ns List\nViash Ns Exec\nViash Run\nViash Test\n\n\n\n\n\n\nViash Config\n\n\nViash Config Overview\nFunctionality\nViash Project Config\n\n\n\n\n\n\nPlatforms\n\n\nNative Platform\nDocker Platform\nNextflow Legacy Platform\nNextflow VDSL3 Platform\n\n\n\n\n\n\nArgument Types\n\n\nBoolean_False\nBoolean_True\nBoolean\nDouble\nFile\nInteger\nLong\nString\n\n\n\n\n\n\nResource Types\n\n\nBash Script\nC# Script\nExecutable\nJavaScript Script\nNextflow Script\nPlain File\nPython Script\nR Script\nScala Script\n\n\n\n\n\n\nDocker Setup Requirements\n\n\nApk\nApt\nDocker\nJavaScript\nPython\nR\nRuby\nYum\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "reference/project/index.html",
    "href": "reference/project/index.html",
    "title": "Project",
    "section": "",
    "text": "A Viash project configuration file. It’s name should be _viash.yaml.\nExample:"
  },
  {
    "objectID": "reference/project/index.html#config_mods",
    "href": "reference/project/index.html#config_mods",
    "title": "Project",
    "section": "config_mods",
    "text": "config_mods\nType: String / List of String\nWhich config mods to apply.\nExample:\nconfig_mods: \".functionality.name := 'foo'\""
  },
  {
    "objectID": "reference/project/index.html#source",
    "href": "reference/project/index.html#source",
    "title": "Project",
    "section": "source",
    "text": "source\nType: String\nWhich source directory to use for the viash ns commands.\nExample:\nsource: src"
  },
  {
    "objectID": "reference/project/index.html#target",
    "href": "reference/project/index.html#target",
    "title": "Project",
    "section": "target",
    "text": "target\nType: String\nWhich target directory to use for viash ns build.\nExample:\ntarget: target"
  },
  {
    "objectID": "reference/project/index.html#viash_version",
    "href": "reference/project/index.html#viash_version",
    "title": "Project",
    "section": "viash_version",
    "text": "viash_version\nType: String\nWhich version of Viash to use.\nExample:\nviash_versions: 0.6.4"
  },
  {
    "objectID": "reference/config/index.html",
    "href": "reference/config/index.html",
    "title": "Config",
    "section": "",
    "text": "A Viash configuration is a YAML file which contains metadata to describe the behaviour and build target(s) of a component.\nWe commonly name this file config.vsh.yaml in our examples, but you can name it however you choose.\nExample:"
  },
  {
    "objectID": "reference/config/index.html#merge__",
    "href": "reference/config/index.html#merge__",
    "title": "Config",
    "section": "__merge__",
    "text": "__merge__\nType: File\nConfig inheritance by including YAML partials. This is useful for defining common APIs in separate files. __merge__ can be used in any level of the YAML. For example, not just in the config but also in the functionality or any of the platforms.\nExample:\n__merge__: ../api/common_interface.yaml"
  },
  {
    "objectID": "reference/config/index.html#functionality",
    "href": "reference/config/index.html#functionality",
    "title": "Config",
    "section": "functionality",
    "text": "functionality\nType: Functionality\nThe functionality describes the behaviour of the script in terms of arguments and resources. By specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you."
  },
  {
    "objectID": "reference/config/index.html#platforms",
    "href": "reference/config/index.html#platforms",
    "title": "Config",
    "section": "platforms",
    "text": "platforms\nType: List of Platform\nA list of platforms to generate target artifacts for.\n\nNative\nDocker\nNextflow VDSL3"
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html",
    "href": "reference/config/platforms/nextflow/index.html",
    "title": "Nextflow Vdsl3 Platform",
    "section": "",
    "text": "Next-gen platform for generating NextFlow VDSL3 modules."
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#auto",
    "href": "reference/config/platforms/nextflow/index.html#auto",
    "title": "Nextflow Vdsl3 Platform",
    "section": "auto",
    "text": "auto\nType: NextflowAuto\nAutomated processing flags which can be toggled on or off:\n\n\n\n\n\n\n\n\nFlag\nDescription\nDefault\n\n\n\n\nsimplifyInput\nIf true, an input tuple only containing only a single File (e.g. [\"foo\", file(\"in.h5ad\")]) is automatically transformed to a map (i.e. [\"foo\", [ input: file(\"in.h5ad\") ] ]).\ntrue\n\n\nsimplifyOutput\nIf true, an output tuple containing a map with a File (e.g. [\"foo\", [ output: file(\"out.h5ad\") ] ]) is automatically transformed to a map (i.e. [\"foo\", file(\"out.h5ad\")]).\ntrue\n\n\ntranscript\nIf true, the module’s transcripts from work/ are automatically published to params.transcriptDir. If not defined, params.publishDir + \"/_transcripts\" will be used. Will throw an error if neither are defined.\nfalse\n\n\npublish\nIf true, the module’s outputs are automatically published to params.publishDir. Will throw an error if params.publishDir is not defined.\nfalse\n\n\n\nExample:\nauto:\n    publish: true"
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#container",
    "href": "reference/config/platforms/nextflow/index.html#container",
    "title": "Nextflow Vdsl3 Platform",
    "section": "container",
    "text": "container\nType: String\nSpecifies the Docker platform id to be used to run Nextflow."
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#debug",
    "href": "reference/config/platforms/nextflow/index.html#debug",
    "title": "Nextflow Vdsl3 Platform",
    "section": "debug",
    "text": "debug\nType: Boolean\nWhether or not to print debug messages."
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#directives",
    "href": "reference/config/platforms/nextflow/index.html#directives",
    "title": "Nextflow Vdsl3 Platform",
    "section": "directives",
    "text": "directives\nType: NextflowDirectives\nDirectives are optional settings that affect the execution of the process. These mostly match up with the Nextflow counterparts.\nExample:\ndirectives:\n    container: rocker/r-ver:4.1\n    label: highcpu\n    cpus: 4\n    memory: 16 GB"
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#id",
    "href": "reference/config/platforms/nextflow/index.html#id",
    "title": "Nextflow Vdsl3 Platform",
    "section": "id",
    "text": "id\nType: String\nEvery platform can be given a specific id that can later be referred to explicitly when running or building the Viash component.\nExample:\nid: foo"
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#type",
    "href": "reference/config/platforms/nextflow/index.html#type",
    "title": "Nextflow Vdsl3 Platform",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the platform."
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html",
    "href": "reference/config/platforms/nextflow/directives.html",
    "title": "Nextflow Directives",
    "section": "",
    "text": "Directives are optional settings that affect the execution of the process.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#accelerator",
    "href": "reference/config/platforms/nextflow/directives.html#accelerator",
    "title": "Nextflow Directives",
    "section": "accelerator",
    "text": "accelerator\nType: Map of String,String\nThe accelerator directive allows you to specify the hardware accelerator requirement for the task execution e.g. GPU processor.\nViash implements this directive as a map with accepted keywords: type, limit, request, and runtime.\nSee accelerator.\nExample:\n[ limit: 4, type: \"nvidia-tesla-k80\" ]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#afterscript",
    "href": "reference/config/platforms/nextflow/directives.html#afterscript",
    "title": "Nextflow Directives",
    "section": "afterScript",
    "text": "afterScript\nType: String\nThe afterScript directive allows you to execute a custom (Bash) snippet immediately after the main process has run. This may be useful to clean up your staging area.\nSee afterScript.\nExample:\nsource /cluster/bin/cleanup"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#beforescript",
    "href": "reference/config/platforms/nextflow/directives.html#beforescript",
    "title": "Nextflow Directives",
    "section": "beforeScript",
    "text": "beforeScript\nType: String\nThe beforeScript directive allows you to execute a custom (Bash) snippet before the main process script is run. This may be useful to initialise the underlying cluster environment or for other custom initialisation.\nSee beforeScript.\nExample:\nsource /cluster/bin/setup"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#cache",
    "href": "reference/config/platforms/nextflow/directives.html#cache",
    "title": "Nextflow Directives",
    "section": "cache",
    "text": "cache\nType: Option[Either of Boolean,String]\nThe cache directive allows you to store the process results to a local cache. When the cache is enabled and the pipeline is launched with the resume option, any following attempt to execute the process, along with the same inputs, will cause the process execution to be skipped, producing the stored data as the actual results.\nThe caching feature generates a unique key by indexing the process script and inputs. This key is used to identify univocally the outputs produced by the process execution.\nThe cache is enabled by default, you can disable it for a specific process by setting the cache directive to false.\nAccepted values are: true, false, \"deep\", and \"lenient\".\nSee cache.\nExamples:\ntrue\nfalse\n\"deep\"\n\"lenient\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#conda",
    "href": "reference/config/platforms/nextflow/directives.html#conda",
    "title": "Nextflow Directives",
    "section": "conda",
    "text": "conda\nType: String / List of String\nThe conda directive allows for the definition of the process dependencies using the Conda package manager.\nNextflow automatically sets up an environment for the given package names listed by in the conda directive.\nSee conda.\nExamples:\n\"bwa=0.7.15\"\n\"bwa=0.7.15 fastqc=0.11.5\"\n[\"bwa=0.7.15\", \"fastqc=0.11.5\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#container",
    "href": "reference/config/platforms/nextflow/directives.html#container",
    "title": "Nextflow Directives",
    "section": "container",
    "text": "container\nType: Option[Either[Map of String,String,String]]\nThe container directive allows you to execute the process script in a Docker container.\nIt requires the Docker daemon to be running in machine where the pipeline is executed, i.e. the local machine when using the local executor or the cluster nodes when the pipeline is deployed through a grid executor.\nViash implements allows either a string value or a map. In case a map is used, the allowed keys are: registry, image, and tag. The image value must be specified.\nSee container.\nExamples:\n\"foo/bar:tag\"\nThis is transformed to \"reg/im:ta\":\n[ registry: \"reg\", image: \"im\", tag: \"ta\" ]\nThis is transformed to \"im:latest\":\n[ image: \"im\" ]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#containeroptions",
    "href": "reference/config/platforms/nextflow/directives.html#containeroptions",
    "title": "Nextflow Directives",
    "section": "containerOptions",
    "text": "containerOptions\nType: String / List of String\nThe containerOptions directive allows you to specify any container execution option supported by the underlying container engine (ie. Docker, Singularity, etc). This can be useful to provide container settings only for a specific process e.g. mount a custom path.\nSee containerOptions.\nExamples:\n\"--foo bar\"\n[\"--foo bar\", \"-f b\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#cpus",
    "href": "reference/config/platforms/nextflow/directives.html#cpus",
    "title": "Nextflow Directives",
    "section": "cpus",
    "text": "cpus\nType: Option[Either of Int,String]\nThe cpus directive allows you to define the number of (logical) CPU required by the process’ task.\nSee cpus.\nExamples:\n1\n10"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#disk",
    "href": "reference/config/platforms/nextflow/directives.html#disk",
    "title": "Nextflow Directives",
    "section": "disk",
    "text": "disk\nType: String\nThe disk directive allows you to define how much local disk storage the process is allowed to use.\nSee disk.\nExamples:\n\"1 GB\"\n\"2TB\"\n\"3.2KB\"\n\"10.B\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#echo",
    "href": "reference/config/platforms/nextflow/directives.html#echo",
    "title": "Nextflow Directives",
    "section": "echo",
    "text": "echo\nType: Option[Either of Boolean,String]\nBy default the stdout produced by the commands executed in all processes is ignored. By setting the echo directive to true, you can forward the process stdout to the current top running process stdout file, showing it in the shell terminal.\nSee echo.\nExamples:\ntrue\nfalse"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#errorstrategy",
    "href": "reference/config/platforms/nextflow/directives.html#errorstrategy",
    "title": "Nextflow Directives",
    "section": "errorStrategy",
    "text": "errorStrategy\nType: String\nThe errorStrategy directive allows you to define how an error condition is managed by the process. By default when an error status is returned by the executed script, the process stops immediately. This in turn forces the entire pipeline to terminate.\nTable of available error strategies: | Name | Executor | |——|———-| | terminate | Terminates the execution as soon as an error condition is reported. Pending jobs are killed (default) | | finish | Initiates an orderly pipeline shutdown when an error condition is raised, waiting the completion of any submitted job. | | ignore | Ignores processes execution errors. | | retry | Re-submit for execution a process returning an error condition. |\nSee errorStrategy.\nExamples:\n\"terminate\"\n\"finish\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#executor",
    "href": "reference/config/platforms/nextflow/directives.html#executor",
    "title": "Nextflow Directives",
    "section": "executor",
    "text": "executor\nType: String\nThe executor defines the underlying system where processes are executed. By default a process uses the executor defined globally in the nextflow.config file.\nThe executor directive allows you to configure what executor has to be used by the process, overriding the default configuration. The following values can be used:\n\n\n\n\n\n\n\nName\nExecutor\n\n\n\n\nawsbatch\nThe process is executed using the AWS Batch service.\n\n\nazurebatch\nThe process is executed using the Azure Batch service.\n\n\ncondor\nThe process is executed using the HTCondor job scheduler.\n\n\ngoogle-lifesciences\nThe process is executed using the Google Genomics Pipelines service.\n\n\nignite\nThe process is executed using the Apache Ignite cluster.\n\n\nk8s\nThe process is executed using the Kubernetes cluster.\n\n\nlocal\nThe process is executed in the computer where Nextflow is launched.\n\n\nlsf\nThe process is executed using the Platform LSF job scheduler.\n\n\nmoab\nThe process is executed using the Moab job scheduler.\n\n\nnqsii\nThe process is executed using the NQSII job scheduler.\n\n\noge\nAlias for the sge executor.\n\n\npbs\nThe process is executed using the PBS/Torque job scheduler.\n\n\npbspro\nThe process is executed using the PBS Pro job scheduler.\n\n\nsge\nThe process is executed using the Sun Grid Engine / Open Grid Engine.\n\n\nslurm\nThe process is executed using the SLURM job scheduler.\n\n\ntes\nThe process is executed using the GA4GH TES service.\n\n\nuge\nAlias for the sge executor.\n\n\n\nSee executor.\nExamples:\n\"local\"\n\"sge\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#label",
    "href": "reference/config/platforms/nextflow/directives.html#label",
    "title": "Nextflow Directives",
    "section": "label",
    "text": "label\nType: String / List of String\nThe label directive allows the annotation of processes with mnemonic identifier of your choice.\nSee label.\nExamples:\n\"big_mem\"\n\"big_cpu\"\n[\"big_mem\", \"big_cpu\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#machinetype",
    "href": "reference/config/platforms/nextflow/directives.html#machinetype",
    "title": "Nextflow Directives",
    "section": "machineType",
    "text": "machineType\nType: String\nThe machineType can be used to specify a predefined Google Compute Platform machine type when running using the Google Life Sciences executor.\nSee machineType.\nExample:\n\"n1-highmem-8\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#maxerrors",
    "href": "reference/config/platforms/nextflow/directives.html#maxerrors",
    "title": "Nextflow Directives",
    "section": "maxErrors",
    "text": "maxErrors\nType: Option[Either of String,Int]\nThe maxErrors directive allows you to specify the maximum number of times a process can fail when using the retry error strategy. By default this directive is disabled.\nSee maxErrors.\nExamples:\n1\n3"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#maxforks",
    "href": "reference/config/platforms/nextflow/directives.html#maxforks",
    "title": "Nextflow Directives",
    "section": "maxForks",
    "text": "maxForks\nType: Option[Either of String,Int]\nThe maxForks directive allows you to define the maximum number of process instances that can be executed in parallel. By default this value is equals to the number of CPU cores available minus 1.\nIf you want to execute a process in a sequential manner, set this directive to one.\nSee maxForks.\nExamples:\n1\n3"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#maxretries",
    "href": "reference/config/platforms/nextflow/directives.html#maxretries",
    "title": "Nextflow Directives",
    "section": "maxRetries",
    "text": "maxRetries\nType: Option[Either of String,Int]\nThe maxRetries directive allows you to define the maximum number of times a process instance can be re-submitted in case of failure. This value is applied only when using the retry error strategy. By default only one retry is allowed.\nSee maxRetries.\nExamples:\n1\n3"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#memory",
    "href": "reference/config/platforms/nextflow/directives.html#memory",
    "title": "Nextflow Directives",
    "section": "memory",
    "text": "memory\nType: String\nThe memory directive allows you to define how much memory the process is allowed to use.\nSee memory.\nExamples:\n\"1 GB\"\n\"2TB\"\n\"3.2KB\"\n\"10.B\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#module",
    "href": "reference/config/platforms/nextflow/directives.html#module",
    "title": "Nextflow Directives",
    "section": "module",
    "text": "module\nType: String / List of String\nEnvironment Modules is a package manager that allows you to dynamically configure your execution environment and easily switch between multiple versions of the same software tool.\nIf it is available in your system you can use it with Nextflow in order to configure the processes execution environment in your pipeline.\nIn a process definition you can use the module directive to load a specific module version to be used in the process execution environment.\nSee module.\nExamples:\n\"ncbi-blast/2.2.27\"\n\"ncbi-blast/2.2.27:t_coffee/10.0\"\n[\"ncbi-blast/2.2.27\", \"t_coffee/10.0\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#penv",
    "href": "reference/config/platforms/nextflow/directives.html#penv",
    "title": "Nextflow Directives",
    "section": "penv",
    "text": "penv\nType: String\nThe penv directive allows you to define the parallel environment to be used when submitting a parallel task to the SGE resource manager.\nSee penv.\nExample:\n\"smp\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#pod",
    "href": "reference/config/platforms/nextflow/directives.html#pod",
    "title": "Nextflow Directives",
    "section": "pod",
    "text": "pod\nType: OneOrMore[Map of String,String]\nThe pod directive allows the definition of pods specific settings, such as environment variables, secrets and config maps when using the Kubernetes executor.\nSee pod.\nExamples:\n[ label: \"key\", value: \"val\" ]\n[ annotation: \"key\", value: \"val\" ]\n[ env: \"key\", value: \"val\" ]\n[ [label: \"l\", value: \"v\"], [env: \"e\", value: \"v\"]]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#publishdir",
    "href": "reference/config/platforms/nextflow/directives.html#publishdir",
    "title": "Nextflow Directives",
    "section": "publishDir",
    "text": "publishDir\nType: OneOrMore[Either[String,Map of String,String]]\nThe publishDir directive allows you to publish the process output files to a specified folder.\nViash implements this directive as a plain string or a map. The allowed keywords for the map are: path, mode, overwrite, pattern, saveAs, enabled. The path key and value are required. The allowed values for mode are: symlink, rellink, link, copy, copyNoFollow, move.\nSee publishDir.\nExamples:\n[]\n[ [ path: \"foo\", enabled: true ], [ path: \"bar\", enabled: false ] ]\nThis is transformed to [[ path: \"/path/to/dir\" ]]:\n\"/path/to/dir\"\nThis is transformed to [[ path: \"/path/to/dir\", mode: \"cache\" ]]:\n[ path: \"/path/to/dir\", mode: \"cache\" ]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#queue",
    "href": "reference/config/platforms/nextflow/directives.html#queue",
    "title": "Nextflow Directives",
    "section": "queue",
    "text": "queue\nType: String / List of String\nThe queue directory allows you to set the queue where jobs are scheduled when using a grid based executor in your pipeline.\nSee queue.\nExamples:\n\"long\"\n\"short,long\"\n[\"short\", \"long\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#scratch",
    "href": "reference/config/platforms/nextflow/directives.html#scratch",
    "title": "Nextflow Directives",
    "section": "scratch",
    "text": "scratch\nType: Option[Either of Boolean,String]\nThe scratch directive allows you to execute the process in a temporary folder that is local to the execution node.\nSee scratch.\nExamples:\ntrue\n\"/path/to/scratch\"\n'$MY_PATH_TO_SCRATCH'\n\"ram-disk\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#stageinmode",
    "href": "reference/config/platforms/nextflow/directives.html#stageinmode",
    "title": "Nextflow Directives",
    "section": "stageInMode",
    "text": "stageInMode\nType: String\nThe stageInMode directive defines how input files are staged-in to the process work directory. The following values are allowed:\n\n\n\n\n\n\n\nValue\nDescription\n\n\n\n\ncopy\nInput files are staged in the process work directory by creating a copy.\n\n\nlink\nInput files are staged in the process work directory by creating an (hard) link for each of them.\n\n\nsymlink\nInput files are staged in the process work directory by creating a symbolic link with an absolute path for each of them (default).\n\n\nrellink\nInput files are staged in the process work directory by creating a symbolic link with a relative path for each of them.\n\n\n\nSee stageInMode.\nExamples:\n\"copy\"\n\"link\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#stageoutmode",
    "href": "reference/config/platforms/nextflow/directives.html#stageoutmode",
    "title": "Nextflow Directives",
    "section": "stageOutMode",
    "text": "stageOutMode\nType: String\nThe stageOutMode directive defines how output files are staged-out from the scratch directory to the process work directory. The following values are allowed:\n\n\n\n\n\n\n\nValue\nDescription\n\n\n\n\ncopy\nOutput files are copied from the scratch directory to the work directory.\n\n\nmove\nOutput files are moved from the scratch directory to the work directory.\n\n\nrsync\nOutput files are copied from the scratch directory to the work directory by using the rsync utility.\n\n\n\nSee stageOutMode.\nExamples:\n\"copy\"\n\"link\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#storedir",
    "href": "reference/config/platforms/nextflow/directives.html#storedir",
    "title": "Nextflow Directives",
    "section": "storeDir",
    "text": "storeDir\nType: String\nThe storeDir directive allows you to define a directory that is used as a permanent cache for your process results.\nSee storeDir.\nExample:\n\"/path/to/storeDir\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#tag",
    "href": "reference/config/platforms/nextflow/directives.html#tag",
    "title": "Nextflow Directives",
    "section": "tag",
    "text": "tag\nType: String\nThe tag directive allows you to associate each process execution with a custom label, so that it will be easier to identify them in the log file or in the trace execution report.\nSee tag.\nExamples:\n\"foo\"\n'$id'"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#time",
    "href": "reference/config/platforms/nextflow/directives.html#time",
    "title": "Nextflow Directives",
    "section": "time",
    "text": "time\nType: String\nThe time directive allows you to define how long a process is allowed to run.\nSee time.\nExamples:\n\"1h\"\n\"2days\"\n\"1day 6hours 3minutes 30seconds\""
  },
  {
    "objectID": "reference/config/platforms/docker/index.html",
    "href": "reference/config/platforms/docker/index.html",
    "title": "Docker Platform",
    "section": "",
    "text": "Run a Viash component on a Docker backend platform. By specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#apk",
    "href": "reference/config/platforms/docker/index.html#apk",
    "title": "Docker Platform",
    "section": "apk",
    "text": "apk\nType: ApkRequirements\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.5.15. Removed since 0.7.0. Use setup instead, e.g. {type: docker, setup: [{ type: apk, ... }]}. Will be removed.\n\n\nSpecify which apk packages should be available in order to run the component.\nExample:\nsetup:\n  - type: apk\n    packages: [ sl ]"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#apt",
    "href": "reference/config/platforms/docker/index.html#apt",
    "title": "Docker Platform",
    "section": "apt",
    "text": "apt\nType: AptRequirements\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.5.15. Removed since 0.7.0. Use setup instead, e.g. {type: docker, setup: [{ type: apt, ... }]}. Will be removed.\n\n\nSpecify which apt packages should be available in order to run the component.\nExample:\nsetup:\n  - type: apt\n    packages: [ sl ]"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#chown",
    "href": "reference/config/platforms/docker/index.html#chown",
    "title": "Docker Platform",
    "section": "chown",
    "text": "chown\nType: Boolean\nIn Linux, files created by a Docker container will be owned by root. With chown: true, Viash will automatically change the ownership of output files (arguments with type: file and direction: output) to the user running the Viash command after execution of the component. Default value: true.\nExample:\nchown: false"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#docker",
    "href": "reference/config/platforms/docker/index.html#docker",
    "title": "Docker Platform",
    "section": "docker",
    "text": "docker\nType: DockerRequirements\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.5.15. Removed since 0.7.0. Use setup instead, e.g. {type: docker, setup: [{ type: docker, ... }]}. Will be removed.\n\n\nSpecify which Docker commands should be run during setup.\nExample:\nsetup:\n  - type: docker\n    build_args: [ GITHUB_PAT=hello_world ]\n    run: [ git clone ... ]\n    add: [ \"http://foo.bar .\" ]\n    copy: [ \"http://foo.bar .\" ]\n    resources: \n      - resource.txt /path/to/resource.txt"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#id",
    "href": "reference/config/platforms/docker/index.html#id",
    "title": "Docker Platform",
    "section": "id",
    "text": "id\nType: String\nAs with all platforms, you can give a platform a different name. By specifying id: foo, you can target this platform (only) by specifying -p foo in any of the Viash commands.\nExample:\nid: foo"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#image",
    "href": "reference/config/platforms/docker/index.html#image",
    "title": "Docker Platform",
    "section": "image",
    "text": "image\nType: String\nThe base container to start from. You can also add the tag here if you wish.\nExample:\nimage: \"bash:4.0\""
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#namespace_separator",
    "href": "reference/config/platforms/docker/index.html#namespace_separator",
    "title": "Docker Platform",
    "section": "namespace_separator",
    "text": "namespace_separator\nType: String\nThe separator between the namespace and the name of the component, used for determining the image name.\nExample:\nnamespace_separator: \"+\""
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#organization",
    "href": "reference/config/platforms/docker/index.html#organization",
    "title": "Docker Platform",
    "section": "organization",
    "text": "organization\nType: String\nName of a container’s organization."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#port",
    "href": "reference/config/platforms/docker/index.html#port",
    "title": "Docker Platform",
    "section": "port",
    "text": "port\nType: String / List of String\nA list of enabled ports. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.\nExample:\nport:\n  - 80\n  - 8080"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#privileged",
    "href": "reference/config/platforms/docker/index.html#privileged",
    "title": "Docker Platform",
    "section": "privileged",
    "text": "privileged\nType: Boolean\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.6.3. Removed since 0.7.0. Add a privileged flag in run_args instead, e.g. {type: docker, run_args: \"--privileged\"}.\n\n\nAdds a privileged flag to the docker run."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#python",
    "href": "reference/config/platforms/docker/index.html#python",
    "title": "Docker Platform",
    "section": "python",
    "text": "python\nType: PythonRequirements\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.5.15. Removed since 0.7.0. Use setup instead, e.g. {type: docker, setup: [{ type: python, ... }]}. Will be removed.\n\n\nSpecify which Python packages should be available in order to run the component.\nExample:\nsetup:\n  - type: python\n    pip: [ numpy ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ jkbr/httpie ]\n    gitlab: [ foo/bar ]\n    mercurial: [ http://... ]\n    svn: [ http://...]\n    bazaar: [ http://... ]\n    url: [ http://... ]"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#r",
    "href": "reference/config/platforms/docker/index.html#r",
    "title": "Docker Platform",
    "section": "r",
    "text": "r\nType: RRequirements\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.5.15. Removed since 0.7.0. Use setup instead, e.g. {type: docker, setup: [{ type: r, ... }]}. Will be removed.\n\n\nSpecify which R packages should be available in order to run the component.\nExample:\nsetup: \n  - type: r\n    cran: [ dynutils ]\n    bioc: [ AnnotationDbi ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ rcannood/SCORPIUS ]\n    gitlab: [ org/package ]\n    svn: [ https://path.to.svn/group/repo ]\n    url: [ https://github.com/hadley/stringr/archive/HEAD.zip ]\n    script: [ 'devtools::install(\".\")' ]"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#registry",
    "href": "reference/config/platforms/docker/index.html#registry",
    "title": "Docker Platform",
    "section": "registry",
    "text": "registry\nType: String\nThe URL to the a custom Docker registry\nExample:\nregistry: https://my-docker-registry.org"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#resolve_volume",
    "href": "reference/config/platforms/docker/index.html#resolve_volume",
    "title": "Docker Platform",
    "section": "resolve_volume",
    "text": "resolve_volume\nType: DockerResolveVolume\nEnables or disables automatic volume mapping. Enabled when set to Automatic or disabled when set to Manual. Default: Automatic"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#run_args",
    "href": "reference/config/platforms/docker/index.html#run_args",
    "title": "Docker Platform",
    "section": "run_args",
    "text": "run_args\nType: String / List of String\nAdd docker run arguments."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#setup",
    "href": "reference/config/platforms/docker/index.html#setup",
    "title": "Docker Platform",
    "section": "setup",
    "text": "setup\nType: List of Requirements\nA list of requirements for installing the following types of packages:\n\napt\napk\nDocker setup instructions\nJavaScript\nPython\nR\nRuby\nyum\n\nThe order in which these dependencies are specified determines the order in which they will be installed."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#setup_strategy",
    "href": "reference/config/platforms/docker/index.html#setup_strategy",
    "title": "Docker Platform",
    "section": "setup_strategy",
    "text": "setup_strategy\nType: DockerSetupStrategy\nThe Docker setup strategy to use when building a container.\n\n\n\nStrategy\nDescription\n\n\n\n\nalwaysbuild / build / b\nAlways build the image from the dockerfile. This is the default setup strategy.\n\n\nalwayscachedbuild / cachedbuild / cb\nAlways build the image from the dockerfile, with caching enabled.\n\n\nifneedbebuild\nBuild the image if it does not exist locally.\n\n\nifneedbecachedbuild\nBuild the image with caching enabled if it does not exist locally, with caching enabled.\n\n\nalwayspull / pull / p\nTry to pull the container from Docker Hub or the specified docker registry.\n\n\nalwayspullelsebuild / pullelsebuild\nTry to pull the image from a registry and build it if it doesn’t exist.\n\n\nalwayspullelsecachedbuild / pullelsecachedbuild\nTry to pull the image from a registry and build it with caching if it doesn’t exist.\n\n\nifneedbepull\nIf the image does not exist locally, pull the image.\n\n\nifneedbepullelsebuild\nIf the image does not exist locally, pull the image. If the image does exist, build it.\n\n\nifneedbepullelsecachedbuild\nIf the image does not exist locally, pull the image. If the image does exist, build it with caching enabled.\n\n\npush\nPush the container to Docker Hub or the specified docker registry.\n\n\npushifnotpresent\nPush the container to Docker Hub or the specified docker registry if the tag does not exist yet.\n\n\ndonothing / meh\nDo not build or pull anything.\n\n\n\nExample:\nsetup_strategy: alwaysbuild"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#tag",
    "href": "reference/config/platforms/docker/index.html#tag",
    "title": "Docker Platform",
    "section": "tag",
    "text": "tag\nType: String\nSpecify a Docker image based on its tag.\nExample:\ntag: 4.0"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_image",
    "href": "reference/config/platforms/docker/index.html#target_image",
    "title": "Docker Platform",
    "section": "target_image",
    "text": "target_image\nType: String\nIf anything is specified in the setup section, running the ---setup will result in an image with the name of &lt;target_image&gt;:&lt;version&gt;. If nothing is specified in the setup section, simply image will be used. Advanced usage only.\nExample:\ntarget_image: myfoo"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_image_source",
    "href": "reference/config/platforms/docker/index.html#target_image_source",
    "title": "Docker Platform",
    "section": "target_image_source",
    "text": "target_image_source\nType: String\nThe source of the target image. This is used for defining labels in the dockerfile.\nExample:\ntarget_image_source: https://github.com/foo/bar"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_organization",
    "href": "reference/config/platforms/docker/index.html#target_organization",
    "title": "Docker Platform",
    "section": "target_organization",
    "text": "target_organization\nType: String\nThe organization set in the resulting image. Advanced usage only.\nExample:\ntarget_organization: viash-io"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_registry",
    "href": "reference/config/platforms/docker/index.html#target_registry",
    "title": "Docker Platform",
    "section": "target_registry",
    "text": "target_registry\nType: String\nThe URL where the resulting image will be pushed to. Advanced usage only.\nExample:\ntarget_registry: https://my-docker-registry.org"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_tag",
    "href": "reference/config/platforms/docker/index.html#target_tag",
    "title": "Docker Platform",
    "section": "target_tag",
    "text": "target_tag\nType: String\nThe tag the resulting image gets. Advanced usage only.\nExample:\ntarget_tag: 0.5.0"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#test_setup",
    "href": "reference/config/platforms/docker/index.html#test_setup",
    "title": "Docker Platform",
    "section": "test_setup",
    "text": "test_setup\nType: List of Requirements\nAdditional requirements specific for running unit tests."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#type",
    "href": "reference/config/platforms/docker/index.html#type",
    "title": "Docker Platform",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the platform."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#workdir",
    "href": "reference/config/platforms/docker/index.html#workdir",
    "title": "Docker Platform",
    "section": "workdir",
    "text": "workdir\nType: String\nThe working directory when starting the container. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.\nExample:\nworkdir: /home/user"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#yum",
    "href": "reference/config/platforms/docker/index.html#yum",
    "title": "Docker Platform",
    "section": "yum",
    "text": "yum\nType: YumRequirements\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.5.15. Removed since 0.7.0. Use setup instead, e.g. {type: docker, setup: [{ type: yum, ... }]}. Will be removed.\n\n\nSpecify which yum packages should be available in order to run the component.\nExample:\nsetup:\n  - type: yum\n    packages: [ sl ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html",
    "title": "Javascript Requirements",
    "section": "",
    "text": "Specify which JavaScript packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#git",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#git",
    "title": "Javascript Requirements",
    "section": "git",
    "text": "git\nType: String / List of String\nSpecifies which packages to install using a Git URI.\nExample:\ngit: [ https://some.git.repository/org/repo ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#github",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#github",
    "title": "Javascript Requirements",
    "section": "github",
    "text": "github\nType: String / List of String\nSpecifies which packages to install from GitHub.\nExample:\ngithub: [ owner/repository ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#npm",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#npm",
    "title": "Javascript Requirements",
    "section": "npm",
    "text": "npm\nType: String / List of String\nSpecifies which packages to install from npm.\nExample:\nnpm: [ packagename ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#packages",
    "title": "Javascript Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nSpecifies which packages to install from npm.\nExample:\npackages: [ packagename ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#type",
    "title": "Javascript Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#url",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#url",
    "title": "Javascript Requirements",
    "section": "url",
    "text": "url\nType: String / List of String\nSpecifies which packages to install using a generic URI.\nExample:\nurl: [ https://github.com/org/repo/archive/HEAD.zip ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/aptRequirements.html",
    "href": "reference/config/platforms/docker/setup/aptRequirements.html",
    "title": "Apt Requirements",
    "section": "",
    "text": "Specify which apt packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/aptRequirements.html#interactive",
    "href": "reference/config/platforms/docker/setup/aptRequirements.html#interactive",
    "title": "Apt Requirements",
    "section": "interactive",
    "text": "interactive\nType: Boolean\nIf false, the Debian frontend is set to non-interactive (recommended). Default: false."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/aptRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/aptRequirements.html#packages",
    "title": "Apt Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nSpecifies which packages to install.\nExample:\npackages: [ sl ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/aptRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/aptRequirements.html#type",
    "title": "Apt Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html",
    "title": "Python Requirements",
    "section": "",
    "text": "Specify which Python packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#bazaar",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#bazaar",
    "title": "Python Requirements",
    "section": "bazaar",
    "text": "bazaar\nType: String / List of String\nSpecifies which packages to install using a Bazaar URI.\nExample:\nbazaar: [ http://bazaar.launchpad.net/some_pkg/some_pkg/release-0.1 ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#git",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#git",
    "title": "Python Requirements",
    "section": "git",
    "text": "git\nType: String / List of String\nSpecifies which packages to install using a Git URI.\nExample:\ngit: [ https://some.git.repository/org/repo ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#github",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#github",
    "title": "Python Requirements",
    "section": "github",
    "text": "github\nType: String / List of String\nSpecifies which packages to install from GitHub.\nExample:\ngithub: [ jkbr/httpie ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#gitlab",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#gitlab",
    "title": "Python Requirements",
    "section": "gitlab",
    "text": "gitlab\nType: String / List of String\nSpecifies which packages to install from GitLab.\nExample:\ngitlab: [ foo/bar ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#mercurial",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#mercurial",
    "title": "Python Requirements",
    "section": "mercurial",
    "text": "mercurial\nType: String / List of String\nSpecifies which packages to install using a Mercurial URI.\nExample:\nmercurial: [ https://hg.myproject.org/MyProject/#egg=MyProject ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#packages",
    "title": "Python Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nSpecifies which packages to install from pip.\nExample:\npackages: [ numpy ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#pip",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#pip",
    "title": "Python Requirements",
    "section": "pip",
    "text": "pip\nType: String / List of String\nSpecifies which packages to install from pip.\nExample:\npip: [ numpy ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#pypi",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#pypi",
    "title": "Python Requirements",
    "section": "pypi",
    "text": "pypi\nType: String / List of String\nSpecifies which packages to install from PyPI using pip.\nExample:\npypi: [ numpy ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#script",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#script",
    "title": "Python Requirements",
    "section": "script",
    "text": "script\nType: String / List of String\nSpecifies a code block to run as part of the build.\nExample:\nscript: |\n  print(\"Running custom code\")\n  x = 1 + 1 == 2"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#svn",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#svn",
    "title": "Python Requirements",
    "section": "svn",
    "text": "svn\nType: String / List of String\nSpecifies which packages to install using an SVN URI.\nExample:\nsvn: [ http://svn.repo/some_pkg/trunk/#egg=SomePackage ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#type",
    "title": "Python Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#upgrade",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#upgrade",
    "title": "Python Requirements",
    "section": "upgrade",
    "text": "upgrade\nType: Boolean\nSets the --upgrade flag when set to true. Default: true."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#url",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#url",
    "title": "Python Requirements",
    "section": "url",
    "text": "url\nType: String / List of String\nSpecifies which packages to install using a generic URI.\nExample:\nurl: [ https://github.com/some_org/some_pkg/zipball/master ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#user",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#user",
    "title": "Python Requirements",
    "section": "user",
    "text": "user\nType: Boolean\nSets the --user flag when set to true. Default: false."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/apkRequirements.html",
    "href": "reference/config/platforms/docker/setup/apkRequirements.html",
    "title": "Apk Requirements",
    "section": "",
    "text": "Specify which apk packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/apkRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/apkRequirements.html#packages",
    "title": "Apk Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nSpecifies which packages to install.\nExample:\npackages: [ sl ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/apkRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/apkRequirements.html#type",
    "title": "Apk Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html",
    "href": "reference/config/platforms/docker/setup/rRequirements.html",
    "title": "R Requirements",
    "section": "",
    "text": "Specify which R packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#bioc",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#bioc",
    "title": "R Requirements",
    "section": "bioc",
    "text": "bioc\nType: String / List of String\nSpecifies which packages to install from BioConductor.\nExample:\nbioc: [ AnnotationDbi ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#bioc_force_install",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#bioc_force_install",
    "title": "R Requirements",
    "section": "bioc_force_install",
    "text": "bioc_force_install\nType: Boolean\nForces packages specified in bioc to be reinstalled, even if they are already present in the container. Default: false.\nExample:\nbioc_force_install: false"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#bitbucket",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#bitbucket",
    "title": "R Requirements",
    "section": "bitbucket",
    "text": "bitbucket\nType: String / List of String\nSpecifies which packages to install from Bitbucket.\nExample:\nbitbucket: [ org/package ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#cran",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#cran",
    "title": "R Requirements",
    "section": "cran",
    "text": "cran\nType: String / List of String\nSpecifies which packages to install from CRAN.\nExample:\ncran: [ anndata, ggplot2 ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#git",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#git",
    "title": "R Requirements",
    "section": "git",
    "text": "git\nType: String / List of String\nSpecifies which packages to install using a Git URI.\nExample:\ngit: [ https://some.git.repository/org/repo ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#github",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#github",
    "title": "R Requirements",
    "section": "github",
    "text": "github\nType: String / List of String\nSpecifies which packages to install from GitHub.\nExample:\ngithub: [ rcannood/SCORPIUS ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#gitlab",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#gitlab",
    "title": "R Requirements",
    "section": "gitlab",
    "text": "gitlab\nType: String / List of String\nSpecifies which packages to install from GitLab.\nExample:\ngitlab: [ org/package ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#packages",
    "title": "R Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nSpecifies which packages to install from CRAN.\nExample:\npackages: [ anndata, ggplot2 ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#script",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#script",
    "title": "R Requirements",
    "section": "script",
    "text": "script\nType: String / List of String\nSpecifies a code block to run as part of the build.\nExample:\nscript: |\n  cat(\"Running custom code\n\")\n  install.packages(\"anndata\")"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#svn",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#svn",
    "title": "R Requirements",
    "section": "svn",
    "text": "svn\nType: String / List of String\nSpecifies which packages to install using an SVN URI.\nExample:\nsvn: [ https://path.to.svn/group/repo ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#type",
    "title": "R Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#url",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#url",
    "title": "R Requirements",
    "section": "url",
    "text": "url\nType: String / List of String\nSpecifies which packages to install using a generic URI.\nExample:\nurl: [ https://github.com/hadley/stringr/archive/HEAD.zip ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html",
    "title": "Docker Requirements",
    "section": "",
    "text": "Specify which Docker commands should be run during setup.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#add",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#add",
    "title": "Docker Requirements",
    "section": "add",
    "text": "add\nType: String / List of String\nSpecifies which ADD entries to add to the Dockerfile while building it.\nExample:\nadd: [ \"http://foo/bar .\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#build_args",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#build_args",
    "title": "Docker Requirements",
    "section": "build_args",
    "text": "build_args\nType: String / List of String\nSpecifies which ARG entries to add to the Dockerfile while building it.\nExample:\nbuild_args: [ \"R_VERSION=4.2\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#copy",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#copy",
    "title": "Docker Requirements",
    "section": "copy",
    "text": "copy\nType: String / List of String\nSpecifies which COPY entries to add to the Dockerfile while building it.\nExample:\ncopy: [ \"resource.txt /path/to/resource.txt\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#env",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#env",
    "title": "Docker Requirements",
    "section": "env",
    "text": "env\nType: String / List of String\nSpecifies which ENV entries to add to the Dockerfile while building it. Unlike ARG, ENV entries are also accessible from inside the container.\nExample:\nenv: [ \"R_VERSION=4.2\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#label",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#label",
    "title": "Docker Requirements",
    "section": "label",
    "text": "label\nType: String / List of String\nSpecifies which LABEL entries to add to the Dockerfile while building it.\nExample:\nlabel: [ component=\"foo\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#resources",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#resources",
    "title": "Docker Requirements",
    "section": "resources",
    "text": "resources\nType: String / List of String\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.6.3. Removed since 0.7.0. resources in setup: {type: docker, resources: ...} was removed. Please use copy instead.\n\n\nSpecifies which COPY entries to add to the Dockerfile while building it.\nExample:\nresources: [ \"resource.txt /path/to/resource.txt\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#run",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#run",
    "title": "Docker Requirements",
    "section": "run",
    "text": "run\nType: String / List of String\nSpecifies which RUN entries to add to the Dockerfile while building it.\nExample:\nrun: |\n  echo 'Run a custom command'\n  echo 'Foo' &gt; /path/to/file.txt"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#type",
    "title": "Docker Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rubyRequirements.html",
    "href": "reference/config/platforms/docker/setup/rubyRequirements.html",
    "title": "Ruby Requirements",
    "section": "",
    "text": "Specify which Ruby packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rubyRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/rubyRequirements.html#packages",
    "title": "Ruby Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nSpecifies which packages to install.\nExample:\npackages: [ rspec ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rubyRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/rubyRequirements.html#type",
    "title": "Ruby Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/yumRequirements.html",
    "href": "reference/config/platforms/docker/setup/yumRequirements.html",
    "title": "Yum Requirements",
    "section": "",
    "text": "Specify which yum packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/yumRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/yumRequirements.html#packages",
    "title": "Yum Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nSpecifies which packages to install.\nExample:\npackages: [ sl ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/yumRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/yumRequirements.html#type",
    "title": "Yum Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/native/index.html",
    "href": "reference/config/platforms/native/index.html",
    "title": "Native Platform",
    "section": "",
    "text": "Running a Viash component on a native platform means that the script will be executed in your current environment. Any dependencies are assumed to have been installed by the user, so the native platform is meant for developers (who know what they’re doing) or for simple bash scripts (which have no extra dependencies)."
  },
  {
    "objectID": "reference/config/platforms/native/index.html#id",
    "href": "reference/config/platforms/native/index.html#id",
    "title": "Native Platform",
    "section": "id",
    "text": "id\nType: String\nAs with all platforms, you can give a platform a different name. By specifying id: foo, you can target this platform (only) by specifying -p foo in any of the Viash commands.\nExample:\nid: foo"
  },
  {
    "objectID": "reference/config/platforms/native/index.html#type",
    "href": "reference/config/platforms/native/index.html#type",
    "title": "Native Platform",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the platform."
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html",
    "href": "reference/config/platforms/nextflowLegacy/index.html",
    "title": "Nextflow Legacy Platform",
    "section": "",
    "text": "Warning\n\n\n\nDeprecated since 0.6.0. Removed since 0.7.0. Nextflow platform with variant: legacy was removed\nRun a Viash component as a Nextflow module."
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#executor",
    "href": "reference/config/platforms/nextflowLegacy/index.html#executor",
    "title": "Nextflow Legacy Platform",
    "section": "executor",
    "text": "executor\nType: String\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.6.3. Removed since 0.7.0. Undocumented & stale value"
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#id",
    "href": "reference/config/platforms/nextflowLegacy/index.html#id",
    "title": "Nextflow Legacy Platform",
    "section": "id",
    "text": "id\nType: String\nEvery platform can be given a specific id that can later be referred to explicitly when running or building the Viash component."
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#image",
    "href": "reference/config/platforms/nextflowLegacy/index.html#image",
    "title": "Nextflow Legacy Platform",
    "section": "image",
    "text": "image\nType: String\nIf no image attributes are configured, Viash will use the auto-generated image name from the Docker platform:\n[&lt;namespace&gt;/]&lt;name&gt;:&lt;version&gt;\nIt’s possible to specify the container image explicitly with which to run the module in different ways:\nimage: dataintuitive/viash:0.4.0\nExactly the same can be obtained with\nimage: dataintuitive/viash\nregistry: index.docker.io/v1/\ntag: 0.4.0\nSpecifying the attribute(s) like this will use the container dataintuitive/viash:0.4.0 from Docker hub (registry).\nIf no tag is specified Viash will use functionality.version as the tag.\nIf no registry is specified, Viash (and NextFlow) will assume the image is available locally or on Docker Hub. In other words, the registry: ... attribute above is superfluous. No other registry is checked automatically due to a limitation from Docker itself."
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#label",
    "href": "reference/config/platforms/nextflowLegacy/index.html#label",
    "title": "Nextflow Legacy Platform",
    "section": "label",
    "text": "label\nType: String\nWhen running the module in a cluster context and depending on the cluster type, NextFlow allows for attaching labels to the process that can later be used as selectors for associating resources to this process.\nIn order to attach one label to a process/component, one can use the label: ... attribute, multiple labels can be added using labels: [ ..., ... ] and the two can even be mixed.\nIn the main nextflow.config, one can now use this label:\nprocess { … withLabel: bigmem { maxForks = 5 … } }\nExample:\nlabel: highmem labels: [ highmem, highcpu ]"
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#labels",
    "href": "reference/config/platforms/nextflowLegacy/index.html#labels",
    "title": "Nextflow Legacy Platform",
    "section": "labels",
    "text": "labels\nType: String / List of String\nWhen running the module in a cluster context and depending on the cluster type, NextFlow allows for attaching labels to the process that can later be used as selectors for associating resources to this process.\nIn order to attach one label to a process/component, one can use the label: ... attribute, multiple labels can be added using labels: [ ..., ... ] and the two can even be mixed.\nIn the main nextflow.config, one can now use this label:\nprocess { … withLabel: bigmem { maxForks = 5 … } }\nExample:\nlabel: highmem labels: [ highmem, highcpu ]"
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#namespace_separator",
    "href": "reference/config/platforms/nextflowLegacy/index.html#namespace_separator",
    "title": "Nextflow Legacy Platform",
    "section": "namespace_separator",
    "text": "namespace_separator\nType: String\nThe default namespace separator is “_“.\nExample:\nnamespace_separator: \"+\""
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#organization",
    "href": "reference/config/platforms/nextflowLegacy/index.html#organization",
    "title": "Nextflow Legacy Platform",
    "section": "organization",
    "text": "organization\nType: String\nName of a container’s organization.\nExample:\norganization: viash-io"
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#path",
    "href": "reference/config/platforms/nextflowLegacy/index.html#path",
    "title": "Nextflow Legacy Platform",
    "section": "path",
    "text": "path\nType: String\nWhen publish: true, this attribute defines where the output is written relative to the params.publishDir setting. For example, path: processed in combination with --output s3://some_bucket/ will store the output of this component under\ns3://some_bucket/processed/\nThis attribute gives control over the directory structure of the output. For example:\npath: raw_data\nOr even:\npath: raw_data/bcl\nPlease note that per_id and path can be combined."
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#per_id",
    "href": "reference/config/platforms/nextflowLegacy/index.html#per_id",
    "title": "Nextflow Legacy Platform",
    "section": "per_id",
    "text": "per_id\nType: Boolean\nBy default, a subdirectory is created corresponding to the unique ID that is passed in the triplet. Let us illustrate this with an example. The following code snippet uses the value of --input as an input of a workflow. The input can include a wildcard so that multiple samples can run in parallel. We use the parent directory name (.getParent().baseName) as an identifier for the sample. We pass this as the first entry of the triplet:\nChannel.fromPath(params.input) \\\n    | map{ it -&gt; [ it.getParent().baseName , it ] } \\\n    | map{ it -&gt; [ it[0] , it[1], params ] }\n    | ...\nSay the resulting sample names are SAMPLE1 and SAMPLE2. The next step in the pipeline will be published (at least by default) under:\n&lt;publishDir&gt;/SAMPLE1/\n&lt;publishDir&gt;/SAMPLE2/\nThese per-ID subdirectories can be avoided by setting:\nper_id: false"
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#publish",
    "href": "reference/config/platforms/nextflowLegacy/index.html#publish",
    "title": "Nextflow Legacy Platform",
    "section": "publish",
    "text": "publish\nType: Boolean\nNextFlow uses the autogenerated work dirs to manage process IO under the hood. In order effectively output something one can publish the results a module or step in the pipeline. In order to do this, add publish: true to the config:\n\npublish is optional\nDefault value is false\n\nThis attribute simply defines if output of a component should be published yes or no. The output location has to be provided at pipeline launch by means of the option --publishDir ... or as params.publishDir in nextflow.config:\nparams.publishDir = \"...\""
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#registry",
    "href": "reference/config/platforms/nextflowLegacy/index.html#registry",
    "title": "Nextflow Legacy Platform",
    "section": "registry",
    "text": "registry\nType: String\nThe URL to the a custom Docker registry.\nExample:\nregistry: https://my-docker-registry.org"
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#separate_multiple_outputs",
    "href": "reference/config/platforms/nextflowLegacy/index.html#separate_multiple_outputs",
    "title": "Nextflow Legacy Platform",
    "section": "separate_multiple_outputs",
    "text": "separate_multiple_outputs\nType: Boolean\nSeparates the outputs generated by a Nextflow component with multiple outputs as separate events on the channel. Default value: true.\nExample:\nseparate_multiple_outputs: false"
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#stageinmode",
    "href": "reference/config/platforms/nextflowLegacy/index.html#stageinmode",
    "title": "Nextflow Legacy Platform",
    "section": "stageInMode",
    "text": "stageInMode\nType: String\nBy default NextFlow will create a symbolic link to the inputs for a process/module and run the tool at hand using those symbolic links. Some applications do not cope well with this strategy, in that case the files should effectively be copied rather than linked to. This can be achieved by using stageInMode: copy. This attribute is optional, the default is symlink.\nExample:\nstageInMode: copy"
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#tag",
    "href": "reference/config/platforms/nextflowLegacy/index.html#tag",
    "title": "Nextflow Legacy Platform",
    "section": "tag",
    "text": "tag\nType: String\nSpecify a Docker image based on its tag.\nExample:\ntag: 4.0"
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#type",
    "href": "reference/config/platforms/nextflowLegacy/index.html#type",
    "title": "Nextflow Legacy Platform",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the platform."
  },
  {
    "objectID": "reference/config/platforms/nextflowLegacy/index.html#version",
    "href": "reference/config/platforms/nextflowLegacy/index.html#version",
    "title": "Nextflow Legacy Platform",
    "section": "version",
    "text": "version\nType: String\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.4.0. Removed since 0.7.0. nextflow platform: attribute ‘version’ was removed"
  },
  {
    "objectID": "reference/config/functionality/index.html",
    "href": "reference/config/functionality/index.html",
    "title": "Functionality",
    "section": "",
    "text": "The functionality-part of the config file describes the behaviour of the script in terms of arguments and resources. By specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you."
  },
  {
    "objectID": "reference/config/functionality/index.html#add_resources_to_path",
    "href": "reference/config/functionality/index.html#add_resources_to_path",
    "title": "Functionality",
    "section": "add_resources_to_path",
    "text": "add_resources_to_path\nType: Boolean\n\n\n\n\n\n\nWarning\n\n\n\nRemoved since 0.5.11. Extending the PATH turned out to be not desirable.\n\n\nAdds the resources directory to the PATH variable when set to true. This is set to false by default."
  },
  {
    "objectID": "reference/config/functionality/index.html#argument_groups",
    "href": "reference/config/functionality/index.html#argument_groups",
    "title": "Functionality",
    "section": "argument_groups",
    "text": "argument_groups\nType: List of ArgumentGroup\nA grouping of the arguments, used to display the help message.\n\nname: foo, the name of the argument group.\ndescription: Description of foo, a description of the argument group. Multiline descriptions are supported.\narguments: [arg1, arg2, ...], list of the arguments names.\n\nExamples:\nargument_groups:\n  - name: \"Input\"\n    arguments:\n      - name: \"--id\"\n        type: string\n        required: true\n      - name: \"--input\"\n        type: file\n        required: true\n  - name: \"Output\"\n    arguments:\n      - name: \"--output\"\n        type: file\n        direction: output\n        required: true\n      - name: \"--output_optional\"\n        type: file\n        direction: output\nThis results in the following output when calling the component with the --help argument:\ncomponent_name\n\n  Input:\n      --id\n          type: string\n\n      --input\n          type: file\n\n  Output:\n      --output\n          type: file\n\n      --optional_output\n          type: file"
  },
  {
    "objectID": "reference/config/functionality/index.html#arguments",
    "href": "reference/config/functionality/index.html#arguments",
    "title": "Functionality",
    "section": "arguments",
    "text": "arguments\nType: List of Argument\nA list of arguments for this component. For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:\n\nstring\nfile\ninteger\ndouble\nboolean\nboolean_true\nboolean_false\n\nExample:\narguments:\n  - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    direction: output\n    required: false\n    multiple: true\n    multiple_sep: \",\"\n  - name: --bar\n    type: string"
  },
  {
    "objectID": "reference/config/functionality/index.html#authors",
    "href": "reference/config/functionality/index.html#authors",
    "title": "Functionality",
    "section": "authors",
    "text": "authors\nType: List of Author\nA list of authors. An author must at least have a name, but can also have a list of roles, an e-mail address, and a map of custom properties.\nSuggested values for roles are:\n\n\n\n\n\n\n\n\nRole\nAbbrev.\nDescription\n\n\n\n\nmaintainer\nmnt\nfor the maintainer of the code. Ideally, exactly one maintainer is specified.\n\n\nauthor\naut\nfor persons who have made substantial contributions to the software.\n\n\ncontributor\nctb\nfor persons who have made smaller contributions (such as code patches).\n\n\ndatacontributor\ndtc\nfor persons or organisations that contributed data sets for the software\n\n\ncopyrightholder\ncph\nfor all copyright holders. This is a legal concept so should use the legal name of an institution or corporate body.\n\n\nfunder\nfnd\nfor persons or organizations that furnished financial support for the development of the software\n\n\n\nThe full list of roles is extremely comprehensive.\nExample:\nauthors:\n  - name: Bob Cando\n    roles: [maintainer, author]\n    email: bob@can.do\n    props: {github: bobcando, orcid: 0000-0001-0002-0003}\n  - name: Tim Farbe\n    roles: [author]\n    email: tim@far.be"
  },
  {
    "objectID": "reference/config/functionality/index.html#description",
    "href": "reference/config/functionality/index.html#description",
    "title": "Functionality",
    "section": "description",
    "text": "description\nType: String\nA description of the component. This will be displayed with --help.\nExample:\ndescription: |\n  This component performs function Y and Z.\n  It is possible to make this a multiline string."
  },
  {
    "objectID": "reference/config/functionality/index.html#enabled",
    "href": "reference/config/functionality/index.html#enabled",
    "title": "Functionality",
    "section": "enabled",
    "text": "enabled\nType: Boolean\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.6.0. Removed since 0.7.0. Use status instead.\n\n\nSetting this to false with disable this component when using namespaces."
  },
  {
    "objectID": "reference/config/functionality/index.html#info",
    "href": "reference/config/functionality/index.html#info",
    "title": "Functionality",
    "section": "info",
    "text": "info\nType: Json\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  twitter: wizzkid\n  classes: [ one, two, three ]"
  },
  {
    "objectID": "reference/config/functionality/index.html#inputs",
    "href": "reference/config/functionality/index.html#inputs",
    "title": "Functionality",
    "section": "inputs",
    "text": "inputs\nType: List of Argument\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.6.0. Removed since 0.7.0. Use arguments instead.\n\n\nA list of input arguments in addition to the arguments list. Any arguments specified here will have their type set to file and the direction set to input by default.\nExamples:\ninputs:\n  - name: input_file\n  - name: another_input\nThis results in the following output when calling the component with the --help argument:\ncomponent_with_inputs\n  \n  Inputs:\n      input_file\n          type: file\n  \n      another_input\n          type: file"
  },
  {
    "objectID": "reference/config/functionality/index.html#name",
    "href": "reference/config/functionality/index.html#name",
    "title": "Functionality",
    "section": "name",
    "text": "name\nType: String\nName of the component and the filename of the executable when built with viash build.\nExample:\nname: this_is_my_component"
  },
  {
    "objectID": "reference/config/functionality/index.html#namespace",
    "href": "reference/config/functionality/index.html#namespace",
    "title": "Functionality",
    "section": "namespace",
    "text": "namespace\nType: String\nNamespace this component is a part of. See the Namespaces guide for more information on namespaces.\nExample:\nnamespace: fancy_components"
  },
  {
    "objectID": "reference/config/functionality/index.html#outputs",
    "href": "reference/config/functionality/index.html#outputs",
    "title": "Functionality",
    "section": "outputs",
    "text": "outputs\nType: List of Argument\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.6.0. Removed since 0.7.0. Use arguments instead.\n\n\nA list of output arguments in addition to the arguments list. Any arguments specified here will have their type set to file and thr direction set to output by default.\nExamples:\noutputs:\n  - name: output_file\n  - name: another_output\nThis results in the following output when calling the component with the --help argument:\ncomponent_with_outputs\n  \n  Outputs:\n      output_file\n          type: file, output\n  \n      another_output\n          type: file, output"
  },
  {
    "objectID": "reference/config/functionality/index.html#requirements",
    "href": "reference/config/functionality/index.html#requirements",
    "title": "Functionality",
    "section": "requirements",
    "text": "requirements\nType: ComputationalRequirements\nComputational requirements related to running the component. cpus specifies the maximum number of (logical) cpus a component is allowed to use., whereas memory specifies the maximum amount of memory a component is allowed to allicate. Memory units must be in B, KB, MB, GB, TB or PB.\nExample:\nrequirements:\n  cpus: 5\n  memory: 10GB"
  },
  {
    "objectID": "reference/config/functionality/index.html#resources",
    "href": "reference/config/functionality/index.html#resources",
    "title": "Functionality",
    "section": "resources",
    "text": "resources\nType: List of Resource\nResources are files that support the component. The first resource should be a script that will be executed when the functionality is run. Additional resources will be copied to the same directory.\nCommon properties:\n\ntype: file / r_script / python_script / bash_script / javascript_script / scala_script / csharp_script, specifies the type of the resource. The first resource cannot be of type file. When the type is not specified, the default type is simply file.\ndest: filename, the resulting name of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter.\npath: path/to/file, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text.\ntext: …multiline text…, the content of the resulting file specified as a string. Mutually exclusive with path.\nis_executable: true / false, whether the resulting resource file should be made executable.\n\nExample:\nresources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt"
  },
  {
    "objectID": "reference/config/functionality/index.html#status",
    "href": "reference/config/functionality/index.html#status",
    "title": "Functionality",
    "section": "status",
    "text": "status\nType: Status\nAllows setting a component to active, deprecated or disabled."
  },
  {
    "objectID": "reference/config/functionality/index.html#test_resources",
    "href": "reference/config/functionality/index.html#test_resources",
    "title": "Functionality",
    "section": "test_resources",
    "text": "test_resources\nType: List of Resource\nOne or more scripts to be used to test the component behaviour when viash test is invoked. Additional files of type file will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code &gt;0 when unexpected behaviour occurs during testing. See Unit Testing for more info.\nExample:\ntest_resources:\n  - type: bash_script\n    path: tests/test1.sh\n  - type: r_script\n    path: tests/test2.R\n  - path: resource1.txt"
  },
  {
    "objectID": "reference/config/functionality/index.html#tests",
    "href": "reference/config/functionality/index.html#tests",
    "title": "Functionality",
    "section": "tests",
    "text": "tests\nType: List of Resource\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.5.13. Removed since 0.7.0. Use test_resources instead. No functional difference.\n\n\nOne or more Bash/R/Python scripts to be used to test the component behaviour when viash test is invoked. Additional files of type file will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code &gt;0 when unexpected behaviour occurs during testing."
  },
  {
    "objectID": "reference/config/functionality/index.html#usage",
    "href": "reference/config/functionality/index.html#usage",
    "title": "Functionality",
    "section": "usage",
    "text": "usage\nType: String\nA description on how to use the component. This will be displayed with --help under the ‘Usage:’ section.\nExample:\nusage: Place the executable in a directory containing TSV files and run it"
  },
  {
    "objectID": "reference/config/functionality/index.html#version",
    "href": "reference/config/functionality/index.html#version",
    "title": "Functionality",
    "section": "version",
    "text": "version\nType: String\nVersion of the component. This field will be used to version the executable and the Docker container.\nExample:\nversion: 0.8"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html",
    "href": "reference/config/functionality/arguments/double.html",
    "title": "Double",
    "section": "",
    "text": "A double type argument has a numeric value with decimal points\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#alternatives",
    "href": "reference/config/functionality/arguments/double.html#alternatives",
    "title": "Double",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#default",
    "href": "reference/config/functionality/arguments/double.html#default",
    "title": "Double",
    "section": "default",
    "text": "default\nType: Double / List of Double\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_double\n  type: double\n  default: 5.8"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#description",
    "href": "reference/config/functionality/arguments/double.html#description",
    "title": "Double",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#example",
    "href": "reference/config/functionality/arguments/double.html#example",
    "title": "Double",
    "section": "example",
    "text": "example\nType: Double / List of Double\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_double\n  type: double\n  example: 5.8"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#info",
    "href": "reference/config/functionality/arguments/double.html#info",
    "title": "Double",
    "section": "info",
    "text": "info\nType: Json\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#max",
    "href": "reference/config/functionality/arguments/double.html#max",
    "title": "Double",
    "section": "max",
    "text": "max\nType: Double\nMaximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with min to clamp values.\nExample:\n- name: --my_double\n  type: double\n  max: 80.4"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#min",
    "href": "reference/config/functionality/arguments/double.html#min",
    "title": "Double",
    "section": "min",
    "text": "min\nType: Double\nMinimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with max to clamp values.\nExample:\n- name: --my_double\n  type: double\n  min: 25.5"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#multiple",
    "href": "reference/config/functionality/arguments/double.html#multiple",
    "title": "Double",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_double\n  type: double\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_double=5.8:22.6:200.4"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#multiple_sep",
    "href": "reference/config/functionality/arguments/double.html#multiple_sep",
    "title": "Double",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_double\n  type: double\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_double=5.8,22.6,200.4"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#name",
    "href": "reference/config/functionality/arguments/double.html#name",
    "title": "Double",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#required",
    "href": "reference/config/functionality/arguments/double.html#required",
    "title": "Double",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_double\n  type: double\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#type",
    "href": "reference/config/functionality/arguments/double.html#type",
    "title": "Double",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html",
    "href": "reference/config/functionality/arguments/integer.html",
    "title": "Integer",
    "section": "",
    "text": "An integer type argument has a numeric value without decimal points.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#alternatives",
    "href": "reference/config/functionality/arguments/integer.html#alternatives",
    "title": "Integer",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#choices",
    "href": "reference/config/functionality/arguments/integer.html#choices",
    "title": "Integer",
    "section": "choices",
    "text": "choices\nType: List of Int\nLimit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.\nExample:\n- name: --values\n  type: integer\n  choices: [1024, 2048, 4096]"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#default",
    "href": "reference/config/functionality/arguments/integer.html#default",
    "title": "Integer",
    "section": "default",
    "text": "default\nType: Int / List of Int\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_integer\n  type: integer\n  default: 100"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#description",
    "href": "reference/config/functionality/arguments/integer.html#description",
    "title": "Integer",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#example",
    "href": "reference/config/functionality/arguments/integer.html#example",
    "title": "Integer",
    "section": "example",
    "text": "example\nType: Int / List of Int\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_integer\n  type: integer\n  example: 100"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#info",
    "href": "reference/config/functionality/arguments/integer.html#info",
    "title": "Integer",
    "section": "info",
    "text": "info\nType: Json\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#max",
    "href": "reference/config/functionality/arguments/integer.html#max",
    "title": "Integer",
    "section": "max",
    "text": "max\nType: Int\nMaximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with min to clamp values.\nExample:\n- name: --my_integer\n  type: integer\n  max: 150"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#min",
    "href": "reference/config/functionality/arguments/integer.html#min",
    "title": "Integer",
    "section": "min",
    "text": "min\nType: Int\nMinimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with max to clamp values.\nExample:\n- name: --my_integer\n  type: integer\n  min: 50"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#multiple",
    "href": "reference/config/functionality/arguments/integer.html#multiple",
    "title": "Integer",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_integer\n  type: integer\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_integer=10:80:152"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#multiple_sep",
    "href": "reference/config/functionality/arguments/integer.html#multiple_sep",
    "title": "Integer",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_integer\n  type: integer\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_integer=10:80:152"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#name",
    "href": "reference/config/functionality/arguments/integer.html#name",
    "title": "Integer",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#required",
    "href": "reference/config/functionality/arguments/integer.html#required",
    "title": "Integer",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_integer\n  type: integer\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#type",
    "href": "reference/config/functionality/arguments/integer.html#type",
    "title": "Integer",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html",
    "href": "reference/config/functionality/arguments/file.html",
    "title": "File",
    "section": "",
    "text": "A file type argument has a string value that points to a file or folder path.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#alternatives",
    "href": "reference/config/functionality/arguments/file.html#alternatives",
    "title": "File",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#create_parent",
    "href": "reference/config/functionality/arguments/file.html#create_parent",
    "title": "File",
    "section": "create_parent",
    "text": "create_parent\nType: Boolean\nIf the output filename is a path and it does not exist, create it before executing the script (only for direction: output).\nExample:\n- name: --my_file\n  type: file\n  direction: output\n  create_parent: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#default",
    "href": "reference/config/functionality/arguments/file.html#default",
    "title": "File",
    "section": "default",
    "text": "default\nType: Path / List of Path\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_file\n  type: file\n  default: data.csv"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#description",
    "href": "reference/config/functionality/arguments/file.html#description",
    "title": "File",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#direction",
    "href": "reference/config/functionality/arguments/file.html#direction",
    "title": "File",
    "section": "direction",
    "text": "direction\nType: Direction\nMakes this argument an input or an output, as in does the file/folder needs to be read or written. input by default.\nExample:\n- name: --my_output_file\n  type: file\n  direction: output"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#example",
    "href": "reference/config/functionality/arguments/file.html#example",
    "title": "File",
    "section": "example",
    "text": "example\nType: Path / List of Path\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_file\n  type: file\n  example: data.csv"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#info",
    "href": "reference/config/functionality/arguments/file.html#info",
    "title": "File",
    "section": "info",
    "text": "info\nType: Json\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#multiple",
    "href": "reference/config/functionality/arguments/file.html#multiple",
    "title": "File",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_files\n  type: file\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_files=firstFile.csv:anotherFile.csv:yetAnother.csv"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#multiple_sep",
    "href": "reference/config/functionality/arguments/file.html#multiple_sep",
    "title": "File",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_files\n  type: file\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_files=firstFile.csv,anotherFile.csv,yetAnother.csv"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#must_exist",
    "href": "reference/config/functionality/arguments/file.html#must_exist",
    "title": "File",
    "section": "must_exist",
    "text": "must_exist\nType: Boolean\nChecks whether the file or folder exists. For input files, this check will happen before the execution of the script, while for output files the check will happen afterwards.\nExample:\n- name: --my_file\n  type: file\n  must_exist: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#name",
    "href": "reference/config/functionality/arguments/file.html#name",
    "title": "File",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#required",
    "href": "reference/config/functionality/arguments/file.html#required",
    "title": "File",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_file\n  type: file\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#type",
    "href": "reference/config/functionality/arguments/file.html#type",
    "title": "File",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/index.html",
    "href": "reference/config/functionality/arguments/index.html",
    "title": "Argument",
    "section": "",
    "text": "For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:\n\nstring\nfile\ninteger\ndouble\nboolean\nboolean_true\nboolean_false\n\nExample:\narguments:\n  - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    direction: output\n    required: false\n    multiple: true\n    multiple_sep: \",\"\n  - name: --bar\n    type: string"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html",
    "href": "reference/config/functionality/arguments/boolean_false.html",
    "title": "Boolean_False",
    "section": "",
    "text": "An argument of the boolean_false type acts like an inverted boolean flag with a default value of true. When called as an argument it sets the boolean to false.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#alternatives",
    "href": "reference/config/functionality/arguments/boolean_false.html#alternatives",
    "title": "Boolean_False",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#description",
    "href": "reference/config/functionality/arguments/boolean_false.html#description",
    "title": "Boolean_False",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#info",
    "href": "reference/config/functionality/arguments/boolean_false.html#info",
    "title": "Boolean_False",
    "section": "info",
    "text": "info\nType: Json\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#name",
    "href": "reference/config/functionality/arguments/boolean_false.html#name",
    "title": "Boolean_False",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --no-log, -n or no-log. The number of dashes determines how values can be passed:\n\n--no-log is a long option, which can be passed with executable_name --no-log\n-n is a short option, which can be passed with executable_name -n\nno-log is an argument, which can be passed with executable_name no-log"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#type",
    "href": "reference/config/functionality/arguments/boolean_false.html#type",
    "title": "Boolean_False",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html",
    "href": "reference/config/functionality/arguments/boolean_true.html",
    "title": "Boolean_True",
    "section": "",
    "text": "An argument of the boolean_true type acts like a boolean flag with a default value of false. When called as an argument it sets the boolean to true.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#alternatives",
    "href": "reference/config/functionality/arguments/boolean_true.html#alternatives",
    "title": "Boolean_True",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#description",
    "href": "reference/config/functionality/arguments/boolean_true.html#description",
    "title": "Boolean_True",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#info",
    "href": "reference/config/functionality/arguments/boolean_true.html#info",
    "title": "Boolean_True",
    "section": "info",
    "text": "info\nType: Json\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#name",
    "href": "reference/config/functionality/arguments/boolean_true.html#name",
    "title": "Boolean_True",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --silent, -s or silent. The number of dashes determines how values can be passed:\n\n--silent is a long option, which can be passed with executable_name --silent\n-s is a short option, which can be passed with executable_name -s\nsilent is an argument, which can be passed with executable_name silent"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#type",
    "href": "reference/config/functionality/arguments/boolean_true.html#type",
    "title": "Boolean_True",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html",
    "href": "reference/config/functionality/arguments/boolean.html",
    "title": "Boolean",
    "section": "",
    "text": "A boolean type argument has two possible values: true or false.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#alternatives",
    "href": "reference/config/functionality/arguments/boolean.html#alternatives",
    "title": "Boolean",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#default",
    "href": "reference/config/functionality/arguments/boolean.html#default",
    "title": "Boolean",
    "section": "default",
    "text": "default\nType: Boolean / List of Boolean\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_boolean\n  type: boolean\n  default: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#description",
    "href": "reference/config/functionality/arguments/boolean.html#description",
    "title": "Boolean",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#example",
    "href": "reference/config/functionality/arguments/boolean.html#example",
    "title": "Boolean",
    "section": "example",
    "text": "example\nType: Boolean / List of Boolean\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_boolean\n  type: boolean\n  example: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#info",
    "href": "reference/config/functionality/arguments/boolean.html#info",
    "title": "Boolean",
    "section": "info",
    "text": "info\nType: Json\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#multiple",
    "href": "reference/config/functionality/arguments/boolean.html#multiple",
    "title": "Boolean",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_boolean\n  type: boolean\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_boolean=true:true:false"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#multiple_sep",
    "href": "reference/config/functionality/arguments/boolean.html#multiple_sep",
    "title": "Boolean",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_boolean\n  type: boolean\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_boolean=true,true,false"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#name",
    "href": "reference/config/functionality/arguments/boolean.html#name",
    "title": "Boolean",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --trim, -t or trim. The number of dashes determines how values can be passed:\n\n--trim is a long option, which can be passed with executable_name --trim\n-t is a short option, which can be passed with executable_name -t\ntrim is an argument, which can be passed with executable_name trim"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#required",
    "href": "reference/config/functionality/arguments/boolean.html#required",
    "title": "Boolean",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_boolean\n  type: boolean\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#type",
    "href": "reference/config/functionality/arguments/boolean.html#type",
    "title": "Boolean",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html",
    "href": "reference/config/functionality/arguments/string.html",
    "title": "String",
    "section": "",
    "text": "A string type argument has a value made up of an ordered sequences of characters, like “Hello” or “I’m a string”.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#alternatives",
    "href": "reference/config/functionality/arguments/string.html#alternatives",
    "title": "String",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#choices",
    "href": "reference/config/functionality/arguments/string.html#choices",
    "title": "String",
    "section": "choices",
    "text": "choices\nType: List of String\nLimit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.\nExample:\n- name: --language\n  type: string\n  choices: [\"python\", \"r\", \"javascript\"]"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#default",
    "href": "reference/config/functionality/arguments/string.html#default",
    "title": "String",
    "section": "default",
    "text": "default\nType: String / List of String\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_string\n  type: string\n  default: \"The answer is 42\""
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#description",
    "href": "reference/config/functionality/arguments/string.html#description",
    "title": "String",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#example",
    "href": "reference/config/functionality/arguments/string.html#example",
    "title": "String",
    "section": "example",
    "text": "example\nType: String / List of String\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_string\n  type: string\n  example: \"Hello World\""
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#info",
    "href": "reference/config/functionality/arguments/string.html#info",
    "title": "String",
    "section": "info",
    "text": "info\nType: Json\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#multiple",
    "href": "reference/config/functionality/arguments/string.html#multiple",
    "title": "String",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_string\n  type: string\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_string=Marc:Susan:Paul"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#multiple_sep",
    "href": "reference/config/functionality/arguments/string.html#multiple_sep",
    "title": "String",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_string\n  type: string\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_string=Marc,Susan,Paul"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#name",
    "href": "reference/config/functionality/arguments/string.html#name",
    "title": "String",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#required",
    "href": "reference/config/functionality/arguments/string.html#required",
    "title": "String",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_string\n  type: string\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#type",
    "href": "reference/config/functionality/arguments/string.html#type",
    "title": "String",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html",
    "href": "reference/config/functionality/arguments/long.html",
    "title": "Long",
    "section": "",
    "text": "An long type argument has a numeric value without decimal points.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#alternatives",
    "href": "reference/config/functionality/arguments/long.html#alternatives",
    "title": "Long",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#choices",
    "href": "reference/config/functionality/arguments/long.html#choices",
    "title": "Long",
    "section": "choices",
    "text": "choices\nType: List of Long\nLimit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.\nExample:\n- name: --values\n  type: long\n  choices: [1024, 2048, 4096]"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#default",
    "href": "reference/config/functionality/arguments/long.html#default",
    "title": "Long",
    "section": "default",
    "text": "default\nType: Long / List of Long\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_long\n  type: long\n  default: 100"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#description",
    "href": "reference/config/functionality/arguments/long.html#description",
    "title": "Long",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#example",
    "href": "reference/config/functionality/arguments/long.html#example",
    "title": "Long",
    "section": "example",
    "text": "example\nType: Long / List of Long\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_long\n  type: long\n  example: 100"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#info",
    "href": "reference/config/functionality/arguments/long.html#info",
    "title": "Long",
    "section": "info",
    "text": "info\nType: Json\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#max",
    "href": "reference/config/functionality/arguments/long.html#max",
    "title": "Long",
    "section": "max",
    "text": "max\nType: Long\nMaximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with min to clamp values.\nExample:\n- name: --my_long\n  type: long\n  max: 150"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#min",
    "href": "reference/config/functionality/arguments/long.html#min",
    "title": "Long",
    "section": "min",
    "text": "min\nType: Long\nMinimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with max to clamp values.\nExample:\n- name: --my_long\n  type: long\n  min: 50"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#multiple",
    "href": "reference/config/functionality/arguments/long.html#multiple",
    "title": "Long",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_long\n  type: long\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_long=10:80:152"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#multiple_sep",
    "href": "reference/config/functionality/arguments/long.html#multiple_sep",
    "title": "Long",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_long\n  type: long\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_long=10:80:152"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#name",
    "href": "reference/config/functionality/arguments/long.html#name",
    "title": "Long",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#required",
    "href": "reference/config/functionality/arguments/long.html#required",
    "title": "Long",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_long\n  type: long\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#type",
    "href": "reference/config/functionality/arguments/long.html#type",
    "title": "Long",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html",
    "href": "reference/config/functionality/resources/nextflowScript.html",
    "title": "Nextflow Script",
    "section": "",
    "text": "A Nextflow script. Work in progress; added mainly for annotation at the moment."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#dest",
    "href": "reference/config/functionality/resources/nextflowScript.html#dest",
    "title": "Nextflow Script",
    "section": "dest",
    "text": "dest\nType: String\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#entrypoint",
    "href": "reference/config/functionality/resources/nextflowScript.html#entrypoint",
    "title": "Nextflow Script",
    "section": "entrypoint",
    "text": "entrypoint\nType: String\nThe name of the workflow to be executed."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#is_executable",
    "href": "reference/config/functionality/resources/nextflowScript.html#is_executable",
    "title": "Nextflow Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#path",
    "href": "reference/config/functionality/resources/nextflowScript.html#path",
    "title": "Nextflow Script",
    "section": "path",
    "text": "path\nType: String\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#text",
    "href": "reference/config/functionality/resources/nextflowScript.html#text",
    "title": "Nextflow Script",
    "section": "text",
    "text": "text\nType: String\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#type",
    "href": "reference/config/functionality/resources/nextflowScript.html#type",
    "title": "Nextflow Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a Nextflow script."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html",
    "href": "reference/config/functionality/resources/javaScriptScript.html",
    "title": "Java Script Script",
    "section": "",
    "text": "An executable JavaScript script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#dest",
    "href": "reference/config/functionality/resources/javaScriptScript.html#dest",
    "title": "Java Script Script",
    "section": "dest",
    "text": "dest\nType: String\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#is_executable",
    "href": "reference/config/functionality/resources/javaScriptScript.html#is_executable",
    "title": "Java Script Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#path",
    "href": "reference/config/functionality/resources/javaScriptScript.html#path",
    "title": "Java Script Script",
    "section": "path",
    "text": "path\nType: String\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#text",
    "href": "reference/config/functionality/resources/javaScriptScript.html#text",
    "title": "Java Script Script",
    "section": "text",
    "text": "text\nType: String\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#type",
    "href": "reference/config/functionality/resources/javaScriptScript.html#type",
    "title": "Java Script Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a JavaScript script."
  },
  {
    "objectID": "reference/config/functionality/resources/index.html",
    "href": "reference/config/functionality/resources/index.html",
    "title": "Resource",
    "section": "",
    "text": "Resources are files that support the component. The first resource should be a script that will be executed when the functionality is run. Additional resources will be copied to the same directory.\nCommon properties:\n\ntype: file / r_script / python_script / bash_script / javascript_script / scala_script / csharp_script, specifies the type of the resource. The first resource cannot be of type file. When the type is not specified, the default type is simply file.\ndest: filename, the resulting name of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter.\npath: path/to/file, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text.\ntext: …multiline text…, the content of the resulting file specified as a string. Mutually exclusive with path.\nis_executable: true / false, whether the resulting resource file should be made executable.\n\nExample:\nresources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt"
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html",
    "href": "reference/config/functionality/resources/plainFile.html",
    "title": "Plain File",
    "section": "",
    "text": "A plain file. This can only be used as a supporting resource for the main script or unit tests."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#dest",
    "href": "reference/config/functionality/resources/plainFile.html#dest",
    "title": "Plain File",
    "section": "dest",
    "text": "dest\nType: String\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#is_executable",
    "href": "reference/config/functionality/resources/plainFile.html#is_executable",
    "title": "Plain File",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#path",
    "href": "reference/config/functionality/resources/plainFile.html#path",
    "title": "Plain File",
    "section": "path",
    "text": "path\nType: String\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#text",
    "href": "reference/config/functionality/resources/plainFile.html#text",
    "title": "Plain File",
    "section": "text",
    "text": "text\nType: String\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#type",
    "href": "reference/config/functionality/resources/plainFile.html#type",
    "title": "Plain File",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a plain file."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html",
    "href": "reference/config/functionality/resources/pythonScript.html",
    "title": "Python Script",
    "section": "",
    "text": "An executable Python script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#dest",
    "href": "reference/config/functionality/resources/pythonScript.html#dest",
    "title": "Python Script",
    "section": "dest",
    "text": "dest\nType: String\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#is_executable",
    "href": "reference/config/functionality/resources/pythonScript.html#is_executable",
    "title": "Python Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#path",
    "href": "reference/config/functionality/resources/pythonScript.html#path",
    "title": "Python Script",
    "section": "path",
    "text": "path\nType: String\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#text",
    "href": "reference/config/functionality/resources/pythonScript.html#text",
    "title": "Python Script",
    "section": "text",
    "text": "text\nType: String\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#type",
    "href": "reference/config/functionality/resources/pythonScript.html#type",
    "title": "Python Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a Python script."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html",
    "href": "reference/config/functionality/resources/cSharpScript.html",
    "title": "C Sharp Script",
    "section": "",
    "text": "An executable C# script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#dest",
    "href": "reference/config/functionality/resources/cSharpScript.html#dest",
    "title": "C Sharp Script",
    "section": "dest",
    "text": "dest\nType: String\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#is_executable",
    "href": "reference/config/functionality/resources/cSharpScript.html#is_executable",
    "title": "C Sharp Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#path",
    "href": "reference/config/functionality/resources/cSharpScript.html#path",
    "title": "C Sharp Script",
    "section": "path",
    "text": "path\nType: String\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#text",
    "href": "reference/config/functionality/resources/cSharpScript.html#text",
    "title": "C Sharp Script",
    "section": "text",
    "text": "text\nType: String\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#type",
    "href": "reference/config/functionality/resources/cSharpScript.html#type",
    "title": "C Sharp Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a C# script."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html",
    "href": "reference/config/functionality/resources/bashScript.html",
    "title": "Bash Script",
    "section": "",
    "text": "An executable Bash script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#dest",
    "href": "reference/config/functionality/resources/bashScript.html#dest",
    "title": "Bash Script",
    "section": "dest",
    "text": "dest\nType: String\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#is_executable",
    "href": "reference/config/functionality/resources/bashScript.html#is_executable",
    "title": "Bash Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#path",
    "href": "reference/config/functionality/resources/bashScript.html#path",
    "title": "Bash Script",
    "section": "path",
    "text": "path\nType: String\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#text",
    "href": "reference/config/functionality/resources/bashScript.html#text",
    "title": "Bash Script",
    "section": "text",
    "text": "text\nType: String\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#type",
    "href": "reference/config/functionality/resources/bashScript.html#type",
    "title": "Bash Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a Bash script."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html",
    "href": "reference/config/functionality/resources/scalaScript.html",
    "title": "Scala Script",
    "section": "",
    "text": "An executable Scala script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#dest",
    "href": "reference/config/functionality/resources/scalaScript.html#dest",
    "title": "Scala Script",
    "section": "dest",
    "text": "dest\nType: String\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#is_executable",
    "href": "reference/config/functionality/resources/scalaScript.html#is_executable",
    "title": "Scala Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#path",
    "href": "reference/config/functionality/resources/scalaScript.html#path",
    "title": "Scala Script",
    "section": "path",
    "text": "path\nType: String\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#text",
    "href": "reference/config/functionality/resources/scalaScript.html#text",
    "title": "Scala Script",
    "section": "text",
    "text": "text\nType: String\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#type",
    "href": "reference/config/functionality/resources/scalaScript.html#type",
    "title": "Scala Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a Scala script."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html",
    "href": "reference/config/functionality/resources/rScript.html",
    "title": "R Script",
    "section": "",
    "text": "An executable R script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#dest",
    "href": "reference/config/functionality/resources/rScript.html#dest",
    "title": "R Script",
    "section": "dest",
    "text": "dest\nType: String\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#is_executable",
    "href": "reference/config/functionality/resources/rScript.html#is_executable",
    "title": "R Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#path",
    "href": "reference/config/functionality/resources/rScript.html#path",
    "title": "R Script",
    "section": "path",
    "text": "path\nType: String\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#text",
    "href": "reference/config/functionality/resources/rScript.html#text",
    "title": "R Script",
    "section": "text",
    "text": "text\nType: String\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#type",
    "href": "reference/config/functionality/resources/rScript.html#type",
    "title": "R Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a R script."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html",
    "href": "reference/config/functionality/resources/executable.html",
    "title": "Executable",
    "section": "",
    "text": "An executable file."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#dest",
    "href": "reference/config/functionality/resources/executable.html#dest",
    "title": "Executable",
    "section": "dest",
    "text": "dest\nType: String\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#is_executable",
    "href": "reference/config/functionality/resources/executable.html#is_executable",
    "title": "Executable",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#path",
    "href": "reference/config/functionality/resources/executable.html#path",
    "title": "Executable",
    "section": "path",
    "text": "path\nType: String\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#text",
    "href": "reference/config/functionality/resources/executable.html#text",
    "title": "Executable",
    "section": "text",
    "text": "text\nType: String\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#type",
    "href": "reference/config/functionality/resources/executable.html#type",
    "title": "Executable",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as an executable."
  },
  {
    "objectID": "reference/cli/ns_test.html",
    "href": "reference/cli/ns_test.html",
    "title": "Viash Ns Test",
    "section": "",
    "text": "Test a namespace containing many viash config files.\nUsage:\nviash ns test [-n nmspc] [-s src] [-p docker] [--parallel] [--tsv file.tsv] [--append]\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--append, -a\nAppend to tsv instead of overwrite\nBoolean\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--cpus\nThe maximum number of (logical) cpus a component is allowed to use.\nInt\n\n\n--keep, -k\nWhether or not to keep temporary files. By default, files will be deleted if all goes well but remain when an error occurs. By specifying –keep true, the temporary files will always be retained, whereas –keep false will always delete them. The temporary directory can be overwritten by setting defining a VIASH_TEMP directory.\nString\n\n\n--memory\nThe maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB.\nString\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--query, -q\nFilter which components get selected by component and namespace name. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by component name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace name. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--tsv, -t\nPath to write a summary of the test results to.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/config_inject.html",
    "href": "reference/cli/config_inject.html",
    "title": "Viash Config Inject",
    "section": "",
    "text": "Inject a Viash header into the main script of a Viash component.\nUsage:\nviash config inject config.vsh.yaml\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/index.html",
    "href": "reference/cli/index.html",
    "title": "CLI",
    "section": "",
    "text": "These are the available commands available on the Command Line Interface:\n\n\n  \n    Viash Build: \n  \n  \n    Viash Config Inject: \n  \n  \n    Viash Config View: \n  \n  \n    Viash Ns Build: \n  \n  \n    Viash Ns Exec: \n  \n  \n    Viash Ns List: \n  \n  \n    Viash Ns Test: \n  \n  \n    Viash Run: \n  \n  \n    Viash Test: \n  \n\n\nNo matching items"
  },
  {
    "objectID": "reference/cli/build.html",
    "href": "reference/cli/build.html",
    "title": "Viash Build",
    "section": "",
    "text": "Build an executable from the provided viash config file.\nUsage:\nviash build config.vsh.yaml -o output [-p docker] [-m] [-s]\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--output, -o\nPath to directory in which the executable and any resources is built to. Default: “output/”. This is a required argument.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--push\nWhether or not to push the container to a Docker registry [Docker Platform only].\nBoolean\n\n\n--setup, -s\nWhich setup strategy for creating the container to use [Docker Platform only].\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/config_view.html",
    "href": "reference/cli/config_view.html",
    "title": "Viash Config View",
    "section": "",
    "text": "View the config file after parsing.\nUsage:\nviash config view config.vsh.yaml\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--format, -f\nWhich output format to use.\nString\n\n\n--parse_argument_groups\nWhether or not to postprocess each component’s argument groups.\nBoolean\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/test.html",
    "href": "reference/cli/test.html",
    "title": "Viash Test",
    "section": "",
    "text": "Test the component using the tests defined in the viash config file.\nUsage:\nviash test config.vsh.yaml [-p docker] [-k true/false]\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--cpus\nThe maximum number of (logical) cpus a component is allowed to use.\nInt\n\n\n--keep, -k\nWhether or not to keep temporary files. By default, files will be deleted if all goes well but remain when an error occurs. By specifying –keep true, the temporary files will always be retained, whereas –keep false will always delete them. The temporary directory can be overwritten by setting defining a VIASH_TEMP directory.\nString\n\n\n--memory\nThe maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/run.html",
    "href": "reference/cli/run.html",
    "title": "Viash Run",
    "section": "",
    "text": "Executes a viash component from the provided viash config file. viash generates a temporary executable and immediately executes it with the given parameters.\nUsage:\nviash run config.vsh.yaml [-p docker] [-k true/false]  -- [arguments for script]\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--cpus\nThe maximum number of (logical) cpus a component is allowed to use.\nInt\n\n\n--keep, -k\nWhether or not to keep temporary files. By default, files will be deleted if all goes well but remain when an error occurs. By specifying –keep true, the temporary files will always be retained, whereas –keep false will always delete them. The temporary directory can be overwritten by setting defining a VIASH_TEMP directory.\nString\n\n\n--memory\nThe maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/ns_list.html",
    "href": "reference/cli/ns_list.html",
    "title": "Viash Ns List",
    "section": "",
    "text": "List a namespace containing many viash config files.\nUsage:\nviash ns list [-n nmspc] [-s src] [-p docker]\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--format, -f\nWhich output format to use.\nString\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--parse_argument_groups\nWhether or not to postprocess each component’s argument groups.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--query, -q\nFilter which components get selected by component and namespace name. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by component name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace name. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/ns_build.html",
    "href": "reference/cli/ns_build.html",
    "title": "Viash Ns Build",
    "section": "",
    "text": "Build a namespace from many viash config files.\nUsage:\nviash ns build [-n nmspc] [-s src] [-t target] [-p docker] [--setup] [--push] [--parallel] [--flatten]\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--flatten, -f\nFlatten the target builds, handy for building one platform to a bin directory.\nBoolean\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--push\nWhether or not to push the container to a Docker registry [Docker Platform only].\nBoolean\n\n\n--query, -q\nFilter which components get selected by component and namespace name. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by component name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace name. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--setup\nWhich setup strategy for creating the container to use [Docker Platform only].\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--target, -t\nA target directory to build the executables into. Default: target/.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/ns_exec.html",
    "href": "reference/cli/ns_exec.html",
    "title": "Viash Ns Exec",
    "section": "",
    "text": "Execute a command for all found Viash components. The syntax of this command is inspired by find . -exec echo {} \\;.\nThe following fields are automatically replaced:\n\n{} | {path}: path to the config file\n{abs-path}: absolute path to the config file\n{dir}: path to the parent directory of the config file\n{abs-dir}: absolute path to the directory of the config file\n{main-script}: path to the main script (if any)\n{abs-main-script}: absolute path to the main script (if any)\n{functionality-name}: name of the component\n{namespace}: namespace of the component\n{platform}: selected platform id (only when –apply_platform is used)\n\nA command suffixed by \\; (or nothing) will execute one command for each of the Viash components, whereas a command suffixed by + will execute one command for all Viash components.\nUsage:\nviash ns exec 'echo {path} \\\\;'\nviash ns exec 'chmod +x {main-script} +'\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--apply_platform, -a\nFills in the {platform} field by applying each platform to the config separately. Note that this results in the provided command being applied once for every platform that matches the –platform regex.\nBoolean\n\n\n--cmd\nThe command to execute for each viash config file in the namespace. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--dry_run, -d\nPerform a dry run.\nBoolean\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--query, -q\nFilter which components get selected by component and namespace name. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by component name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace name. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/viash_code_block/index.html",
    "href": "reference/viash_code_block/index.html",
    "title": "Viash Code Block",
    "section": "",
    "text": "Example:\nWhen running a Viash component with viash run, Viash will wrap your script into a Bash executable. In doing so, it strips away the “Viash placeholder” code block and replaces it by a bit of code to your script for reading any parameter values at runtime."
  },
  {
    "objectID": "reference/viash_code_block/index.html#recognizing-the-viash-placeholder-code-block",
    "href": "reference/viash_code_block/index.html#recognizing-the-viash-placeholder-code-block",
    "title": "Viash Code Block",
    "section": "Recognizing the Viash placeholder code block",
    "text": "Recognizing the Viash placeholder code block\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nusing System.IO;\n\n// VIASH START\nvar par = new {\n  input = \"path/to/file.txt\",\n  output = \"output.txt\"\n};\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nconst fs = require('fs');\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nimport shutil\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\n## VIASH START\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\ncase class ViashPar(input: String, output: String)\nval par = ViashPar(\n  \"path/to/file.txt\",\n  \"output.txt\"\n)\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)\n\n\n\nA “Viash placeholder” code block is the section between the VIASH START and VIASH END comments."
  },
  {
    "objectID": "reference/viash_code_block/index.html#what-happens-at-runtime",
    "href": "reference/viash_code_block/index.html#what-happens-at-runtime",
    "title": "Viash Code Block",
    "section": "What happens at runtime",
    "text": "What happens at runtime\nBy passing arguments to the component, Viash will add your parameter values to your script by replacing the Viash placeholder code block. If no such code block exists yet, the parameters are inserted at the top of the file.\nThe resulting code block will contain two maps (or dictionaries): par and meta. The par map contains the parameter values specified by the user, and meta contains additional information on the current runtime environment. Note that for Bash scripts, the par and meta maps are flattened into separate environment variables."
  },
  {
    "objectID": "reference/viash_code_block/index.html#previewing-the-par-and-meta-objects",
    "href": "reference/viash_code_block/index.html#previewing-the-par-and-meta-objects",
    "title": "Viash Code Block",
    "section": "Previewing the par and meta objects",
    "text": "Previewing the par and meta objects\nTo get insight into how par and meta are defined, you can run viash config inject to replace the current parameter placeholder with an auto-generated parameter placeholder.\n\n\n\n\n\n\nWarning\n\n\n\nThis will change the contents of your script!\n\n\n\nBashC#JavaScriptPythonRScala\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.sh now contains the following code:\n\n#!/bin/bash\n\n## VIASH START\n# The following code has been auto-generated by Viash.\npar_input='file.txt'\npar_output='output.txt'\nmeta_functionality_name='example_bash'\nmeta_resources_dir='/tmp/viash_inject_example_bash885854841008659881'\nmeta_executable='/tmp/viash_inject_example_bash885854841008659881/example_bash'\nmeta_config='/tmp/viash_inject_example_bash885854841008659881/.config.vsh.yaml'\nmeta_temp_dir='/tmp'\nmeta_cpus='123'\nmeta_memory_b='123'\nmeta_memory_kb='123'\nmeta_memory_mb='123'\nmeta_memory_gb='123'\nmeta_memory_tb='123'\nmeta_memory_pb='123'\n\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.csx now contains the following code:\n\nusing System.IO;\n\n// VIASH START\n// The following code has been auto-generated by Viash.\nvar par = new {\n  input = @\"file.txt\",\n  output = @\"output.txt\"\n};\nvar meta = new {\n  functionality_name = @\"example_csharp\",\n  resources_dir = @\"/tmp/viash_inject_example_csharp17808847182428072754\",\n  executable = @\"/tmp/viash_inject_example_csharp17808847182428072754/example_csharp\",\n  config = @\"/tmp/viash_inject_example_csharp17808847182428072754/.config.vsh.yaml\",\n  temp_dir = @\"/tmp\",\n  cpus = Convert.ToInt32(@\"123\"),\n  memory_b = Convert.ToInt64(@\"123\"),\n  memory_kb = Convert.ToInt64(@\"123\"),\n  memory_mb = Convert.ToInt64(@\"123\"),\n  memory_gb = Convert.ToInt64(@\"123\"),\n  memory_tb = Convert.ToInt64(@\"123\"),\n  memory_pb = Convert.ToInt64(@\"123\")\n};\n\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.js now contains the following code:\n\nconst fs = require('fs');\n\n// VIASH START\n// The following code has been auto-generated by Viash.\nlet par = {\n  'input': String.raw`file.txt`,\n  'output': String.raw`output.txt`\n};\nlet meta = {\n  'functionality_name': String.raw`example_js`,\n  'resources_dir': String.raw`/tmp/viash_inject_example_js9496814000484000757`,\n  'executable': String.raw`/tmp/viash_inject_example_js9496814000484000757/example_js`,\n  'config': String.raw`/tmp/viash_inject_example_js9496814000484000757/.config.vsh.yaml`,\n  'temp_dir': String.raw`/tmp`,\n  'cpus': parseInt(String.raw`123`),\n  'memory_b': parseInt(String.raw`123`),\n  'memory_kb': parseInt(String.raw`123`),\n  'memory_mb': parseInt(String.raw`123`),\n  'memory_gb': parseInt(String.raw`123`),\n  'memory_tb': parseInt(String.raw`123`),\n  'memory_pb': parseInt(String.raw`123`)\n};\n\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.py now contains the following code:\n\nimport shutil\n\n## VIASH START\n# The following code has been auto-generated by Viash.\npar = {\n  'input': r'file.txt',\n  'output': r'output.txt'\n}\nmeta = {\n  'functionality_name': r'example_python',\n  'resources_dir': r'/tmp/viash_inject_example_python13979925830851613682',\n  'executable': r'/tmp/viash_inject_example_python13979925830851613682/example_python',\n  'config': r'/tmp/viash_inject_example_python13979925830851613682/.config.vsh.yaml',\n  'temp_dir': r'/tmp',\n  'cpus': int(r'123'),\n  'memory_b': int(r'123'),\n  'memory_kb': int(r'123'),\n  'memory_mb': int(r'123'),\n  'memory_gb': int(r'123'),\n  'memory_tb': int(r'123'),\n  'memory_pb': int(r'123')\n}\n\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.R now contains the following code:\n\n## VIASH START\n# The following code has been auto-generated by Viash.\n# treat warnings as errors\n.viash_orig_warn &lt;- options(warn = 2)\n\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\nmeta &lt;- list(\n  \"functionality_name\" = 'example_r',\n  \"resources_dir\" = '/tmp/viash_inject_example_r16191339341300834992',\n  \"executable\" = '/tmp/viash_inject_example_r16191339341300834992/example_r',\n  \"config\" = '/tmp/viash_inject_example_r16191339341300834992/.config.vsh.yaml',\n  \"temp_dir\" = '/tmp',\n  \"cpus\" = as.integer('123'),\n  \"memory_b\" = bit64::as.integer64('123'),\n  \"memory_kb\" = bit64::as.integer64('123'),\n  \"memory_mb\" = bit64::as.integer64('123'),\n  \"memory_gb\" = bit64::as.integer64('123'),\n  \"memory_tb\" = bit64::as.integer64('123'),\n  \"memory_pb\" = bit64::as.integer64('123')\n)\n\n\n# restore original warn setting\noptions(.viash_orig_warn)\nrm(.viash_orig_warn)\n\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.scala now contains the following code:\n\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\n// The following code has been auto-generated by Viash.\ncase class ViashPar(\n  input: Option[String],\n  output: Option[String]\n)\nval par = ViashPar(\n  Some(\"\"\"file.txt\"\"\"),\n  Some(\"\"\"output.txt\"\"\")\n)\ncase class ViashMeta(\n  functionality_name: Option[String],\n  resources_dir: Option[String],\n  executable: Option[String],\n  config: Option[String],\n  temp_dir: Option[String],\n  cpus: Option[Int],\n  memory_b: Option[Long],\n  memory_kb: Option[Long],\n  memory_mb: Option[Long],\n  memory_gb: Option[Long],\n  memory_tb: Option[Long],\n  memory_pb: Option[Long]\n)\nval meta = ViashMeta(\n  Some(\"\"\"example_scala\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala3411920978218718057\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala3411920978218718057/example_scala\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala3411920978218718057/.config.vsh.yaml\"\"\"),\n  Some(\"\"\"/tmp\"\"\"),\n  Some(\"\"\"123\"\"\".toInt),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong)\n)\n\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)"
  },
  {
    "objectID": "reference/viash_code_block/index.html#runtime-parameters-in-par",
    "href": "reference/viash_code_block/index.html#runtime-parameters-in-par",
    "title": "Viash Code Block",
    "section": "Runtime parameters in par",
    "text": "Runtime parameters in par\nThe par object (or par_ environment variables in Bash) will contain argument values passed at runtime. For example, passing --input foo.txt will result in a par[\"input\"] being equal to \"foo.txt\".\n\n\n\n\n\n\nTip\n\n\n\nTry adding more arguments with different file types to see what effect this has on the resulting placeholder."
  },
  {
    "objectID": "reference/viash_code_block/index.html#meta-variables-in-meta",
    "href": "reference/viash_code_block/index.html#meta-variables-in-meta",
    "title": "Viash Code Block",
    "section": "Meta variables in meta",
    "text": "Meta variables in meta\nMeta-variables offer information on the runtime environment which you can use from within your script.\n\ncpus (integer): The maximum number of (logical) cpus a component is allowed to use. By default, this value will be undefined.\nconfig (string): Path to the processed Viash config YAML. This file is usually called .config.vsh.yaml and resides next to the wrapped executable (see below). This YAML file is useful for doing some runtime introspection of the component for writing generic unit tests.\nexecutable (string): The executable being used at runtime; that is, the wrapped script. This variable is used in unit tests.\nfunctionality_name (string): The name of the component, useful for logging.\nmemory_* (long): The maximum amount of memory a component is allowed to allocate. The following denominations are provided: memory_b, memory_kb, memory_mb, memory_gb, memory_tb, memory_pb. By default, this value will be undefined.\nresources_dir (string): Path to where the resources are stored.\ntemp_dir (string): A temporary directory in which your script is allowed to create new temporary files / directories. By default, this will be set to the VIASH_TEMP environment variable. When the VIASH_TEMP variable is undefined, POSIX TMPDIR or /tmp is used instead.\n\n\ncpus (integer)\nThis field specifies the maximum number of (logical) cpus a component is allowed to use. This is useful when parallellizing your component in such a way that integrates very nicely with pipeline frameworks such as Nextflow. Below is an example usage of the cpus meta-variable.\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=\"path/to/file.txt\"\npar_output=\"output.txt\"\nmeta_cpus=10\n## VIASH END\n\n# Pass number of cores to the popular_software_tool. Set the default to 1.\n./popular_software_tool --ncores ${meta_cpus:-1}\n\n\nNo example available yet.\n\n\nNo example available yet.\n\n\nfrom multiprocessing import Pool\n\n## VIASH START\npar = {}\nmeta = {\"cpus\": 1}\n## VIASH END\n\ndef my_fun(x):\n    return x + \"!\"\nmy_data = [\"hello\", \"world\"]\n\nwith Pool(processes=meta.get(\"cpus\", 1)) as pool:\n    out = pool.map(my_fun, my_data)\n\n\nlibrary(furrr)\n\n## VIASH START\npar &lt;- list()\nmeta &lt;- list(\n  cpus = 1L\n)\n## VIASH END\n\nif (is.null(meta$cpus)) meta$cpus &lt;- 1\nplan(multisession, workers = meta$cpus)\n\nmy_data &lt;- c(\"hello\", \"world\")\nout = future_map(\n  my_data, \n  function(x) {\n    paste0(x, \"!\")\n  }\n)\n\n\nimport scala.collection.parallel._\nimport java.util.concurrent.ForkJoinPool\n\n// VIASH START\n// ...\n// VIASH END\n\nval pc = mutable.ParArray(1, 2, 3)\nval numCores = meta.cores.getOrElse(1)\npc.tasksupport = new ForkJoinTaskSupport(new ForkJoinPool(numCores))\npc map { _ + 1 }\n\n\n\nYou can set the number of cores in your component using any of the following approaches:\n# as a parameter of viash run\nviash run config.vsh.yaml --cpus 10 -- &lt;my component arguments&gt;\n\n# as a parameter of viash test\nviash test config.vsh.yaml --cpus 10\n\n# or as a parameter of the executable\nviash build config.vsh.yaml -o output\noutput/my_executable ---cpus 10\n#                     ↑ notice the triple dash\n\n\nconfig (string)\nPath to the processed Viash config YAML. This file is usually called .config.vsh.yaml and resides next to the wrapped executable (see below). This YAML file is useful for doing some runtime introspection of the component for writing generic unit tests.\n\n\nexecutable (string)\nThe executable being used at runtime; that is, the wrapped script. This variable is used in unit tests.\n#!/usr/bin/env bash\nset -x\n\n\"$meta_executable\" --input input.txt &gt; output.txt\n\n[[ ! -f output.txt ]] && echo \"Output file could not be found!\" && exit 1\ncat output.txt\ngrep -q 'expected output' output.txt\n\necho Done\n\n\nfunctionality_name (string)\nThe name of the component, useful for logging.\n\n\nmemory_* (long)\nThe maximum amount of memory a component is allowed to allocate. The following denominations are provided: memory_b, memory_kb, memory_mb, memory_gb, memory_tb, memory_pb. By default, this value will be undefined.\nYou can set the amount of memory in your component using any of the following approaches:\n# as a parameter of viash run\nviash run config.vsh.yaml --memory 2GB -- &lt;my component arguments&gt;\n\n# as a parameter of viash test\nviash test config.vsh.yaml --memory 2GB\n\n# or as a parameter of the executable\nviash build config.vsh.yaml -o output\noutput/my_executable ---memory 2GB\n#                     ↑ notice the triple dash\n\n\nresources_dir (string)\nThis field specifies the absolute path to where the resources are stored. During the build phase resources are copied or fetched into this directory so they are ready to be read during execution of the script or test scripts.\n\n\ntemp_dir (string)\nA temporary directory in which your script is allowed to create new temporary files / directories. By default, this will be set to the VIASH_TEMP environment variable. When the VIASH_TEMP variable is undefined, the POSIX TMPDIR and other common misspellings will be checked and ultimately /tmp is used as fallback."
  },
  {
    "objectID": "reference/config_mods/index.html",
    "href": "reference/config_mods/index.html",
    "title": "Dynamic Config Modding",
    "section": "",
    "text": "Viash can modify a viash config at runtime using a custom Domain Specific Language (DSL). This allows making dynamic changes to your components or projects.\nAll Viash subcommands have support for the DSL through the -c|--config_mod parameter. The format for these is as follows:\nMultiple config mods can be added by adding more -c|--config_mod parameters:"
  },
  {
    "objectID": "reference/config_mods/index.html#examples",
    "href": "reference/config_mods/index.html#examples",
    "title": "Dynamic Config Modding",
    "section": "Examples",
    "text": "Examples\nChange the version of a component:\nviash build -c '.functionality.version := \"0.3.0\"'\nChange the registry of a docker container:\nviash build -c \\\n  '.platforms[.type == \"docker\"].container_registry := \"url-to-registry\"'\nAdd an author to the list:\nviash build -c '.functionality.authors += { name: \"Mr. T\", role: \"sponsor\" }'\nYou can use dynamic config modding to alter the config of multiple components at once:\nviash ns build \\\n  -c '.functionality.version := \"0.3.0\"' \\\n  -c '.platforms[.type == \"docker\"].container_registry := \"url-to-registry\"' \\\n  -c '.functionality.authors += { name: \"Mr. T\", role: \"sponsor\" }'"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Viash",
    "section": "",
    "text": "Viash is developed and maintained by Data Intuitive.\nYou can find out more information about Viash in our preprint.\nFor more information or support contact us at info@data-intuitive.com."
  },
  {
    "objectID": "about.html#logos",
    "href": "about.html#logos",
    "title": "About Viash",
    "section": "Logos",
    "text": "Logos"
  },
  {
    "objectID": "guide/index.html",
    "href": "guide/index.html",
    "title": "Guide",
    "section": "",
    "text": "A Viash component is a modular software component used in building data pipelines. It consists of a script written in one of the supported scripting languages (Bash, Python, R, Scala, JS, or C#) and a metadata file that outlines its dependencies. Viash components can be converted into standalone executables.\n\n\n    \n      Create a new component: Building a reproducible Viash component.\n    \n    \n      Add dependencies: Adding custom dependencies to a component.\n    \n    \n      Add resources: Accessing additional resources inside a Viash component.\n    \n    \n      Use helper functions: How to load helper functions.\n    \n    \n      Par and meta variables: A showcase of the available variables and meta-variables.\n    \n    \n      Unit testing: How to ensure high quality components.\n    \n\n\nNo matching items"
  },
  {
    "objectID": "guide/index.html#viash-component",
    "href": "guide/index.html#viash-component",
    "title": "Guide",
    "section": "",
    "text": "A Viash component is a modular software component used in building data pipelines. It consists of a script written in one of the supported scripting languages (Bash, Python, R, Scala, JS, or C#) and a metadata file that outlines its dependencies. Viash components can be converted into standalone executables.\n\n\n    \n      Create a new component: Building a reproducible Viash component.\n    \n    \n      Add dependencies: Adding custom dependencies to a component.\n    \n    \n      Add resources: Accessing additional resources inside a Viash component.\n    \n    \n      Use helper functions: How to load helper functions.\n    \n    \n      Par and meta variables: A showcase of the available variables and meta-variables.\n    \n    \n      Unit testing: How to ensure high quality components.\n    \n\n\nNo matching items"
  },
  {
    "objectID": "guide/index.html#viash-project",
    "href": "guide/index.html#viash-project",
    "title": "Guide",
    "section": "Viash Project",
    "text": "Viash Project\nA Viash project is a collection of Viash components, typically designed to work together to perform a specific task. Viash projects enable batch processing, making it easier to handle multiple components and data sets simultaneously.\n\n\n    \n      Structure: \n    \n    \n      Batch processing: \n    \n    \n      Project config: \n    \n    \n      IDE setup: \n    \n\n\nNo matching items"
  },
  {
    "objectID": "guide/index.html#viashnextflow-vdsl3",
    "href": "guide/index.html#viashnextflow-vdsl3",
    "title": "Guide",
    "section": "Viash+Nextflow VDSL3",
    "text": "Viash+Nextflow VDSL3\nVDSL3 is a Nextflow module generated by Viash from a script, allowing users to design and run scalable, reproducible data pipelines without requiring expertise in Nextflow.\n\n\n    \n      Introduction: What is VDSL3?\n    \n    \n      Create a module: \n    \n    \n      Create a pipeline: \n    \n\n\nNo matching items"
  },
  {
    "objectID": "guide/nextflow_vdsl3/introduction.html",
    "href": "guide/nextflow_vdsl3/introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Nextflow is a highly popular and widely-used workflow manager in computational biology, featuring outstanding portability, reproducibility and scalability. However, while Nextflow’s advantages are impressive, developing a Nextflow pipeline can be challenging, requiring significant domain knowledge and verbose code that is labour-intensive. Fortunately, Viash provides a solution to the barriers of Nextflow pipeline development.\nViash can help developers wrap their code into a state-of-the-art Nextflow script called a VDSL3 module. As we will demonstrate in the remainder of this guide, VDSL3 is effectively a separate DSL layer on top of Nextflow enabled by Viash, hence it is called Viash + Nextflow DSL 3, or VDSL3 for short. VDSL3’s benefits extend beyond Nextflow pipeline development, including reusability, test-driven development, separation of concerns, and continuous testing.\nIn the following sections, we’ll show how to use build Nextflow modules from Viash components and how to put them together in a pipeline."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html",
    "title": "Create a pipeline",
    "section": "",
    "text": "This guide explains how to create an example pipeline that’s closer to a typical use-case of a Nextflow bioinformatics pipeline."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#get-the-template-project",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#get-the-template-project",
    "title": "Create a pipeline",
    "section": "Get the template project",
    "text": "Get the template project\nTo get started with building a pipeline, we provide a template project which already contains a few components. First create a new repository by clicking the “Use this template” button in the viash_project_template repository or clicking the button below.\nUse project template\nThen clone the repository using the following command.\ngit clone https://github.com/youruser/my_first_pipeline.git\nThe pipeline already contains three components with which we will build the following pipeline:\n\n\n\n\ngraph LR\n   A(file?.tsv) --&gt; B[/remove_comments/]\n   B --&gt; C[/take_column/]\n   C --&gt; D[/combine_columns/]\n   D --&gt; E(output)\n\n\n\n\n\n\nremove_comments is a Bash script which removes all lines starting with a # from a file.\ntake_column is a Python script which extracts one of the columns in a TSV file.\ncombine_columns is an R script which combines multiple files into a TSV."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#build-the-vdsl3-modules",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#build-the-vdsl3-modules",
    "title": "Create a pipeline",
    "section": "Build the VDSL3 modules",
    "text": "Build the VDSL3 modules\nFirst, we need to build the components into VDSL3 modules.\n\nviash ns build --setup cachedbuild --parallel\n\nExporting remove_comments (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/remove_comments\nExporting take_column (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/take_column\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/remove_comments:dev' with Dockerfile\nExporting combine_columns (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/combine_columns\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/combine_columns:dev' with Dockerfile\nExporting remove_comments (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/remove_comments\nExporting take_column (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/take_column\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/take_column:dev' with Dockerfile\nExporting combine_columns (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/combine_columns\n\u001b[32mAll 6 configs built successfully\u001b[0m\n\n\nOnce everything is built, a new target directory has been created containing the executables and modules grouped per platform:\n\ntree target\n\ntarget\n├── docker\n│   └── demo\n│       ├── combine_columns\n│       │   └── combine_columns\n│       ├── remove_comments\n│       │   └── remove_comments\n│       └── take_column\n│           └── take_column\n└── nextflow\n    └── demo\n        ├── combine_columns\n        │   ├── main.nf\n        │   └── nextflow.config\n        ├── remove_comments\n        │   ├── main.nf\n        │   └── nextflow.config\n        └── take_column\n            ├── main.nf\n            └── nextflow.config\n\n10 directories, 9 files"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#create-a-pipeline",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#create-a-pipeline",
    "title": "Create a pipeline",
    "section": "Create a pipeline",
    "text": "Create a pipeline\nBelow is a first Nextflow pipeline which uses just one VDSL3 module and with hard-coded input parameters (file1 and file2).\nnextflow.enable.dsl=2\n\ninclude { remove_comments } from \"./target/nextflow/demo/remove_comments/main.nf\"\n\nworkflow {\n  // Create a channel with two events\n  // Each event contains a string (an identifier) and a file (input)\n  Channel.fromList([\n    [\"file1\", file(\"resources_test/file1.tsv\")],\n    [\"file2\", file(\"resources_test/file2.tsv\")]\n  ])\n\n    // View channel contents\n    | view { tup -&gt; \"Input: $tup\" }\n    \n    // Process the input file using the 'remove_comments' module.\n    // This removes comment lines from the input TSV.\n    | remove_comments.run(\n      directives: [\n        publishDir: \"output/\"\n      ]\n    )\n\n    // View channel contents\n    | view { tup -&gt; \"Output: $tup\" }\n}"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#vdsl3-module-interface",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#vdsl3-module-interface",
    "title": "Create a pipeline",
    "section": "VDSL3 module interface",
    "text": "VDSL3 module interface\nIt’s important to note what the interface of every VDSL3 module is. A VDSL3 module expects an input to be a tuple with the following elements:\n\nid (String): A unique identifier used for tracking data objects and for ensuring output filenames are unique.\ndata (Map[String, Any] or File): A named map (or dictionary) used to pass the module’s input arguments. If the module only has a single input file, the file itself can simply be passed.\n... (Any*): Any other elements in the tuple simply pass through the module without being altered in any way. For this reason, it is often referred to as the “passthrough” objects.\n\nIn turn, a VDSL3 module will return a tuple with the same interface, except that the input data object has been replaced with the output data:\n\nid (String): The identifier from the input tuple.\ndata (Map[String, Any] or File): A named map (or dictionary) containing the module’s output files. Important: If the module only has a single output file, the file itself will be returned.\n... (Any*): The passthrough objects from the input tuple (if any)."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#what-is-.run",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#what-is-.run",
    "title": "Create a pipeline",
    "section": "What is .run()?",
    "text": "What is .run()?\nUsually, Nextflow processes are quite static objects. For example, changing its directives can be quite tricky.\nThe run() function is a unique feature for every VDSL3 module which allows dynamically altering the behaviour of a module from within the pipeline. In this case, we use it to set the publishDir directive to \"output/\" so the output of that step in the pipeline will be stored as output."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#run-the-pipeline",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#run-the-pipeline",
    "title": "Create a pipeline",
    "section": "Run the pipeline",
    "text": "Run the pipeline\nNow run the pipeline with Nextflow:\n\nnextflow run . \\\n  -main-script main.nf\n\nN E X T F L O W  ~  version 22.10.6\nLaunching `main.nf` [jolly_curran] DSL2 - revision: 111508427e\n[-        ] process &gt; remove_comments:remove_comm... -\nInput: [file1, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file1.tsv]\nInput: [file2, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file2.tsv]\n\nexecutor &gt;  local (2)\n[37/ee02ab] process &gt; remove_comments:remove_comm... [  0%] 0 of 2\nInput: [file1, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file1.tsv]\nInput: [file2, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file2.tsv]\n\nexecutor &gt;  local (2)\n[60/869c62] process &gt; remove_comments:remove_comm... [100%] 2 of 2 ✔\nInput: [file1, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file1.tsv]\nInput: [file2, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file2.tsv]\nOutput: [file1, /home/runner/work/website/website/guide/_viash_project_template/work/37/ee02ab0cc4c75e97312b64f35f6997/file1.remove_comments.output.tsv]\nOutput: [file2, /home/runner/work/website/website/guide/_viash_project_template/work/60/869c62f92dd5a8d82f15ebe6302145/file2.remove_comments.output.tsv]\n\n\n\ntree output\n\noutput\n├── combined.combine_columns.output\n├── file1.remove_comments.output.tsv -&gt; /home/runner/work/website/website/guide/_viash_project_template/work/37/ee02ab0cc4c75e97312b64f35f6997/file1.remove_comments.output.tsv\n└── file2.remove_comments.output.tsv -&gt; /home/runner/work/website/website/guide/_viash_project_template/work/60/869c62f92dd5a8d82f15ebe6302145/file2.remove_comments.output.tsv\n\n0 directories, 3 files\n\n\n\ncat output/*\n\n\"1\" 0.11\n\"2\" 0.23\n\"3\" 0.35\n\"4\" 0.47\none 0.11    123\ntwo 0.23    456\nthree   0.35    789\nfour    0.47    123\neins    0.111   234\nzwei    0.222   234\ndrei    0.333   123\nvier    0.444   123"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#discussion",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#discussion",
    "title": "Create a pipeline",
    "section": "Discussion",
    "text": "Discussion\nThe above example pipeline serves as the backbone for creating more advanced pipelines. However, for the sake of simplicity it contained several hardcoded elements:\n\nInput parameters\nOutput directory\nVDSL3 module directory"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-module.html",
    "href": "guide/nextflow_vdsl3/create-a-module.html",
    "title": "Create a module",
    "section": "",
    "text": "Creating a VDSL3 module is as simple as adding { type: nextflow } to the platforms section in the Viash config. Luckily, our previous example already contained such an entry:"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-module.html#build-the-vdsl3-module",
    "href": "guide/nextflow_vdsl3/create-a-module.html#build-the-vdsl3-module",
    "title": "Create a module",
    "section": "Build the VDSL3 module",
    "text": "Build the VDSL3 module\nWe will now turn the Viash component into a VDSL3 module. By default, the viash build command will select the first platform in the list of platforms. To select the nextflow platform, use the --platform nextflow argument, or -p nextflow for short.\n\nBash\n\n\n\nviash build config.vsh.yaml -o target -p nextflow\n\nThis will generate a Nextflow module in the target/ directory:\n\ntree target\n\ntarget\n├── main.nf\n└── nextflow.config\n\n0 directories, 2 files\n\n\n\n\n\nThis main.nf file is both a standalone Nextflow pipeline and a module which can be used as part of another pipeline.\n\n\n\n\n\n\nTip\n\n\n\nYou can also use the viash ns build command to build all of the platforms in one go. Give it a try! More information in the following section."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-module.html#module-as-a-standalone-pipeline",
    "href": "guide/nextflow_vdsl3/create-a-module.html#module-as-a-standalone-pipeline",
    "title": "Create a module",
    "section": "Module as a standalone pipeline",
    "text": "Module as a standalone pipeline\nWhen VDSL3 modules are used as a standalone pipeline, you need to specify the input parameters and a --publish_dir parameter, as Nextflow will automatically choose the parameter names of the output files.\nYou can run the executable by providing a value for --input and --publish_dir:\n\nnextflow run target/main.nf --input config.vsh.yaml --publish_dir output/\n\nN E X T F L O W  ~  version 22.10.6\nLaunching `target/main.nf` [goofy_mccarthy] DSL2 - revision: 2b7a821845\n[-        ] process &gt; example_bash:example_bash_p... -\n\nexecutor &gt;  local (1)\n[91/85031d] process &gt; example_bash:example_bash_p... [  0%] 0 of 1\ninput: [run, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/config.vsh.yaml]]\n\nexecutor &gt;  local (1)\n[91/85031d] process &gt; example_bash:example_bash_p... [100%] 1 of 1 ✔\ninput: [run, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/config.vsh.yaml]]\noutput: [run, /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/work/91/85031d7d4a2beccdc6f30708c76948/run.example_bash.output.txt]\n\n\nThis results in the following output:\n\ntree output\n\noutput\n└── run.example_bash.output.txt\n\n0 directories, 1 file\n\n\nThe pipeline help can be shown by passing the --help parameter (Output not shown).\nnextflow run target/main.nf --help"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-module.html#passing-a-parameter-list",
    "href": "guide/nextflow_vdsl3/create-a-module.html#passing-a-parameter-list",
    "title": "Create a module",
    "section": "Passing a parameter list",
    "text": "Passing a parameter list\nEvery VDSL3 can accept a list of parameters to populate a Nextflow channel with.\nFor example, we create a set of input files which we want to process in parallel.\n\ntouch sample1.txt sample2.txt sample3.txt sample4.txt\n\nNext, we create a YAML file param_list.yaml containing an id and an input value for each parameter entry.\n- id: sample1\n  input: /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample1.txt\n- id: sample2\n  input: /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample2.txt\n- id: sample3\n  input: /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample3.txt\n- id: sample4\n  input: /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample4.txt\nYou can run the pipeline on the list of parameters using the --param_list parameter.\n\nnextflow run target/main.nf --param_list param_list.yaml --publish_dir output2\n\nN E X T F L O W  ~  version 22.10.6\nLaunching `target/main.nf` [admiring_shannon] DSL2 - revision: 2b7a821845\n[-        ] process &gt; example_bash:example_bash_p... -\ninput: [sample4, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample4.txt]]\ninput: [sample3, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample3.txt]]\ninput: [sample2, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample2.txt]]\ninput: [sample1, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample1.txt]]\n\nexecutor &gt;  local (2)\n[36/f15bcf] process &gt; example_bash:example_bash_p... [  0%] 0 of 4\ninput: [sample4, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample4.txt]]\ninput: [sample3, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample3.txt]]\ninput: [sample2, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample2.txt]]\ninput: [sample1, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample1.txt]]\n\nexecutor &gt;  local (4)\n[d5/e94cae] process &gt; example_bash:example_bash_p... [ 75%] 3 of 4\ninput: [sample4, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample4.txt]]\ninput: [sample3, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample3.txt]]\ninput: [sample2, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample2.txt]]\ninput: [sample1, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample1.txt]]\noutput: [sample3, /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/work/36/f15bcf8a9084c7c03f68f90a1bc28c/sample3.example_bash.output.txt]\noutput: [sample4, /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/work/53/9cbc71d07b7b573470b51f7fa2664d/sample4.example_bash.output.txt]\noutput: [sample2, /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/work/d5/e94cae0e876cd22cf5f1caf7fe836b/sample2.example_bash.output.txt]\n\nexecutor &gt;  local (4)\n[07/694a40] process &gt; example_bash:example_bash_p... [100%] 4 of 4 ✔\ninput: [sample4, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample4.txt]]\ninput: [sample3, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample3.txt]]\ninput: [sample2, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample2.txt]]\ninput: [sample1, [output:$id.$key.output.txt, input:/tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/sample1.txt]]\noutput: [sample3, /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/work/36/f15bcf8a9084c7c03f68f90a1bc28c/sample3.example_bash.output.txt]\noutput: [sample4, /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/work/53/9cbc71d07b7b573470b51f7fa2664d/sample4.example_bash.output.txt]\noutput: [sample2, /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/work/d5/e94cae0e876cd22cf5f1caf7fe836b/sample2.example_bash.output.txt]\noutput: [sample1, /tmp/RtmpRBU89e/create-a-module354d2ad901fa/bash/work/07/694a4076da98f942e25b2a76482d99/sample1.example_bash.output.txt]\n\n\nThis results in the following outputs:\n\ntree output2\n\noutput2\n├── sample1.example_bash.output.txt\n├── sample2.example_bash.output.txt\n├── sample3.example_bash.output.txt\n└── sample4.example_bash.output.txt\n\n0 directories, 4 files\n\n\n\n\n\n\n\n\nTip\n\n\n\nInstead of a YAML, you can also pass a JSON or a CSV to the --param_list parameter."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-module.html#module-as-part-of-a-pipeline",
    "href": "guide/nextflow_vdsl3/create-a-module.html#module-as-part-of-a-pipeline",
    "title": "Create a module",
    "section": "Module as part of a pipeline",
    "text": "Module as part of a pipeline\nThis module can also be used as part of a Nextflow pipeline. Below is a short preview of what this looks like.\nimport { example_bash } from \"target/main.nf\"\n\nChannel.fromList([\n  [\"sample1\", file(\"sample1.txt\")],\n  [\"sample2\", file(\"sample2.txt\")],\n  [\"sample3\", file(\"sample3.txt\")]\n])\n  | view { it -&gt; \"input: $it\" }\n  | example_bash\n  | view { it -&gt; \"output: $it\" }\nWe will discuss building pipelines with VDSL3 modules in more detail in Create a pipeline."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-module.html#improvements-over-standard-nextflow-modules",
    "href": "guide/nextflow_vdsl3/create-a-module.html#improvements-over-standard-nextflow-modules",
    "title": "Create a module",
    "section": "Improvements over standard Nextflow modules",
    "text": "Improvements over standard Nextflow modules\n\nNo need to write any Nextflow Groovy code, just your script and the Viash config.\nVDSL3 module are also standalone pipelines.\nHelp documentation is automatically generated.\nStandardized interface for passing parameter lists.\nAutomatically uses the Docker platform’s container."
  },
  {
    "objectID": "guide/project/batch-processing.html",
    "href": "guide/project/batch-processing.html",
    "title": "Batch processing",
    "section": "",
    "text": "Within this project it’s possible to do all of the same things mentioned in the “Component” guide such as build a target executable with viash build and test a component with viash test. However, doing this for all components in the repository can bet quite tedious.\nLuckily, Viash provides a set of commands for building, testing or inspecting all Viash components in the current namespace (ns)."
  },
  {
    "objectID": "guide/project/batch-processing.html#build-all-components",
    "href": "guide/project/batch-processing.html#build-all-components",
    "title": "Batch processing",
    "section": "Build all components",
    "text": "Build all components\nYou can generate your first full development build using the viash ns build command.\nviash ns build --setup cachedbuild\n\n\nOutput\n\n\n\nExporting remove_comments (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/remove_comments\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/remove_comments:dev' with Dockerfile\nExporting remove_comments (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/remove_comments\nExporting take_column (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/take_column\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/take_column:dev' with Dockerfile\nExporting take_column (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/take_column\nExporting combine_columns (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/combine_columns\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/combine_columns:dev' with Dockerfile\nExporting combine_columns (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/combine_columns\n\u001b[32mAll 6 configs built successfully\u001b[0m\n\n\n\nHere are some useful optional arguments:\n\n--parallel: Run multiple builds in parallel.\n--setup cachedbuild: Build Docker images using the cachedbuild strategy.\n--query demo: Only select components that have ‘demo’ in the namespace or name."
  },
  {
    "objectID": "guide/project/batch-processing.html#test-all-components",
    "href": "guide/project/batch-processing.html#test-all-components",
    "title": "Batch processing",
    "section": "Test all components",
    "text": "Test all components\nYou can run all of the component tests using the viash ns test command.\nviash ns test\n\n\nOutput\n\n\n\nThe working directory for the namespace tests is /tmp/viash_ns_test5085080877609584243\n           namespace        functionality             platform            test_name exit_code duration               result\u001b[0m\n                demo      remove_comments               docker                start                                        \u001b[0m\n\u001b[32m                demo      remove_comments               docker     build_executable         0        3              SUCCESS\u001b[0m\n\u001b[32m                demo      remove_comments               docker              test.sh         0        1              SUCCESS\u001b[0m\n                demo          take_column               docker                start                                        \u001b[0m\n\u001b[32m                demo          take_column               docker     build_executable         0        3              SUCCESS\u001b[0m\n\u001b[33m                demo          take_column               docker                tests        -1        0              MISSING\u001b[0m\nno tests found\n====================================================================\n                demo      combine_columns               docker                start                                        \u001b[0m\n\u001b[32m                demo      combine_columns               docker     build_executable         0        3              SUCCESS\u001b[0m\n\u001b[33m                demo      combine_columns               docker                tests        -1        0              MISSING\u001b[0m\nno tests found\n====================================================================\n\u001b[33mNot all configs built and tested successfully\u001b[0m\n  \u001b[33m2/6 tests missing\u001b[0m\n  \u001b[32m4/6 configs built and tested successfully\u001b[0m"
  },
  {
    "objectID": "guide/project/batch-processing.html#listing-components",
    "href": "guide/project/batch-processing.html#listing-components",
    "title": "Batch processing",
    "section": "Listing components",
    "text": "Listing components\nYou can run list all components using the viash ns list command.\nviash ns list\n\n\nOutput\n\n\n\n- functionality:\n    name: \"remove_comments\"\n    namespace: \"demo\"\n    version: \"dev\"\n    authors: []\n    arguments:\n    - type: \"file\"\n      name: \"--input\"\n      alternatives:\n      - \"-i\"\n      example:\n      - \"file.tsv\"\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"file\"\n      name: \"--output\"\n      alternatives:\n      - \"-o\"\n      example:\n      - \"file.tsv\"\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"output\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"string\"\n      name: \"--id\"\n      alternatives: []\n      example: []\n      default:\n      - \"remove_comments\"\n      required: false\n      choices: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    argument_groups: []\n    resources:\n    - type: \"bash_script\"\n      path: \"script.sh\"\n      is_executable: true\n      parent: \"file:/home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\"\n    test_resources:\n    - type: \"bash_script\"\n      path: \"test.sh\"\n      is_executable: true\n      parent: \"file:/home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\"\n    status: \"enabled\"\n    requirements:\n      commands: []\n    set_wd_to_resources_dir: false\n  platforms:\n  - type: \"docker\"\n    id: \"docker\"\n    image: \"ubuntu:20.04\"\n    target_organization: \"viash-io/viash_project_template\"\n    target_registry: \"ghcr.io\"\n    namespace_separator: \"/\"\n    resolve_volume: \"Automatic\"\n    chown: true\n    port: []\n    setup_strategy: \"ifneedbepullelsecachedbuild\"\n    run_args: []\n    target_image_source: \"https://github.com/viash-io/viash_project_template\"\n    setup: []\n    test_setup: []\n  - type: \"nextflow\"\n    id: \"nextflow\"\n    variant: \"vdsl3\"\n    directives:\n      accelerator: {}\n      conda: []\n      containerOptions: []\n      label: []\n      module: []\n      pod: []\n      publishDir: []\n      queue: []\n      tag: \"$id\"\n    auto:\n      simplifyInput: true\n      simplifyOutput: true\n      transcript: false\n      publish: false\n    debug: false\n    container: \"docker\"\n  info:\n    config: \"/home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\"\n    viash_version: \"0.7.1\"\n    git_commit: \"ffa7b1bee3fb192bec568a772b44c6b527cd941b\"\n    git_remote: \"https://github.com/viash-io/viash_project_template.git\"\n- functionality:\n    name: \"take_column\"\n    namespace: \"demo\"\n    version: \"dev\"\n    authors: []\n    arguments:\n    - type: \"file\"\n      name: \"--input\"\n      alternatives:\n      - \"-i\"\n      example: []\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"file\"\n      name: \"--output\"\n      alternatives:\n      - \"-o\"\n      example: []\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"output\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"integer\"\n      name: \"--column\"\n      alternatives: []\n      example: []\n      default:\n      - 2\n      required: false\n      choices: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"string\"\n      name: \"--id\"\n      alternatives: []\n      example: []\n      default:\n      - \"take_column\"\n      required: false\n      choices: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    argument_groups: []\n    resources:\n    - type: \"python_script\"\n      path: \"script.py\"\n      is_executable: true\n      parent: \"file:/home/runner/work/website/website/guide/_viash_project_template/src/demo/take_column/config.vsh.yaml\"\n    test_resources: []\n    status: \"enabled\"\n    requirements:\n      commands: []\n    set_wd_to_resources_dir: false\n  platforms:\n  - type: \"docker\"\n    id: \"docker\"\n    image: \"python:3.10-slim\"\n    target_organization: \"viash-io/viash_project_template\"\n    target_registry: \"ghcr.io\"\n    namespace_separator: \"/\"\n    resolve_volume: \"Automatic\"\n    chown: true\n    port: []\n    setup_strategy: \"ifneedbepullelsecachedbuild\"\n    run_args: []\n    target_image_source: \"https://github.com/viash-io/viash_project_template\"\n    setup:\n    - type: \"python\"\n      user: false\n      packages:\n      - \"pandas\"\n      pip: []\n      pypi: []\n      git: []\n      github: []\n      gitlab: []\n      mercurial: []\n      svn: []\n      bazaar: []\n      url: []\n      script: []\n      upgrade: true\n    test_setup: []\n  - type: \"nextflow\"\n    id: \"nextflow\"\n    variant: \"vdsl3\"\n    directives:\n      accelerator: {}\n      conda: []\n      containerOptions: []\n      label: []\n      module: []\n      pod: []\n      publishDir: []\n      queue: []\n      tag: \"$id\"\n    auto:\n      simplifyInput: true\n      simplifyOutput: true\n      transcript: false\n      publish: false\n    debug: false\n    container: \"docker\"\n  info:\n    config: \"/home/runner/work/website/website/guide/_viash_project_template/src/demo/take_column/config.vsh.yaml\"\n    viash_version: \"0.7.1\"\n    git_commit: \"ffa7b1bee3fb192bec568a772b44c6b527cd941b\"\n    git_remote: \"https://github.com/viash-io/viash_project_template.git\"\n- functionality:\n    name: \"combine_columns\"\n    namespace: \"demo\"\n    version: \"dev\"\n    authors: []\n    arguments:\n    - type: \"file\"\n      name: \"--input\"\n      alternatives:\n      - \"-i\"\n      example: []\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"input\"\n      multiple: true\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"file\"\n      name: \"--output\"\n      alternatives:\n      - \"-o\"\n      example: []\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"output\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"string\"\n      name: \"--id\"\n      alternatives: []\n      example: []\n      default:\n      - \"combine_columns\"\n      required: false\n      choices: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    argument_groups: []\n    resources:\n    - type: \"r_script\"\n      path: \"script.R\"\n      is_executable: true\n      parent: \"file:/home/runner/work/website/website/guide/_viash_project_template/src/demo/combine_columns/config.vsh.yaml\"\n    test_resources: []\n    status: \"enabled\"\n    requirements:\n      commands: []\n    set_wd_to_resources_dir: false\n  platforms:\n  - type: \"docker\"\n    id: \"docker\"\n    image: \"eddelbuettel/r2u:22.04\"\n    target_organization: \"viash-io/viash_project_template\"\n    target_registry: \"ghcr.io\"\n    namespace_separator: \"/\"\n    resolve_volume: \"Automatic\"\n    chown: true\n    port: []\n    setup_strategy: \"ifneedbepullelsecachedbuild\"\n    run_args: []\n    target_image_source: \"https://github.com/viash-io/viash_project_template\"\n    setup: []\n    test_setup: []\n  - type: \"nextflow\"\n    id: \"nextflow\"\n    variant: \"vdsl3\"\n    directives:\n      accelerator: {}\n      conda: []\n      containerOptions: []\n      label: []\n      module: []\n      pod: []\n      publishDir: []\n      queue: []\n      tag: \"$id\"\n    auto:\n      simplifyInput: true\n      simplifyOutput: true\n      transcript: false\n      publish: false\n    debug: false\n    container: \"docker\"\n  info:\n    config: \"/home/runner/work/website/website/guide/_viash_project_template/src/demo/combine_columns/config.vsh.yaml\"\n    viash_version: \"0.7.1\"\n    git_commit: \"ffa7b1bee3fb192bec568a772b44c6b527cd941b\"\n    git_remote: \"https://github.com/viash-io/viash_project_template.git\"\n\n\u001b[32mAll 3 configs parsed successfully\u001b[0m"
  },
  {
    "objectID": "guide/project/batch-processing.html#custom-batch-processing",
    "href": "guide/project/batch-processing.html#custom-batch-processing",
    "title": "Batch processing",
    "section": "Custom batch processing",
    "text": "Custom batch processing\nThe viash ns exec command can be used to run a command on every component.\nviash ns exec \"echo Hello {}\"\n\n\nOutput\n\n\n\n+ echo Hello /home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\n  Exit code: 0\n\n  Output:\n+ echo Hello /home/runner/work/website/website/guide/_viash_project_template/src/demo/take_column/config.vsh.yaml\nHello /home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\n\n  Exit code: 0\n\n  Output:\n+ echo Hello /home/runner/work/website/website/guide/_viash_project_template/src/demo/combine_columns/config.vsh.yaml\nHello /home/runner/work/website/website/guide/_viash_project_template/src/demo/take_column/config.vsh.yaml\n\n  Exit code: 0\n\n  Output:\nHello /home/runner/work/website/website/guide/_viash_project_template/src/demo/combine_columns/config.vsh.yaml"
  },
  {
    "objectID": "guide/project/batch-processing.html#tips",
    "href": "guide/project/batch-processing.html#tips",
    "title": "Batch processing",
    "section": "Tips",
    "text": "Tips\n\nParallel builds\nSome commands shown above can be optimized by adding the --parallel option:\n\nviash ns build --parallel will build in parallel\nviash ns test --parallel will test in parallel\n\nFor example:\nviash ns test --parallel\n\n\nOutput\n\n\n\nThe working directory for the namespace tests is /tmp/viash_ns_test16036776196119578405\n           namespace        functionality             platform            test_name exit_code duration               result\u001b[0m\n                demo      remove_comments               docker                start                                        \u001b[0m\n                demo          take_column               docker                start                                        \u001b[0m\n\u001b[32m                demo          take_column               docker     build_executable         0        4              SUCCESS\u001b[0m\n\u001b[33m                demo          take_column               docker                tests        -1        0              MISSING\u001b[0m\nno tests found\n====================================================================\n                demo      combine_columns               docker                start                                        \u001b[0m\n\u001b[32m                demo      remove_comments               docker     build_executable         0        4              SUCCESS\u001b[0m\n\u001b[32m                demo      remove_comments               docker              test.sh         0        1              SUCCESS\u001b[0m\n\u001b[32m                demo      combine_columns               docker     build_executable         0        3              SUCCESS\u001b[0m\n\u001b[33m                demo      combine_columns               docker                tests        -1        0              MISSING\u001b[0m\nno tests found\n====================================================================\n\u001b[33mNot all configs built and tested successfully\u001b[0m\n  \u001b[33m2/6 tests missing\u001b[0m\n  \u001b[32m4/6 configs built and tested successfully\u001b[0m\n\n\n\n\n\nSubset to components or namespaces\nIn a development context, one often needs to rebuild one or a few components rather than the full repository. For this situation, viash ns has the option to specify query arguments: --query, query_name and query_namespace. We refer to the reference documentation for details and illustrate the use using an example:\nviash ns build --query \"^.*columns$\"\n\n\nOutput\n\n\n\nExporting combine_columns (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/combine_columns\nExporting combine_columns (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/combine_columns\n\u001b[33mNot all configs built successfully\u001b[0m\n  \u001b[33m2/4 configs were disabled\u001b[0m\n  \u001b[32m2/4 configs built successfully\u001b[0m\n\n\n\nAs shown here, the query arguments accept regular expressions."
  },
  {
    "objectID": "guide/project/structure.html",
    "href": "guide/project/structure.html",
    "title": "Structure",
    "section": "",
    "text": "The project already contains three components which are used to create a Nextflow pipeline with the following topology:\n\n\n\n\ngraph LR\n   A(file?.tsv) --&gt; B[/remove_comments/]\n   B --&gt; C[/take_column/]\n   C --&gt; D[/combine_columns/]\n   D --&gt; E(output)\n\n\nDiagram of the pipeline topology\n\n\n\n\nremove_comments is a Bash script which removes all lines starting with a # from a file.\ntake_column is a Python script which extracts one of the columns in a TSV file.\ncombine_columns is an R script which combines multiple files into a TSV."
  },
  {
    "objectID": "guide/project/structure.html#demo-pipeline",
    "href": "guide/project/structure.html#demo-pipeline",
    "title": "Structure",
    "section": "",
    "text": "The project already contains three components which are used to create a Nextflow pipeline with the following topology:\n\n\n\n\ngraph LR\n   A(file?.tsv) --&gt; B[/remove_comments/]\n   B --&gt; C[/take_column/]\n   C --&gt; D[/combine_columns/]\n   D --&gt; E(output)\n\n\nDiagram of the pipeline topology\n\n\n\n\nremove_comments is a Bash script which removes all lines starting with a # from a file.\ntake_column is a Python script which extracts one of the columns in a TSV file.\ncombine_columns is an R script which combines multiple files into a TSV."
  },
  {
    "objectID": "guide/project/structure.html#grouping-components-in-namespaces",
    "href": "guide/project/structure.html#grouping-components-in-namespaces",
    "title": "Structure",
    "section": "Grouping components in namespaces",
    "text": "Grouping components in namespaces\nA namespace is effectively a hierarchical grouping of the components in the src/ directory. Here are some benefits of grouping your components:\n\nGrouping components in namespaces allows for categorizing components.\nEach teams of developers can work on a different set of components in parallel, which improves the separation of concerns.\nGenerating build targets and unit testing can be done in bulk, with optional filtering by namespace using the viash ns commands.\n\nThis guide will cover how to define a namespace and use it with Viash."
  },
  {
    "objectID": "guide/project/structure.html#namespace-property",
    "href": "guide/project/structure.html#namespace-property",
    "title": "Structure",
    "section": "Namespace property",
    "text": "Namespace property\nYou can assign a component to a namespace by defining its namespace attribute in the Viash config file:\nfunctionality:\n  name: some_component\n  namespace: some_namespace/subnamespace\n...\nTypically, the Viash config for this component will be located at src/some_namespace/subnamespace/some_component/config.vsh.yaml."
  },
  {
    "objectID": "guide/project/project-config.html",
    "href": "guide/project/project-config.html",
    "title": "Project config",
    "section": "",
    "text": "A _viash.yaml file in the root of the project repository is called a Viash project config. It allows defining project-wide settings such as the location of the Viash components and which Viash version to use."
  },
  {
    "objectID": "guide/project/project-config.html#example-project-config",
    "href": "guide/project/project-config.html#example-project-config",
    "title": "Project config",
    "section": "Example project config",
    "text": "Example project config\nviash_version: 0.7.1\n\nsource: src\ntarget: target\n\nconfig_mods: |\n  .functionality.version := 'dev'\n  .platforms[.type == 'docker'].target_registry := 'ghcr.io'\n  .platforms[.type == 'docker'].target_organization := 'viash-io/viash_project_template'\n  .platforms[.type == 'docker'].target_image_source := 'https://github.com/viash-io/viash_project_template'\n  .platforms[.type == 'nextflow'].directives.tag := '$id'"
  },
  {
    "objectID": "guide/project/project-config.html#viash-version",
    "href": "guide/project/project-config.html#viash-version",
    "title": "Project config",
    "section": "Viash version",
    "text": "Viash version\nPinning the version of Viash used in your project is essential to ensure reproducibility thereof across multiple systems. In doing so, all Viash commands will be run using that version of Viash.\nExample:\n\necho 'viash_version: \"0.6.0\"' &gt; _viash.yaml\n\nviash --version\n\nviash 0.6.0 (c) 2020 Data Intuitive"
  },
  {
    "objectID": "guide/project/project-config.html#source-directory",
    "href": "guide/project/project-config.html#source-directory",
    "title": "Project config",
    "section": "Source directory",
    "text": "Source directory\nOverrides the --src parameter of any viash ns command. This is useful in case the directory containing the Viash component source code is in a directory different from src/."
  },
  {
    "objectID": "guide/project/project-config.html#destination-directory",
    "href": "guide/project/project-config.html#destination-directory",
    "title": "Project config",
    "section": "Destination directory",
    "text": "Destination directory\nOverrides the --target parameter of any viash ns command. This is useful in case the artifacts generated by Viash should be stored in a directory different from target/."
  },
  {
    "objectID": "guide/project/project-config.html#advanced-configuration",
    "href": "guide/project/project-config.html#advanced-configuration",
    "title": "Project config",
    "section": "Advanced configuration",
    "text": "Advanced configuration\nViash allows for rewriting component configuration files using config mods. Config mods allow making changes to the config mods on the fly.\nThe template project contains these default config mods:\nconfig_mods: |\n  .functionality.version := 'dev'\n  .platforms[.type == 'docker'].target_registry := 'ghcr.io'\n  .platforms[.type == 'docker'].target_organization := 'viash-io/viash_project_template'\n  .platforms[.type == 'docker'].target_image_source := 'https://github.com/viash-io/viash_project_template'\n  .platforms[.type == 'nextflow'].directives.tag := '$id'\nThis has the following effects:\n\nSet the version of any components to 'dev'.\nFills the registry, organisation and image sources fields of the Docker platform.\nAdds a default directive to the Nextflow platform."
  },
  {
    "objectID": "guide/project/ide-setup.html",
    "href": "guide/project/ide-setup.html",
    "title": "IDE setup",
    "section": "",
    "text": "Since a Viash components consists of a script in one of the supported languages and a YAML file, you can use any editor of your choosing to create these files.\nWhen building a Nextflow pipeline built from Viash components written in Bash, R, and Python, we highly recommend using Visual Studio Code."
  },
  {
    "objectID": "guide/project/ide-setup.html#what-is-visual-studio-code",
    "href": "guide/project/ide-setup.html#what-is-visual-studio-code",
    "title": "IDE setup",
    "section": "What is Visual Studio Code?",
    "text": "What is Visual Studio Code?\nVisual Studio Code is an open source code-editor developed by Microsoft for Windows, Linux and macOS. As of 2021, it’s the #1 most popular developer environment tool, and for good reason. It’s lightweight, supports many languages and has a ton of features. Some of its most prominent features include:\n\nSyntax highlighting\nIntelligent code completion\nCode refactoring\nEmbedded Git\nSnippets\nExtensions and themes"
  },
  {
    "objectID": "guide/project/ide-setup.html#installation",
    "href": "guide/project/ide-setup.html#installation",
    "title": "IDE setup",
    "section": "Installation",
    "text": "Installation\nVS Code can be downloaded from this page:\nhttps://code.visualstudio.com/Download\nThere are installers available for all major operating systems, so simply download and install the version for your system."
  },
  {
    "objectID": "guide/project/ide-setup.html#recommended-extensions",
    "href": "guide/project/ide-setup.html#recommended-extensions",
    "title": "IDE setup",
    "section": "Recommended extensions",
    "text": "Recommended extensions\nVisual Studio Code supports installing extensions that extend the capabilities and introduce quality of life changes. The lists below are our recommendations for use with Viash.\n\nGeneral\nThese extensions are useful for most languages:\n\nCode Runner: This allows you to easily run any selected code and output the results to the built-in terminal. Make sure to take a look at the Configuration section of the page to set it up for the languages you’ll work with.\nCode Spell Checker: A quality of life extension that prevents you from making common spelling mistakes in your code by showing squiggly underlines below typos.\nError Lens: This extension makes errors and warnings more prominent by highlighting the entire line and adding the message at the end. This can speed up the writing of scripts tremendously.\nPrettier code formatter: Integrates the prettier code formatter into VS Code, which makes formatting your code extremely easy.\n\n\n\nYAML\nViash config files are written in YAML, so it makes sense to have an extension for that language:\n\nYAML: This extension provides YAML validation, syntax highlighting, auto completion and document outlining for YAML. A must have for writing and editing Viash config files!"
  },
  {
    "objectID": "guide/project/ide-setup.html#markdown",
    "href": "guide/project/ide-setup.html#markdown",
    "title": "IDE setup",
    "section": "Markdown",
    "text": "Markdown\nIf you’re planning on writing documentation for components you write, can supplement the description and the CLI with a Markdown document. VS Code has Markdown support built-in, but the extension below makes writing markdown documents even easier!\n\nMarkdown All in One: Some of the features include keyboard shortcuts for text formatting, list editing, GitHub flavored Markdown and auto completion for Markdown."
  },
  {
    "objectID": "guide/project/ide-setup.html#bash",
    "href": "guide/project/ide-setup.html#bash",
    "title": "IDE setup",
    "section": "Bash",
    "text": "Bash\n\nshell-format: By installing this extension, you get syntax highlighting and code formatting for shell scripts."
  },
  {
    "objectID": "guide/project/ide-setup.html#c",
    "href": "guide/project/ide-setup.html#c",
    "title": "IDE setup",
    "section": "C#",
    "text": "C#\n\nC#: Adds syntax highlighting, IntelliSense and debugging capabilities to VS Code for C#."
  },
  {
    "objectID": "guide/project/ide-setup.html#python",
    "href": "guide/project/ide-setup.html#python",
    "title": "IDE setup",
    "section": "Python",
    "text": "Python\nPython: Adds syntax highlighting, IntelliSense, debugging and code formatting. This extension also installs the PyLance language server and Jupyter for Jupyter Notebook support."
  },
  {
    "objectID": "guide/project/ide-setup.html#javascript",
    "href": "guide/project/ide-setup.html#javascript",
    "title": "IDE setup",
    "section": "Javascript",
    "text": "Javascript\nNode.js Extension Pack: VS Code actually already has a lot of Node.js features out of the box, but this extension pack adds adds even more. The extensions adds JS code hints, module search, code snippets and IntelliSense for NPM and paths just to name a few features."
  },
  {
    "objectID": "guide/project/ide-setup.html#r",
    "href": "guide/project/ide-setup.html#r",
    "title": "IDE setup",
    "section": "R",
    "text": "R\nR: This extension adds syntax highlighting, code analysis, keyboard shortcuts, package management and a lot more for the R language.\n\nNote: This extension requires you to install R and the languageserver CRAN package which depends on libxml2-dev, libcurl4-openssl-dev and libssl-dev before the extension will work."
  },
  {
    "objectID": "guide/project/ide-setup.html#scala",
    "href": "guide/project/ide-setup.html#scala",
    "title": "IDE setup",
    "section": "Scala",
    "text": "Scala\n\nScala Syntax (official): Adds syntax highlighting for Scala 2 and 3.\nScala (Metals): Adds code completion, debugging, formatting, renaming and much more for Scala."
  },
  {
    "objectID": "guide/project/ide-setup.html#wsl2",
    "href": "guide/project/ide-setup.html#wsl2",
    "title": "IDE setup",
    "section": "WSL2",
    "text": "WSL2\nIf you’re using WSL2, you’ll probably want to install the Remote - WSL extension. This extension lets you use your Windows version of VS Code in WSL2, as if it was running native.\nThe commands, extensions and the terminal will run on WSL, which makes for an ideal hybrid environment.\nOnce installed, you can connect to WSL2 by clicking the green remote button at the bottom left and choosing New WSL Window in the list that pops up. Alternatively, you can use the command code FOLDER/FILE (e.g. code .) on the WSL2 side to open that file or folder in a remote VS Code session."
  },
  {
    "objectID": "guide/component/add-resources.html",
    "href": "guide/component/add-resources.html",
    "title": "Add resources",
    "section": "",
    "text": "If a script needs access to an external file, it needs to be added as a resource in the config.\nFirst, create a file called my_file.txt.\n\nBashC#JavaScriptPythonRScala\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\nNext, the file needs to be added to the config as a resource. This will let Viash know to copy the new file inside a component’s resource directory.\n\nBashC#JavaScriptPythonRScala\n\n\nfunctionality:\n  name: example_bash\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: bash:4.0\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_csharp\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: ghcr.io/data-intuitive/dotnet-script:1.3.1\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_js\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: node:19-bullseye-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_python\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: python:3.10-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_r\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: eddelbuettel/r2u:22.04\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_scala\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n  - type: native\n  - type: nextflow\n\n\n\nLastly, to access a resource from within the script, use the resources_dir meta-variable:\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# view resource file\ncat \"$meta_resources_dir/my_file.txt\"\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nusing System.IO;\n\n// VIASH START\nvar par = new {\n  input = \"path/to/file.txt\",\n  output = \"output.txt\"\n};\n// VIASH END\n\n// view resource file\nstring myFile = $\"{meta.resources_dir}/my_file.txt\";\nstring text = File.ReadAllText(myFile);\nConsole.WriteLine(text);\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nconst fs = require('fs');\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// view resource file\nconst my_file = `${meta['resources_dir']}/my_file.txt`\nfs.readFile(my_file, 'utf8', (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nimport shutil\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# view resource file\nmy_file = f\"{meta['resources_dir']}/my_file.txt\"\nwith open(my_file, \"r\") as f:\n  print(f.read())\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\n## VIASH START\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\n## VIASH END\n\n# view resource file\nlines &lt;- readLines(paste0(meta$resources_dir, \"/my_file.txt\"))\ncat(lines, sep = \"\\n\")\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\ncase class ViashPar(input: String, output: String)\nval par = ViashPar(\n  \"path/to/file.txt\",\n  \"output.txt\"\n)\n// VIASH END\n\n// view resource file\nval myFile = s\"${meta.resources_dir}/my_file.txt\"\nval src = scala.io.Source.fromFile(myFile)\nsrc.getLines.foreach(println)\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)\n\n\n\nNow we can run the component as follows:\n\nBashC#JavaScriptPythonRScala\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_bash:latest'\n[warning] Could not pull from 'example_bash:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_bash:latest' with Dockerfile\nHere are the contents of my_file.txt\nCopying '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/bash/config.vsh.yaml' to '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/bash/foo.txt'.\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_csharp:latest'\n[warning] Could not pull from 'example_csharp:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_csharp:latest' with Dockerfile\nHere are the contents of my_file.txt\n\nCopying '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/csharp/config.vsh.yaml' to '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/csharp/foo.txt'.\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_js:latest'\n[warning] Could not pull from 'example_js:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_js:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/js/config.vsh.yaml' to '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/js/foo.txt'\nHere are the contents of my_file.txt\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_python:latest'\n[warning] Could not pull from 'example_python:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_python:latest' with Dockerfile\nHere are the contents of my_file.txt\n\nCopying '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/python/config.vsh.yaml' to '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/python/foo.txt'.\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_r:latest'\n[warning] Could not pull from 'example_r:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_r:latest' with Dockerfile\nHere are the contents of my_file.txt\nCopying '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/r/config.vsh.yaml' to '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/r/foo.txt'.\n[1] TRUE\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_scala:latest'\n[warning] Could not pull from 'example_scala:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_scala:latest' with Dockerfile\nwarning: 1 deprecation\nwarning: 1 deprecation (since 2.13.3)\nwarning: 2 deprecations in total; re-run with -deprecation for details\nHere are the contents of my_file.txt\nCopying '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/scala/config.vsh.yaml' to '/viash_automount/tmp/RtmpPpsBDl/add-dependencies464e19e6ee9f/scala/foo.txt'."
  },
  {
    "objectID": "guide/component/use-helper-functions.html",
    "href": "guide/component/use-helper-functions.html",
    "title": "Use helper functions",
    "section": "",
    "text": "This documentation will walk you through the process of importing and using functions defined in an external file in your Viash component.\nThis can be useful for organizing and reusing code across multiple components or even within a single component.\nWe’ll cover the steps to set up the external file, import the functions, and use them within your Viash component. By the end of this guide, you’ll have a better understanding of how to leverage external files to improve your Viash development workflow."
  },
  {
    "objectID": "guide/component/use-helper-functions.html#create-helper-script",
    "href": "guide/component/use-helper-functions.html#create-helper-script",
    "title": "Use helper functions",
    "section": "Create helper script",
    "text": "Create helper script\nWhen you want to reuse a function multiple times, it might make sense to store them in a separate file. For example, your helper file could contain the following helper function:\n\nBashC#JavaScriptPythonRScala\n\n\nfunction copy_file {\n  echo \"Copying '$1' to '$2'.\"\n  cp -r \"$1\" \"$2\"\n}\n\n\n// No example available yet.\n\n\nconst fs = require('fs');\n\nfunction copy_file(source, dest) {\n  console.log(`Copying '${source}' to '${dest}'`)\n  fs.copyFile(source, dest, (err) =&gt; {\n    if (err) throw err;\n  });\n}\n\nmodule.exports = {\n  copy_file\n}\n\n\nimport shutil\n\ndef copy_file(source, dest):\n  print(f\"Copying '{source}' to '{dest}'.\")\n  shutil.copyfile(source, dest)\n\n\ncopy_file &lt;- function(source, dest) {\n  cat(\"Copying '\", source, \"' to '\", dest, \"'.\\n\", sep = \"\")\n  file.copy(source, dest)\n}\n\n\n// No example available yet."
  },
  {
    "objectID": "guide/component/use-helper-functions.html#add-resource-to-component",
    "href": "guide/component/use-helper-functions.html#add-resource-to-component",
    "title": "Use helper functions",
    "section": "Add resource to component",
    "text": "Add resource to component\nTo add a helper script as an external resource in a Viash component, you can use the resources section of the component’s config file. Not only does your resources section contain the main script, but it’s also used to specify external resources such as helper scripts and other files that the component needs to function.\nHere is an example of what the config file might look after adding the helper script:\n\nBashC#JavaScriptPythonRScala\n\n\nfunctionality:\n  name: example_bash\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\n    - path: helper.sh\nplatforms:\n  - type: docker\n    image: bash:4.0\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_csharp\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\n    - path: helper.csx\nplatforms:\n  - type: docker\n    image: ghcr.io/data-intuitive/dotnet-script:1.3.1\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_js\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\n    - path: helper.js\nplatforms:\n  - type: docker\n    image: node:19-bullseye-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_python\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\n    - path: helper.py\nplatforms:\n  - type: docker\n    image: python:3.10-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_r\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\n    - path: helper.R\nplatforms:\n  - type: docker\n    image: eddelbuettel/r2u:22.04\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_scala\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\n    - path: helper.scala\nplatforms:\n  - type: docker\n    image: sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n  - type: native\n  - type: nextflow"
  },
  {
    "objectID": "guide/component/use-helper-functions.html#import-helper-functions",
    "href": "guide/component/use-helper-functions.html#import-helper-functions",
    "title": "Use helper functions",
    "section": "Import helper functions",
    "text": "Import helper functions\nFinally, you need to import the helper functions in your script. The procedure will differ depending on the scripting language used. Below is an example of what the main script might look like after importing the helper file.\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# view resource file\nsource \"$meta_resources_dir/helper.sh\"\n\n# copy file\ncopy_file \"$par_input\" \"$par_output\"\n\n\n// No example available yet.\n\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// import helper function\nconst helper = require(`${meta['resources_dir']}/helper.js`);\n\n// copy file\nhelper.copy_file(par['input'], par['output'])\n\n\nimport sys\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# import helper function\nsys.path.append(meta['resources_dir'])\nfrom helper import copy_file\n\n# copy file\ncopy_file(par['input'], par['output'])\n\n\n## VIASH START\npar &lt;- list(\n  \"input\" = \"file.txt\",\n  \"output\" = \"output.txt\"\n)\n## VIASH END\n\n# import helper function\nsource(paste0(meta$resources_dir, \"/helper.R\"))\n\n# copy file\ncopy_file(par$input, par$output)\n\n\n// No example available yet."
  },
  {
    "objectID": "guide/component/create-component.html",
    "href": "guide/component/create-component.html",
    "title": "Create a new component",
    "section": "",
    "text": "A Viash component can be translated into one or more platforms: Native, Docker, Nextflow. Each of these platforms result in a different artifact:\nBelow we will create our first Viash component using any of the languages natively supported by Viash."
  },
  {
    "objectID": "guide/component/create-component.html#create-a-script",
    "href": "guide/component/create-component.html#create-a-script",
    "title": "Create a new component",
    "section": "Create a script",
    "text": "Create a script\nWhen creating a new Viash component, you can write a new script or use a pre-existing script. Below is a script that simply copies an input file to an output destination.\n\nBashC#JavaScriptPythonRScala\n\n\nCreate a new file named script.sh and copy the following content inside of it. This script will copy an input file to an output destination.\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nCreate a new file named script.csx and copy the following content inside of it. This script will copy an input file to an output destination.\nusing System.IO;\n\n// VIASH START\nvar par = new {\n  input = \"path/to/file.txt\",\n  output = \"output.txt\"\n};\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nCreate a new file named script.js and copy the following content inside of it. This script will copy an input file to an output destination.\nconst fs = require('fs');\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nCreate a new file named script.py and copy the following content inside of it. This script will copy an input file to an output destination.\nimport shutil\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\nCreate a new file named script.R and copy the following content inside of it. This script will copy an input file to an output destination.\n## VIASH START\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nCreate a new file named script.scala and copy the following content inside of it. This script will copy an input file to an output destination.\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\ncase class ViashPar(input: String, output: String)\nval par = ViashPar(\n  \"path/to/file.txt\",\n  \"output.txt\"\n)\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe par variable(s) appear to be hard coded, but they’re not! When running this script with Viash, Viash will strip away the section between VIASH START and VIASH END, and replace it with parameter values at runtime. The values included in this script are thus entirely for development and debugging purposes. More information on how this works will be given in Variables and meta-variables."
  },
  {
    "objectID": "guide/component/create-component.html#create-a-config",
    "href": "guide/component/create-component.html#create-a-config",
    "title": "Create a new component",
    "section": "Create a config",
    "text": "Create a config\nA Viash config file is a YAML file that describes the functionality of a component and the platform(s) it targets.\n\nBashC#JavaScriptPythonRScala\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_bash\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\nplatforms:\n  - type: docker\n    image: \"bash:4.0\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_csharp\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\nplatforms:\n  - type: docker\n    image: \"ghcr.io/data-intuitive/dotnet-script:1.3.1\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_js\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\nplatforms:\n  - type: docker\n    image: \"node:19-bullseye-slim\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_python\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\nplatforms:\n  - type: docker\n    image: \"python:3.10-slim\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_r\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\nplatforms:\n  - type: docker\n    image: \"eddelbuettel/r2u:22.04\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_scala\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\nplatforms:\n  - type: docker\n    image: \"sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\"\n  - type: native\n  - type: nextflow\n\n\n\nHere’s a breakdown of the different sections:\n\nfunctionality: A description of what the component does.\n\nname: The name of the component.\narguments: The input and output parameters of the script.\nresources: References to all necessary files and folders to make the component work.\n\nplatforms: Lists which platforms a component can target (i.e. Native, Docker or Nextflow)."
  },
  {
    "objectID": "guide/component/create-component.html#run-the-component",
    "href": "guide/component/create-component.html#run-the-component",
    "title": "Create a new component",
    "section": "Run the component",
    "text": "Run the component\nThat’s it! With these two steps, you created your first component. Next, you can use the viash run command to test whether it actually works as intended.\n\nBashC#JavaScriptPythonRScala\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_bash\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_bash:latest'\n[warning] Could not pull from 'example_bash:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_bash:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/bash/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/bash/foo.txt'.\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_csharp\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_csharp:latest'\n[warning] Could not pull from 'example_csharp:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_csharp:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/csharp/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/csharp/foo.txt'.\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_js\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_js:latest'\n[warning] Could not pull from 'example_js:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_js:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/js/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/js/foo.txt'\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_python\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_python:latest'\n[warning] Could not pull from 'example_python:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_python:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/python/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/python/foo.txt'.\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_r\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_r:latest'\n[warning] Could not pull from 'example_r:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_r:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/r/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/r/foo.txt'.\n[1] TRUE\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_scala\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_scala:latest'\n[warning] Could not pull from 'example_scala:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_scala:latest' with Dockerfile\nwarning: 1 deprecation; re-run with -deprecation for details\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/scala/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/scala/foo.txt'.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe double dash (--) between the viash command and the arguments is used to signify the end of the arguments passed to Viash and the start of those passed to the script. If you forgot to add these, you’ll get an error similar to this:\n\nviash run config.vsh.yaml \\\n  --input foo.txt \\\n  --output bar.txt\n\n[scallop] Error: Unknown option 'input'"
  },
  {
    "objectID": "guide/component/create-component.html#build-an-executable",
    "href": "guide/component/create-component.html#build-an-executable",
    "title": "Create a new component",
    "section": "Build an executable",
    "text": "Build an executable\nWe will now turn the Viash component into an executable.\n\nBashC#JavaScriptPythonRScala\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.sh\n└── target\n    └── example_bash\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.csx\n└── target\n    └── example_csharp\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.js\n└── target\n    └── example_js\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.py\n└── target\n    └── example_python\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.R\n└── target\n    └── example_r\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.scala\n└── target\n    └── example_scala\n\n1 directory, 4 files"
  },
  {
    "objectID": "guide/component/create-component.html#displaying-the-help-text",
    "href": "guide/component/create-component.html#displaying-the-help-text",
    "title": "Create a new component",
    "section": "Displaying the help text",
    "text": "Displaying the help text\nIt’s often useful to know what arguments an executable expects before trying to run it.\n\nBashC#JavaScriptPythonRScala\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_bash --help\n\nexample_bash\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_csharp --help\n\nexample_csharp\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_js --help\n\nexample_js\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_python --help\n\nexample_python\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_r --help\n\nexample_r\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_scala --help\n\nexample_scala\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\n\nThis executable takes a file as input and will create an output file."
  },
  {
    "objectID": "guide/component/create-component.html#running-the-executable",
    "href": "guide/component/create-component.html#running-the-executable",
    "title": "Create a new component",
    "section": "Running the executable",
    "text": "Running the executable\nRunning an executable is the same as any other executable on your system.\n\nBashC#JavaScriptPythonRScala\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_bash --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/bash/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/bash/output.txt'.\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  428 May  8 06:42 config.vsh.yaml\n-rw-r--r-- 1 runner docker  428 May  8 06:42 foo.txt\n-rw-r--r-- 1 runner docker  428 May  8 06:45 output.txt\n-rwxr-xr-x 1 runner docker  181 May  8 06:42 script.sh\ndrwxr-xr-x 2 runner docker 4096 May  8 06:44 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_csharp --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/csharp/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/csharp/output.txt'.\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  467 May  8 06:42 config.vsh.yaml\n-rw-r--r-- 1 runner docker  467 May  8 06:42 foo.txt\n-rw-r--r-- 1 runner docker  467 May  8 06:42 output.txt\n-rw-r--r-- 1 runner docker  237 May  8 06:42 script.csx\ndrwxr-xr-x 2 runner docker 4096 May  8 06:44 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_js --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/js/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/js/output.txt'\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  445 May  8 06:42 config.vsh.yaml\n-rw-r--r-- 1 runner docker  445 May  8 06:43 foo.txt\n-rw-r--r-- 1 runner docker  445 May  8 06:45 output.txt\n-rwxr-xr-x 1 runner docker  282 May  8 06:42 script.js\ndrwxr-xr-x 2 runner docker 4096 May  8 06:45 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_python --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/python/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/python/output.txt'.\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  440 May  8 06:42 config.vsh.yaml\n-rw-r--r-- 1 runner docker  440 May  8 06:43 foo.txt\n-rw-r--r-- 1 runner docker  440 May  8 06:45 output.txt\n-rwxr-xr-x 1 runner docker  216 May  8 06:42 script.py\ndrwxr-xr-x 2 runner docker 4096 May  8 06:45 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_r --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/r/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/r/output.txt'.\n[1] TRUE\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  435 May  8 06:42 config.vsh.yaml\n-rw-r--r-- 1 runner docker  435 May  8 06:44 foo.txt\n-rw-r--r-- 1 runner docker  435 May  8 06:45 output.txt\n-rwxr-xr-x 1 runner docker  207 May  8 06:42 script.R\ndrwxr-xr-x 2 runner docker 4096 May  8 06:45 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_scala --input config.vsh.yaml --output output.txt\n\nwarning: 1 deprecation; re-run with -deprecation for details\nCopying '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/scala/config.vsh.yaml' to '/viash_automount/tmp/RtmphIEirc/create_new_component5ceb582e7209/scala/output.txt'.\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  479 May  8 06:42 config.vsh.yaml\n-rw-r--r-- 1 runner docker  479 May  8 06:44 foo.txt\n-rw-r--r-- 1 runner docker  479 May  8 06:45 output.txt\n-rw-r--r-- 1 runner docker  435 May  8 06:42 script.scala\ndrwxr-xr-x 2 runner docker 4096 May  8 06:45 target"
  },
  {
    "objectID": "guide/component/add-dependencies.html",
    "href": "guide/component/add-dependencies.html",
    "title": "Add dependencies",
    "section": "",
    "text": "In the previous section, reproducibility of our Viash component was ensured by a predefined Docker image such as bash:4.0 and python:3.10. However, your script might require other software dependencies, such as command-line tools or Python and R packages.\nBy default, Viash will build component-specific Docker images. This means that every Viash component can have its own set of dependencies."
  },
  {
    "objectID": "guide/component/add-dependencies.html#extended-example",
    "href": "guide/component/add-dependencies.html#extended-example",
    "title": "Add dependencies",
    "section": "Extended example",
    "text": "Extended example\nBelow is an example where additional software is added to a base Docker image using the setup section of a Docker platform.\n\nBashC#JavaScriptPythonRScala\n\n\nfunctionality:\n  name: example_bash_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\nplatforms:\n  - type: docker\n    image: bash:4.0\n    setup:\n      - type: apk\n        packages:\n          - curl\n          - wget\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_csharp_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\nplatforms:\n  - type: docker\n    image: ghcr.io/data-intuitive/dotnet-script:1.3.1\n    setup:\n      - type: apk\n        packages:\n          - curl\n          - wget\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_js_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\nplatforms:\n  - type: docker\n    image: node:19-bullseye-slim\n    setup:\n      - type: apt\n        packages:\n          - curl\n          - wget\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_python_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\nplatforms:\n  - type: docker\n    image: python:3.10-slim\n    setup:\n      - type: apt\n        packages:\n          - curl\n          - wget\n      - type: python\n        packages: anndata\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_r_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\nplatforms:\n  - type: docker\n    image: eddelbuettel/r2u:22.04\n    setup:\n      - type: apt\n        packages:\n          - curl\n          - wget\n      - type: r\n        packages: tidyverse\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_scala_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\nplatforms:\n  - type: docker\n    image: sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n    setup:\n      - type: apt\n        packages:\n          - curl\n          - wget\n  - type: native\n  - type: nextflow\n\n\n\nYou can (re)build a component’s Docker image by passing the ---setup flag to the executable:\n\nBashC#JavaScriptPythonRScala\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_bash_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_bash_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_csharp_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_csharp_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_js_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_js_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_python_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_python_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_r_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_r_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_scala_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_scala_with_setup:latest' with Dockerfile\n\n\n\n\n\nAlternatively, you can also build the executable and it’s corresponding Docker image in one go:\n\nBashC#JavaScriptPythonRScala\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild"
  },
  {
    "objectID": "guide/component/add-dependencies.html#steps-for-creating-a-custom-docker-platform",
    "href": "guide/component/add-dependencies.html#steps-for-creating-a-custom-docker-platform",
    "title": "Add dependencies",
    "section": "Steps for creating a custom Docker platform",
    "text": "Steps for creating a custom Docker platform\nHere is a series of steps you can follow to add a Docker platform to your Viash component from scratch.\n\nStep 1: Choose a base image\nTo start off, you’ll need to choose a base Docker image to start working with. In deciding which base image to use, it’s important to consider the size of the image and how trustworthy the source image is.\n\n\n\n\n\n\nTip\n\n\n\nIf the container does not have Bash installed, don’t forget to install this in Step 2.\n\n\nHere is a list of base images we commonly use:\n\nBash: bash, ubuntu\nC#: ghcr.io/data-intuitive/dotnet-script\nJavaScript: node\nPython: python, nvcr.io/nvidia/pytorch\nR: eddelbuettel/r2u, rocker/tidyverse\nScala: sbtscala/scala-sbt\n\nSee the section on ‘minimum requirements’ when building a custom base image.\n\n\nStep 2: Installing additional dependencies\nYou can use the setup section to many different types of layers. Here are some examples:\n\nApk requirements:\nsetup:\n  - type: apk\n    packages: [ curl ]\nApt requirements:\nsetup:\n  - type: apk\n    packages: [ curl ]\nDocker requirements:\nsetup:\n  - type: docker\n    build_args: \"R_VERSION=hello_world\"\n    run: |\n      echo 'Run a custom command'\n      echo 'Foo' &gt; /path/to/file.txt\nJavascript requirements:\nsetup:\n  - type: javascript\n    packages: [ express ]\n    github: [ \"expressjs/express\" ]\nPython requirements:\nsetup:\n  - type: python\n    packages: [ anndata ]\n  github: [ jkbr/httpie ]\nR requirements:\nsetup:\n  - type: r\n    packages: [ anndata ]\n    bioc: [ AnnotationDbi, SingleCellExperiment ]\n    github: rcannood/SCORPIUS\nRuby requirements:\nsetup:\n  - type: ruby\n    packages: [ pry ]\nYum requirements:\nsetup:\n  - type: ruby\n    packages: [ pry ]\n    github: [ \"pry/pry\" ]\n\nFor more information on the possible setup entries, check out the reference documentation.\n\n\n\n\n\n\nImportant\n\n\n\nDon’t forget to rebuild the Docker image after making changes to the setup section of your Docker platform (see next step).\n\n\n\n\nStep 3: Rebuild Docker image\nAfter adding additional setup entries, it’s important to rerun ---setup cachedbuild to rebuild the Docker image, as Viash will not rebuild the Docker image when it already exists.\n\nBashC#JavaScriptPythonRScala\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\n\nYou can choose what strategy to build an executable with when using a Docker backend by passing the --setup option followed by one of the strategies below.\nBuilding an image:\n\nalwaysbuild / build / b: Always build the image from the dockerfile. This is the default setup strategy.\nalwayscachedbuild / cachedbuild / cb: Always build the image from the dockerfile, with caching enabled.\nifneedbebuild: Build the image if it does not exist locally.\nifneedbecachedbuild: Build the image with caching enabled if it does not exist locally.\n\nPulling an image:\n\nalwayspull / pull / p: Try to pull the container from Docker Hub or the specified docker registry.\nalwayspullelsebuild / pullelsebuild: Try to pull the image from a registry and build it if it doesn’t exist.\nalwayspullelsecachedbuild / pullelsecachedbuild: Try to pull the image from a registry and build it with caching if it doesn’t exist.\nifneedbepull: If the image does not exist locally, pull the image.\nifneedbepullelsebuild If the image does not exist locally, pull the image. If the image does exist, build it.\nifneedbepullelsecachedbuild: If the image does not exist locally, pull the image. If the image does exist, build it with caching enabled.\n\nPushing an image:\n\npush: Push the container to Docker Hub or the specified docker registry.\npushifnotpresent Push the container to Docker Hub or the specified docker registry if the specified tag does not exist yet.\n\nDoing nothing:\n\ndonothing / meh: Do not build or pull anything."
  },
  {
    "objectID": "guide/component/add-dependencies.html#troubleshooting",
    "href": "guide/component/add-dependencies.html#troubleshooting",
    "title": "Add dependencies",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nBelow are several steps that might help you troubleshoot the image when the setup fails.\n\nView Dockerfile\nYou can view the actual Dockerfile used by Viash by passing the ---dockerfile flag:\n\nBashC#JavaScriptPythonRScala\n\n\n\ntarget/example_bash_with_setup ---dockerfile\n\nFROM bash:4.0\n\nRUN apk add --no-cache curl wget\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_bash_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-05-08T06:46:01Z\"\n\n\n\n\n\ntarget/example_csharp_with_setup ---dockerfile\n\nFROM ghcr.io/data-intuitive/dotnet-script:1.3.1\n\nRUN apk add --no-cache curl wget\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_csharp_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-05-08T06:46:11Z\"\n\n\n\n\n\ntarget/example_js_with_setup ---dockerfile\n\nFROM node:19-bullseye-slim\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y curl wget && \\\n  rm -rf /var/lib/apt/lists/*\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_js_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-05-08T06:46:30Z\"\n\n\n\n\n\ntarget/example_python_with_setup ---dockerfile\n\nFROM python:3.10-slim\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y curl wget && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN pip install --upgrade pip && \\\n  pip install --upgrade --no-cache-dir \"anndata\"\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_python_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-05-08T06:46:48Z\"\n\n\n\n\n\ntarget/example_r_with_setup ---dockerfile\n\nFROM eddelbuettel/r2u:22.04\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y curl wget && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN Rscript -e 'if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\")' && \\\n  Rscript -e 'remotes::install_cran(c(\"tidyverse\"), repos = \"https://cran.rstudio.com\")'\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_r_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-05-08T06:47:23Z\"\n\n\n\n\n\ntarget/example_scala_with_setup ---dockerfile\n\nFROM sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y curl wget && \\\n  rm -rf /var/lib/apt/lists/*\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_scala_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-05-08T06:48:10Z\"\n\n\n\n\n\n\n\nEnter debugging session\nYou can also hop in a Bash session inside the Docker image using the ---debug flag:\n\nBashC#JavaScriptPythonRScala\n\n\ntarget/example_bash_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_bash_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_csharp_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_csharp_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_js_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_js_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_python_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_python_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_r_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_r_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_scala_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_scala_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\n\nThis is useful for interactively debugging issues inside the container. For example, for figuring out whether you need to use apk, apt or yum to install software and to search for the exact name of packages like libcurl4-openssl-dev."
  },
  {
    "objectID": "guide/component/add-dependencies.html#alternative-solutions",
    "href": "guide/component/add-dependencies.html#alternative-solutions",
    "title": "Add dependencies",
    "section": "Alternative solutions",
    "text": "Alternative solutions\nThere are multiple ways you might try to find a Docker image which contains the right set of dependencies for your component:\n\nBrowse Docker Hub: Look a Docker image on Docker Hub or other Docker registries which has the right set of dependencies.\n\nThis is generally not recommended because it might take a long time to find a pre-existing image with the right set of dependencies\nPoses a serious security risk.\n\nWrite a custom Dockerfile: You can write a custom Dockerfile to build your own Docker image and store it in a Docker registry, effectively creating a new ‘trusted’ base image.\n\nRequires manual bookkeeping of which Docker images are used in which components.\nNot difficult but requires more know-how on how to build custom Docker images.\n\nUse Viash setup to build component-specific images: The methodology described above.\n\nEasier to add / change dependencies to one component without breaking another\nStore images in a centralized container registry"
  },
  {
    "objectID": "guide/component/add-dependencies.html#behind-the-scenes",
    "href": "guide/component/add-dependencies.html#behind-the-scenes",
    "title": "Add dependencies",
    "section": "Behind the scenes",
    "text": "Behind the scenes\n\nAuto-mount\nAny executable built by Viash with a Docker platform will automatically mount the directories of files passed to the executable as arguments. For example, when running:\n./my_executable --input /foo/bar/file.txt --output /dest/path\nThe executable will automatically mount the /foo/bar and /dest folder to /viash_automount/foo/bar/ and /viash_automount/dest inside the Docker container.\n\n\nAuto-chown\nBy default, files created and modified by a Docker container are owned by root. By default, Viash automatically changes the owner of any files defined in the config file to the user running the executable. This behaviour can be overridden by setting the chown setting to false in your config file.\nExample with standard Docker:\ndocker run -v `pwd`:/pwd bash:4.0 touch /pwd/file.txt\nls -l\n-rw-r--r--. 1 root     root         0 Jan 26 16:03 file.txt\nExample with a Viash executable:\n/my_executable --output file.txt\n-rw-r--r--. 1 myuser   myuser        Jan 26 16:03 file.txt\n\n\nMinimum requirements for custom Docker images\nViash components only require a minimal set of dependencies which need to be available inside the Docker image:\n\nBash: bash.\nC#: bash and dotnet-script.\nJavaScript: bash and node (Node.js).\nPython: bash, python and pip.\nR: bash and R.\nScala: bash, openjdk-devel and sbt."
  },
  {
    "objectID": "guide/component/unit-testing.html",
    "href": "guide/component/unit-testing.html",
    "title": "Unit testing",
    "section": "",
    "text": "We recommend adding unit tests to all of your components in a project as soon as possible. Implementing unit tests not only ensures that your component works, but it also makes the project more maintainable in the long run as you will be notified when a component breaks.\nThis page describes how to add a unit test to your component."
  },
  {
    "objectID": "guide/component/unit-testing.html#create-unit-test",
    "href": "guide/component/unit-testing.html#create-unit-test",
    "title": "Unit testing",
    "section": "Create unit test",
    "text": "Create unit test\nBelow is an example of how to add a unit test to a Viash component.\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\nmeta_executable=\"target/example_bash\"\n## VIASH END\n\necho \"&gt;&gt;&gt; Create input test file\"\necho \"foo\" &gt; foo.txt\n\necho \"&gt;&gt;&gt; Run executable\"\n$meta_executable --input foo.txt --output bar.txt\n\necho \"&gt;&gt;&gt; Check whether output file exists\"\n[[ -f bar.txt ]] (echo \"Output file could not be found!\" && exit 1)\n\necho \"&gt;&gt;&gt; Check whether input and output file are the same\"\ncmp foo.txt bar.tx (echo \"Input and output files are different!\" && exit 1)\n\necho \"&gt;&gt;&gt; Test finished successfully\"\n\n\nusing System;\nusing System.IO;\nusing System.Diagnostics;\n\n// VIASH START\nvar meta = new {\n  executable = \"target/example_csharp\"\n};\n// VIASH END\n\nstring inputPath = \"foo.txt\";\nstring outputPath = \"bar.txt\";\nstring content = \"hello\\nthere\\n\";\n\nConsole.WriteLine(\"&gt;&gt;&gt; Create input test file\");\nFile.WriteAllText(inputPath, content);\n\nConsole.WriteLine(\"&gt;&gt;&gt; Run executable\");\n\nvar startInfo = new ProcessStartInfo(meta.executable)\n{\n    Arguments = $\"--input {inputPath} --output {outputPath}\",\n    UseShellExecute = false,\n    RedirectStandardOutput = true,\n    CreateNoWindow = true\n};\nusing(var cmd = Process.Start(startInfo))\n{\n    cmd.WaitForExit();\n}\n\n\nConsole.WriteLine(\"&gt;&gt;&gt; Check whether output file exists\");\nif (!File.Exists(outputPath)) {\n    Console.WriteLine(\"Output file was not found\");\n    Environment.Exit(1);\n}\n\nConsole.WriteLine(\"&gt;&gt;&gt; Check whether input and output file are the same\");\nvar outputLines = File.ReadAllText(outputPath);\nif (content != outputLines) {\n    Console.WriteLine(\n        \"Input and output should be the same\\n\" +\n        $\"expected content: {content}\\n\" +\n        $\"found: {outputLines}\\n\"\n    );\n    Environment.Exit(1);\n}\n\nConsole.WriteLine(\"&gt;&gt;&gt; Test finished successfully\");\n\n\nconst fs = require('fs');\nconst child_process = require('child_process');\n\n// VIASH START\nlet meta = {\n  'executable': 'target/example_js'\n};\n// VIASH END\n\nconst inputPath = 'foo.txt';\nconst outputPath = 'bar.txt';\nconst content = 'hello\\nthere\\n';\n\nconsole.log('&gt;&gt;&gt; Create input test file');\nfs.writeFileSync(inputPath, content, 'utf8');\n\nconsole.log('&gt;&gt;&gt; Run executable');\nconst cmdArgs = [\n  '--input', inputPath,\n  '--output', outputPath\n];\nconst child = child_process.spawnSync(meta[\"executable\"], cmdArgs);\nif (child.error) {\n  console.error(`Error: ${child.error}`);\n  process.exit(1);\n}\n\nconsole.log('&gt;&gt;&gt; Check whether output file exists');\nif (!fs.existsSync(outputPath)) {\n  console.error('Output file was not found');\n  process.exit(1);\n}\n\nconsole.log('&gt;&gt;&gt; Check whether input and output file are the same');\nconst outputLines = fs.readFileSync(outputPath, 'utf8');\nif (content !== outputLines) {\n  console.error(\n    `Input and output should be the same\\n` +\n    `expected content: ${content}\\n` +\n    `found: ${outputLines}\\n`\n  );\n  process.exit(1);\n}\n\nconsole.log('&gt;&gt;&gt; Test finished successfully');\n\n\nimport subprocess\nimport os\n\ninput_path = \"foo.txt\"\noutput_path = \"bar.txt\"\ncontent = \"hello\\nthere\\n\"\n\n## VIASH START\nmeta = {\n  \"executable\": \"target/example_python\"\n}\n## VIASH END\n\nprint(\"&gt;&gt;&gt; Create input test file\")\nwith open(input_path, \"w\") as file:\n  file.write(content)\n\nprint(\"&gt;&gt;&gt; Run executable\")\ncmd_args = [\n  meta[\"executable\"],\n  \"--input\", input_path,\n  \"--output\", output_path\n]\nsubprocess.run(cmd_args, check=True)\n\nprint(\"&gt;&gt;&gt; Check whether output file exists\")\nassert os.path.exists(output_path), \"Output file was not found\"\n\nprint(\"&gt;&gt;&gt; Check whether input and output file are the same\")\nwith open(output_path, \"r\", encoding=\"utf8\") as file:\n  output_lines = file.read()\n\nassert content == output_lines, \\\n  \"Input and output should be the same\" \\\n  f\"expected content: {content}\" \\\n  f\"found: {output_lines}\"\n\nprint(\"&gt;&gt;&gt; Test finished successfully\")\n\n\n## VIASH START\nmeta &lt;- list(\n  \"target/example_r\"\n)\n## VIASH END\n\ninput_path &lt;- \"foo.txt\"\noutput_path &lt;- \"bar.txt\"\ncontent &lt;- c(\"hello\", \"there\")\n\ncat(\"&gt;&gt;&gt; Create input test file\\n\")\nwriteLines(content, input_path)\n\ncat(\"&gt;&gt;&gt; Run executable\\n\")\nsystem2(\n  meta$executable,\n  c(\n    \"--input\", input_path,\n    \"--output\", output_path\n  )\n)\n\ncat(\"&gt;&gt;&gt; Check whether output file exists\\n\")\nif (!file.exists(output_path)) {\n  stop(\"Output file was not found\")\n}\n\ncat(\"&gt;&gt;&gt; Check whether input and output file are the same\\n\")\noutput_lines &lt;- readLines(output_path)\n\nif (!identical(content, output_lines)) {\n  stop(paste0(\n    \"Input and output should be the same\\n\",\n    \"expected content: \", content, \"\\n\",\n    \"found: \", output_lines, \"\\n\"\n  ))\n}\n\ncat(\"&gt;&gt;&gt; Test finished successfully\\n\")\n\n\nimport scala.sys.process._\nimport java.nio.file.{Files, Paths}\nimport scala.io.Source\n\n// VIASH START\ncase class ViashMeta(executable: String)\nval meta = ViashMeta(\n  \"target/example_scala\"\n)\n// VIASH END\nval inputPath = Paths.get(\"foo.txt\")\nval outputPath = Paths.get(\"bar.txt\")\nval content = \"hello\\nthere\"\n\nprintln(\"&gt;&gt;&gt; Create input test file\")\nFiles.write(inputPath, content.getBytes(\"UTF-8\"))\n\nprintln(\"&gt;&gt;&gt; Run executable\")\ns\"${meta.executable} --input $inputPath --output $outputPath\".!\n\nprintln(\"&gt;&gt;&gt; Check whether output file exists\")\nassert(Files.exists(outputPath), \"Output file not found\")\n\nprintln(\"&gt;&gt;&gt; Check whether input and output file are the same\")\nval outputLines = Source.fromFile(outputPath.toFile()).getLines.mkString(\"\\n\")\nassert(\n  content == outputLines, \n  s\"\"\"Output not the same\nexpected: '$content'\nfound: '$outputLines'\n\"\"\".stripMargin\n)\n\nprintln(\"&gt;&gt;&gt; Test finished successfully\")\n\n\n\n\nCreate an input file “foo.txt” with some sample content.\nRun an executable file specified in the “meta” dictionary with the arguments “–input foo.txt” and “–output bar.txt”.\nCheck whether the output file “bar.txt” exists.\nCheck whether the content of the output file is the same as the content of the input file.\nIf both checks pass, the script prints “Test finished successfully”.\n\n\n\n\n\n\n\nImportant\n\n\n\nA test script doesn’t need to be written in the same scripting language as the main script, as long as all of the required dependencies are available. This means the main script could be written in R, but the unit test could be written in Bash."
  },
  {
    "objectID": "guide/component/unit-testing.html#add-test-to-config",
    "href": "guide/component/unit-testing.html#add-test-to-config",
    "title": "Unit testing",
    "section": "Add test to config",
    "text": "Add test to config\nNext, we need to add the unit test to the test_resources section in the Viash config.\n\nBashC#JavaScriptPythonRScala\n\n\nfunctionality:\n  name: example_bash\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\n  test_resources:\n    - type: bash_script\n      path: test.sh\nplatforms:\n  - type: docker\n    image: bash:4.0\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_csharp\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\n  test_resources:\n    - type: csharp_script\n      path: test.csx\nplatforms:\n  - type: docker\n    image: ghcr.io/data-intuitive/dotnet-script:1.3.1\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_js\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\n  test_resources:\n    - type: javascript_script\n      path: test.js\nplatforms:\n  - type: docker\n    image: node:19-bullseye-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_python\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\n  test_resources:\n    - type: python_script\n      path: test.py\nplatforms:\n  - type: docker\n    image: python:3.10-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_r\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\n  test_resources:\n    - type: r_script\n      path: test.R\nplatforms:\n  - type: docker\n    image: eddelbuettel/r2u:22.04\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_scala\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\n  test_resources:\n    - type: scala_script\n      path: test.scala\nplatforms:\n  - type: docker\n    image: sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n  - type: native\n  - type: nextflow\n\n\n\nNote that if you can add multiple unit tests to the test_resources section, they will all be evaluated. You can also add other resources, similar to what is described in the page on adding resources."
  },
  {
    "objectID": "guide/component/unit-testing.html#run-the-unit-test",
    "href": "guide/component/unit-testing.html#run-the-unit-test",
    "title": "Unit testing",
    "section": "Run the unit test",
    "text": "Run the unit test\nYou can run the unit test as follows:\n\nBashC#JavaScriptPythonRScala\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_bash9693042061150684523'\n====================================================================\n+/tmp/viash_test_example_bash9693042061150684523/build_executable/example_bash ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_bash:test' with Dockerfile\n[info] Running 'docker build -t example_bash:test /tmp/viash_test_example_bash9693042061150684523/build_executable -f /tmp/viash_test_example_bash9693042061150684523/build_executable/tmp/dockerbuild-example_bash-Z35r8L/Dockerfile'\nSending build context to Docker daemon  37.38kB\n\nStep 1/5 : FROM bash:4.0\n4.0: Pulling from library/bash\nf56be85fc22e: Pulling fs layer\nb37c235d8c18: Pulling fs layer\n675502545f87: Pulling fs layer\n675502545f87: Verifying Checksum\n675502545f87: Download complete\nb37c235d8c18: Verifying Checksum\nb37c235d8c18: Download complete\nf56be85fc22e: Verifying Checksum\nf56be85fc22e: Download complete\nf56be85fc22e: Pull complete\nb37c235d8c18: Pull complete\n675502545f87: Pull complete\nDigest: sha256:0e83b72ea0eb9c9a742f661f9c4521453d41cdbdecc4a2c0da72eb17606e8619\nStatus: Downloaded newer image for bash:4.0\n ---&gt; ebb6422cb43d\nStep 2/5 : RUN :\n ---&gt; Running in 556b1bad9130\nRemoving intermediate container 556b1bad9130\n ---&gt; 82a5ae94a39b\nStep 3/5 : LABEL org.opencontainers.image.description=\"Companion container for running component example_bash\"\n ---&gt; Running in db6ec753d584\nRemoving intermediate container db6ec753d584\n ---&gt; d55e4395ca29\nStep 4/5 : LABEL org.opencontainers.image.created=\"2023-05-08T06:49:09Z\"\n ---&gt; Running in 90fd8c698956\nRemoving intermediate container 90fd8c698956\n ---&gt; 495e4b740e71\nStep 5/5 : LABEL org.opencontainers.image.version=\"test\"\n ---&gt; Running in d8d8d82fcca7\nRemoving intermediate container d8d8d82fcca7\n ---&gt; 05b82bcf92d7\nSuccessfully built 05b82bcf92d7\nSuccessfully tagged example_bash:test\n====================================================================\n+/tmp/viash_test_example_bash9693042061150684523/test_test/test_executable\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\nCopying 'foo.txt' to 'bar.txt'.\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\n\u001b[32mSUCCESS! All 1 out of 1 test scripts succeeded!\u001b[0m\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_csharp7480050934828258604'\n====================================================================\n+/tmp/viash_test_example_csharp7480050934828258604/build_executable/example_csharp ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_csharp:test' with Dockerfile\n[info] Running 'docker build -t example_csharp:test /tmp/viash_test_example_csharp7480050934828258604/build_executable -f /tmp/viash_test_example_csharp7480050934828258604/build_executable/tmp/dockerbuild-example_csharp-ivsqLY/Dockerfile'\nSending build context to Docker daemon  36.86kB\n\nStep 1/5 : FROM ghcr.io/data-intuitive/dotnet-script:1.3.1\n1.3.1: Pulling from data-intuitive/dotnet-script\ndf9b9388f04a: Pulling fs layer\n3ae3a38ed752: Pulling fs layer\nd772c6b09cca: Pulling fs layer\n2c56128c63bd: Pulling fs layer\n6c2be9941089: Pulling fs layer\n5a0c86bcd85d: Pulling fs layer\n5e733ff9c308: Pulling fs layer\n4937da28ea60: Pulling fs layer\n16def9f17d8d: Pulling fs layer\n03ac08f8f1d3: Pulling fs layer\n5a0c86bcd85d: Waiting\n5e733ff9c308: Waiting\n4937da28ea60: Waiting\n16def9f17d8d: Waiting\n03ac08f8f1d3: Waiting\n2c56128c63bd: Waiting\n6c2be9941089: Waiting\n3ae3a38ed752: Verifying Checksum\n3ae3a38ed752: Download complete\ndf9b9388f04a: Verifying Checksum\ndf9b9388f04a: Download complete\ndf9b9388f04a: Pull complete\nd772c6b09cca: Verifying Checksum\nd772c6b09cca: Download complete\n2c56128c63bd: Verifying Checksum\n2c56128c63bd: Download complete\n3ae3a38ed752: Pull complete\n6c2be9941089: Verifying Checksum\n6c2be9941089: Download complete\n5e733ff9c308: Verifying Checksum\n5e733ff9c308: Download complete\n16def9f17d8d: Verifying Checksum\n16def9f17d8d: Download complete\n4937da28ea60: Verifying Checksum\n4937da28ea60: Download complete\n5a0c86bcd85d: Verifying Checksum\n5a0c86bcd85d: Download complete\n03ac08f8f1d3: Verifying Checksum\n03ac08f8f1d3: Download complete\nd772c6b09cca: Pull complete\n2c56128c63bd: Pull complete\n6c2be9941089: Pull complete\n5a0c86bcd85d: Pull complete\n5e733ff9c308: Pull complete\n4937da28ea60: Pull complete\n16def9f17d8d: Pull complete\n03ac08f8f1d3: Pull complete\nDigest: sha256:d95bf2a2b3e095e5b02960ab4ddd4674d798a1493ed0dc5cf427c77a5ed90ed3\nStatus: Downloaded newer image for ghcr.io/data-intuitive/dotnet-script:1.3.1\n ---&gt; 1102243946ae\nStep 2/5 : RUN :\n ---&gt; Running in 541d65f5bfea\nRemoving intermediate container 541d65f5bfea\n ---&gt; a40ce5291bb3\nStep 3/5 : LABEL org.opencontainers.image.description=\"Companion container for running component example_csharp\"\n ---&gt; Running in 346eea71fc1a\nRemoving intermediate container 346eea71fc1a\n ---&gt; e7ba720318cd\nStep 4/5 : LABEL org.opencontainers.image.created=\"2023-05-08T06:49:20Z\"\n ---&gt; Running in a1405f3ccf76\nRemoving intermediate container a1405f3ccf76\n ---&gt; c48974e4cc43\nStep 5/5 : LABEL org.opencontainers.image.version=\"test\"\n ---&gt; Running in 16db35e46477\nRemoving intermediate container 16db35e46477\n ---&gt; 14235c2928e9\nSuccessfully built 14235c2928e9\nSuccessfully tagged example_csharp:test\n====================================================================\n+/tmp/viash_test_example_csharp7480050934828258604/test_test/test_executable\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\n\u001b[32mSUCCESS! All 1 out of 1 test scripts succeeded!\u001b[0m\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_js12126640130565777398'\n====================================================================\n+/tmp/viash_test_example_js12126640130565777398/build_executable/example_js ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_js:test' with Dockerfile\n[info] Running 'docker build -t example_js:test /tmp/viash_test_example_js12126640130565777398/build_executable -f /tmp/viash_test_example_js12126640130565777398/build_executable/tmp/dockerbuild-example_js-2ISFCv/Dockerfile'\nSending build context to Docker daemon  37.38kB\n\nStep 1/5 : FROM node:19-bullseye-slim\n19-bullseye-slim: Pulling from library/node\n9e3ea8720c6d: Pulling fs layer\n22cee24855b2: Pulling fs layer\n73bcd5a2d134: Pulling fs layer\n8b90380c171f: Pulling fs layer\n4c6e2e4c8445: Pulling fs layer\n8b90380c171f: Waiting\n4c6e2e4c8445: Waiting\n22cee24855b2: Verifying Checksum\n22cee24855b2: Download complete\n9e3ea8720c6d: Verifying Checksum\n9e3ea8720c6d: Download complete\n73bcd5a2d134: Verifying Checksum\n73bcd5a2d134: Download complete\n8b90380c171f: Verifying Checksum\n8b90380c171f: Download complete\n4c6e2e4c8445: Verifying Checksum\n4c6e2e4c8445: Download complete\n9e3ea8720c6d: Pull complete\n22cee24855b2: Pull complete\n73bcd5a2d134: Pull complete\n8b90380c171f: Pull complete\n4c6e2e4c8445: Pull complete\nDigest: sha256:f770c8e133e259556fcbd64d852a1e39ffe2da2814ee58bab3ac985fa9b50da5\nStatus: Downloaded newer image for node:19-bullseye-slim\n ---&gt; 52d086ee59d6\nStep 2/5 : RUN :\n ---&gt; Running in 1932d4b59695\nRemoving intermediate container 1932d4b59695\n ---&gt; e2a949788e2b\nStep 3/5 : LABEL org.opencontainers.image.description=\"Companion container for running component example_js\"\n ---&gt; Running in 9620c14724df\nRemoving intermediate container 9620c14724df\n ---&gt; 33db41b7d005\nStep 4/5 : LABEL org.opencontainers.image.created=\"2023-05-08T06:49:49Z\"\n ---&gt; Running in 785c7a23d051\nRemoving intermediate container 785c7a23d051\n ---&gt; 38239831324a\nStep 5/5 : LABEL org.opencontainers.image.version=\"test\"\n ---&gt; Running in 693f065d9922\nRemoving intermediate container 693f065d9922\n ---&gt; b991461a7801\nSuccessfully built b991461a7801\nSuccessfully tagged example_js:test\n====================================================================\n+/tmp/viash_test_example_js12126640130565777398/test_test/test_executable\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\n\u001b[32mSUCCESS! All 1 out of 1 test scripts succeeded!\u001b[0m\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_python14893608876143098635'\n====================================================================\n+/tmp/viash_test_example_python14893608876143098635/build_executable/example_python ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_python:test' with Dockerfile\n[info] Running 'docker build -t example_python:test /tmp/viash_test_example_python14893608876143098635/build_executable -f /tmp/viash_test_example_python14893608876143098635/build_executable/tmp/dockerbuild-example_python-rpsZ1o/Dockerfile'\nSending build context to Docker daemon  36.86kB\n\nStep 1/5 : FROM python:3.10-slim\n3.10-slim: Pulling from library/python\n9e3ea8720c6d: Already exists\nfe9f5cfcf49b: Pulling fs layer\n76b1f1a2fcef: Pulling fs layer\nd573939d7fe2: Pulling fs layer\n184536648910: Pulling fs layer\n184536648910: Waiting\nd573939d7fe2: Verifying Checksum\nd573939d7fe2: Download complete\nfe9f5cfcf49b: Verifying Checksum\nfe9f5cfcf49b: Download complete\n76b1f1a2fcef: Verifying Checksum\n76b1f1a2fcef: Download complete\nfe9f5cfcf49b: Pull complete\n184536648910: Verifying Checksum\n184536648910: Download complete\n76b1f1a2fcef: Pull complete\nd573939d7fe2: Pull complete\n184536648910: Pull complete\nDigest: sha256:12af6fa557c55d85754107e59d0e21530d7a253757e128b3682d138e58712e54\nStatus: Downloaded newer image for python:3.10-slim\n ---&gt; bacfe8322034\nStep 2/5 : RUN :\n ---&gt; Running in 859cc813a9f2\nRemoving intermediate container 859cc813a9f2\n ---&gt; f31f7d5a3d9a\nStep 3/5 : LABEL org.opencontainers.image.description=\"Companion container for running component example_python\"\n ---&gt; Running in 94cfa5271b3e\nRemoving intermediate container 94cfa5271b3e\n ---&gt; 33525dfe65aa\nStep 4/5 : LABEL org.opencontainers.image.created=\"2023-05-08T06:50:04Z\"\n ---&gt; Running in 9939bf39ab3d\nRemoving intermediate container 9939bf39ab3d\n ---&gt; 6f006b076075\nStep 5/5 : LABEL org.opencontainers.image.version=\"test\"\n ---&gt; Running in e63d4b05de69\nRemoving intermediate container e63d4b05de69\n ---&gt; de7839ce6040\nSuccessfully built de7839ce6040\nSuccessfully tagged example_python:test\n====================================================================\n+/tmp/viash_test_example_python14893608876143098635/test_test/test_executable\nCopying 'foo.txt' to 'bar.txt'.\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\n\u001b[32mSUCCESS! All 1 out of 1 test scripts succeeded!\u001b[0m\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_r14712116733225847651'\n====================================================================\n+/tmp/viash_test_example_r14712116733225847651/build_executable/example_r ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_r:test' with Dockerfile\n[info] Running 'docker build -t example_r:test /tmp/viash_test_example_r14712116733225847651/build_executable -f /tmp/viash_test_example_r14712116733225847651/build_executable/tmp/dockerbuild-example_r-vAH8ZT/Dockerfile'\nSending build context to Docker daemon  37.89kB\n\nStep 1/5 : FROM eddelbuettel/r2u:22.04\n22.04: Pulling from eddelbuettel/r2u\ne96e057aae67: Pulling fs layer\nbe5c01dc0d74: Pulling fs layer\na829daef3697: Pulling fs layer\ne96e057aae67: Verifying Checksum\ne96e057aae67: Download complete\nbe5c01dc0d74: Verifying Checksum\nbe5c01dc0d74: Download complete\na829daef3697: Verifying Checksum\na829daef3697: Download complete\ne96e057aae67: Pull complete\nbe5c01dc0d74: Pull complete\na829daef3697: Pull complete\nDigest: sha256:4140b831802b488a4fb6be1e4ec9f85d226b788aacd5b3e9b891abab7fcecbb4\nStatus: Downloaded newer image for eddelbuettel/r2u:22.04\n ---&gt; f1e8042fc279\nStep 2/5 : RUN :\n ---&gt; Running in 3c268e2f8c9f\nRemoving intermediate container 3c268e2f8c9f\n ---&gt; e73481e00a94\nStep 3/5 : LABEL org.opencontainers.image.description=\"Companion container for running component example_r\"\n ---&gt; Running in 8278e7cc47b9\nRemoving intermediate container 8278e7cc47b9\n ---&gt; fcf5a953d76a\nStep 4/5 : LABEL org.opencontainers.image.created=\"2023-05-08T06:50:16Z\"\n ---&gt; Running in 232a9502c1e4\nRemoving intermediate container 232a9502c1e4\n ---&gt; bd50ee91302e\nStep 5/5 : LABEL org.opencontainers.image.version=\"test\"\n ---&gt; Running in e84d8f6fd6ed\nRemoving intermediate container e84d8f6fd6ed\n ---&gt; 5d72d5a9b507\nSuccessfully built 5d72d5a9b507\nSuccessfully tagged example_r:test\n====================================================================\n+/tmp/viash_test_example_r14712116733225847651/test_test/test_executable\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\nCopying 'foo.txt' to 'bar.txt'.\n[1] TRUE\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\n\u001b[32mSUCCESS! All 1 out of 1 test scripts succeeded!\u001b[0m\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_scala8653408678873668869'\n====================================================================\n+/tmp/viash_test_example_scala8653408678873668869/build_executable/example_scala ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_scala:test' with Dockerfile\n[info] Running 'docker build -t example_scala:test /tmp/viash_test_example_scala8653408678873668869/build_executable -f /tmp/viash_test_example_scala8653408678873668869/build_executable/tmp/dockerbuild-example_scala-HD9LRD/Dockerfile'\nSending build context to Docker daemon  37.38kB\n\nStep 1/5 : FROM sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\neclipse-temurin-19_36_1.7.2_2.13.10: Pulling from sbtscala/scala-sbt\n301a8b74f71f: Pulling fs layer\nc5c735a83dbd: Pulling fs layer\n5fb9fa7513e6: Pulling fs layer\n2af8e2a543d8: Pulling fs layer\n14d68137d870: Pulling fs layer\n320659737461: Pulling fs layer\n1dea7716181a: Pulling fs layer\nc9480a4b593f: Pulling fs layer\n812216efaf87: Pulling fs layer\n4f4fb700ef54: Pulling fs layer\nbb7a0c6ab9c1: Pulling fs layer\n2c0021742fe2: Pulling fs layer\n2af8e2a543d8: Waiting\n14d68137d870: Waiting\n320659737461: Waiting\n1dea7716181a: Waiting\nc9480a4b593f: Waiting\n812216efaf87: Waiting\n4f4fb700ef54: Waiting\nbb7a0c6ab9c1: Waiting\n2c0021742fe2: Waiting\nc5c735a83dbd: Verifying Checksum\nc5c735a83dbd: Download complete\n301a8b74f71f: Verifying Checksum\n301a8b74f71f: Download complete\n2af8e2a543d8: Verifying Checksum\n2af8e2a543d8: Download complete\n14d68137d870: Verifying Checksum\n14d68137d870: Download complete\n320659737461: Verifying Checksum\n320659737461: Download complete\nc9480a4b593f: Verifying Checksum\nc9480a4b593f: Download complete\n5fb9fa7513e6: Verifying Checksum\n5fb9fa7513e6: Download complete\n1dea7716181a: Verifying Checksum\n1dea7716181a: Download complete\n812216efaf87: Verifying Checksum\n812216efaf87: Download complete\n4f4fb700ef54: Verifying Checksum\n4f4fb700ef54: Download complete\n2c0021742fe2: Verifying Checksum\n2c0021742fe2: Download complete\n301a8b74f71f: Pull complete\nbb7a0c6ab9c1: Verifying Checksum\nbb7a0c6ab9c1: Download complete\nc5c735a83dbd: Pull complete\n5fb9fa7513e6: Pull complete\n2af8e2a543d8: Pull complete\n14d68137d870: Pull complete\n320659737461: Pull complete\n1dea7716181a: Pull complete\nc9480a4b593f: Pull complete\n812216efaf87: Pull complete\n4f4fb700ef54: Pull complete\nbb7a0c6ab9c1: Pull complete\n2c0021742fe2: Pull complete\nDigest: sha256:440234e283754375d5ab6bcb35e2d470f9dabeaaeb639d8c0708fac2d3707e0c\nStatus: Downloaded newer image for sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n ---&gt; 76808e2ea8df\nStep 2/5 : RUN :\n ---&gt; Running in b70f55bdb385\nRemoving intermediate container b70f55bdb385\n ---&gt; 29300fafd92d\nStep 3/5 : LABEL org.opencontainers.image.description=\"Companion container for running component example_scala\"\n ---&gt; Running in 8404cda9ca25\nRemoving intermediate container 8404cda9ca25\n ---&gt; dfd025be63a5\nStep 4/5 : LABEL org.opencontainers.image.created=\"2023-05-08T06:50:41Z\"\n ---&gt; Running in 58dad294ff94\nRemoving intermediate container 58dad294ff94\n ---&gt; 666cfa7934dc\nStep 5/5 : LABEL org.opencontainers.image.version=\"test\"\n ---&gt; Running in 37d3ece021df\nRemoving intermediate container 37d3ece021df\n ---&gt; e82c71cbbe5a\nSuccessfully built e82c71cbbe5a\nSuccessfully tagged example_scala:test\n====================================================================\n+/tmp/viash_test_example_scala8653408678873668869/test_test/test_executable\nwarning: 1 deprecation\nwarning: 1 deprecation (since 2.13.3)\nwarning: 2 deprecations in total; re-run with -deprecation for details\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\nwarning: 1 deprecation; re-run with -deprecation for details\nCopying 'foo.txt' to 'bar.txt'.\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\n\u001b[32mSUCCESS! All 1 out of 1 test scripts succeeded!\u001b[0m\nCleaning up temporary directory\n\n\n\n\n\nWhen running viash test, Viash will follow the following steps:\n\nCreate a temporary directory\nBuild the component into the main executable\n(Re-)build the Docker image for the component\nIterate over all unit test scripts:\n\n\nBuild the unit test into an executable\nRun the unit test, passing the main executable as an argument\n\n\nReturn exit code 0 if all of the above steps succeed, otherwise 0"
  },
  {
    "objectID": "guide/component/unit-testing.html#bonus-unit-testing-all-of-the-components",
    "href": "guide/component/unit-testing.html#bonus-unit-testing-all-of-the-components",
    "title": "Unit testing",
    "section": "Bonus: unit testing all of the components",
    "text": "Bonus: unit testing all of the components\nIf you have multiple Viash components located in a directory called src/, what happens when you run the following?\nviash ns test --parallel --src src/"
  },
  {
    "objectID": "guide/component/variables.html",
    "href": "guide/component/variables.html",
    "title": "Par and meta variables",
    "section": "",
    "text": "When running a Viash component with viash run, Viash will wrap your script into a Bash executable. In doing so, it strips away the “Viash placeholder” code block and replaces it by a bit of code to your script for reading any parameter values at runtime."
  },
  {
    "objectID": "guide/component/variables.html#recognizing-the-viash-placeholder-code-block",
    "href": "guide/component/variables.html#recognizing-the-viash-placeholder-code-block",
    "title": "Par and meta variables",
    "section": "Recognizing the Viash placeholder code block",
    "text": "Recognizing the Viash placeholder code block\nRecall what the script of the previous example looks like:\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nusing System.IO;\n\n// VIASH START\nvar par = new {\n  input = \"path/to/file.txt\",\n  output = \"output.txt\"\n};\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nconst fs = require('fs');\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nimport shutil\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\n## VIASH START\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\ncase class ViashPar(input: String, output: String)\nval par = ViashPar(\n  \"path/to/file.txt\",\n  \"output.txt\"\n)\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)\n\n\n\nA “Viash placeholder” code block is the section between the VIASH START and VIASH END comments."
  },
  {
    "objectID": "guide/component/variables.html#what-happens-at-runtime",
    "href": "guide/component/variables.html#what-happens-at-runtime",
    "title": "Par and meta variables",
    "section": "What happens at runtime",
    "text": "What happens at runtime\nBy passing arguments to the component, Viash will add your parameter values to your script by replacing the Viash placeholder code block. If no such code block exists yet, the parameters are inserted at the top of the file.\nThe resulting code block will contain two maps (or dictionaries): par and meta. The par map contains the parameter values specified by the user, and meta contains additional information on the current runtime environment. Note that for Bash scripts, the par and meta maps are flattened into separate environment variables."
  },
  {
    "objectID": "guide/component/variables.html#previewing-the-par-and-meta-objects",
    "href": "guide/component/variables.html#previewing-the-par-and-meta-objects",
    "title": "Par and meta variables",
    "section": "Previewing the par and meta objects",
    "text": "Previewing the par and meta objects\nTo get insight into how par and meta are defined, you can run viash config inject to replace the current parameter placeholder with an auto-generated parameter placeholder.\n\n\n\n\n\n\nWarning\n\n\n\nThis will change the contents of your script!\n\n\n\nBashC#JavaScriptPythonRScala\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.sh now contains the following code:\n\n#!/bin/bash\n\n## VIASH START\n# The following code has been auto-generated by Viash.\npar_input='file.txt'\npar_output='output.txt'\nmeta_functionality_name='example_bash'\nmeta_resources_dir='/tmp/viash_inject_example_bash11732453290809471339'\nmeta_executable='/tmp/viash_inject_example_bash11732453290809471339/example_bash'\nmeta_config='/tmp/viash_inject_example_bash11732453290809471339/.config.vsh.yaml'\nmeta_temp_dir='/tmp'\nmeta_cpus='123'\nmeta_memory_b='123'\nmeta_memory_kb='123'\nmeta_memory_mb='123'\nmeta_memory_gb='123'\nmeta_memory_tb='123'\nmeta_memory_pb='123'\n\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.csx now contains the following code:\n\nusing System.IO;\n\n// VIASH START\n// The following code has been auto-generated by Viash.\nvar par = new {\n  input = @\"file.txt\",\n  output = @\"output.txt\"\n};\nvar meta = new {\n  functionality_name = @\"example_csharp\",\n  resources_dir = @\"/tmp/viash_inject_example_csharp6213792116795285669\",\n  executable = @\"/tmp/viash_inject_example_csharp6213792116795285669/example_csharp\",\n  config = @\"/tmp/viash_inject_example_csharp6213792116795285669/.config.vsh.yaml\",\n  temp_dir = @\"/tmp\",\n  cpus = Convert.ToInt32(@\"123\"),\n  memory_b = Convert.ToInt64(@\"123\"),\n  memory_kb = Convert.ToInt64(@\"123\"),\n  memory_mb = Convert.ToInt64(@\"123\"),\n  memory_gb = Convert.ToInt64(@\"123\"),\n  memory_tb = Convert.ToInt64(@\"123\"),\n  memory_pb = Convert.ToInt64(@\"123\")\n};\n\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.js now contains the following code:\n\nconst fs = require('fs');\n\n// VIASH START\n// The following code has been auto-generated by Viash.\nlet par = {\n  'input': String.raw`file.txt`,\n  'output': String.raw`output.txt`\n};\nlet meta = {\n  'functionality_name': String.raw`example_js`,\n  'resources_dir': String.raw`/tmp/viash_inject_example_js17238202024066845321`,\n  'executable': String.raw`/tmp/viash_inject_example_js17238202024066845321/example_js`,\n  'config': String.raw`/tmp/viash_inject_example_js17238202024066845321/.config.vsh.yaml`,\n  'temp_dir': String.raw`/tmp`,\n  'cpus': parseInt(String.raw`123`),\n  'memory_b': parseInt(String.raw`123`),\n  'memory_kb': parseInt(String.raw`123`),\n  'memory_mb': parseInt(String.raw`123`),\n  'memory_gb': parseInt(String.raw`123`),\n  'memory_tb': parseInt(String.raw`123`),\n  'memory_pb': parseInt(String.raw`123`)\n};\n\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.py now contains the following code:\n\nimport shutil\n\n## VIASH START\n# The following code has been auto-generated by Viash.\npar = {\n  'input': r'file.txt',\n  'output': r'output.txt'\n}\nmeta = {\n  'functionality_name': r'example_python',\n  'resources_dir': r'/tmp/viash_inject_example_python5846271184142606894',\n  'executable': r'/tmp/viash_inject_example_python5846271184142606894/example_python',\n  'config': r'/tmp/viash_inject_example_python5846271184142606894/.config.vsh.yaml',\n  'temp_dir': r'/tmp',\n  'cpus': int(r'123'),\n  'memory_b': int(r'123'),\n  'memory_kb': int(r'123'),\n  'memory_mb': int(r'123'),\n  'memory_gb': int(r'123'),\n  'memory_tb': int(r'123'),\n  'memory_pb': int(r'123')\n}\n\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.R now contains the following code:\n\n## VIASH START\n# The following code has been auto-generated by Viash.\n# treat warnings as errors\n.viash_orig_warn &lt;- options(warn = 2)\n\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\nmeta &lt;- list(\n  \"functionality_name\" = 'example_r',\n  \"resources_dir\" = '/tmp/viash_inject_example_r12491385973432522454',\n  \"executable\" = '/tmp/viash_inject_example_r12491385973432522454/example_r',\n  \"config\" = '/tmp/viash_inject_example_r12491385973432522454/.config.vsh.yaml',\n  \"temp_dir\" = '/tmp',\n  \"cpus\" = as.integer('123'),\n  \"memory_b\" = bit64::as.integer64('123'),\n  \"memory_kb\" = bit64::as.integer64('123'),\n  \"memory_mb\" = bit64::as.integer64('123'),\n  \"memory_gb\" = bit64::as.integer64('123'),\n  \"memory_tb\" = bit64::as.integer64('123'),\n  \"memory_pb\" = bit64::as.integer64('123')\n)\n\n\n# restore original warn setting\noptions(.viash_orig_warn)\nrm(.viash_orig_warn)\n\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.scala now contains the following code:\n\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\n// The following code has been auto-generated by Viash.\ncase class ViashPar(\n  input: Option[String],\n  output: Option[String]\n)\nval par = ViashPar(\n  Some(\"\"\"file.txt\"\"\"),\n  Some(\"\"\"output.txt\"\"\")\n)\ncase class ViashMeta(\n  functionality_name: Option[String],\n  resources_dir: Option[String],\n  executable: Option[String],\n  config: Option[String],\n  temp_dir: Option[String],\n  cpus: Option[Int],\n  memory_b: Option[Long],\n  memory_kb: Option[Long],\n  memory_mb: Option[Long],\n  memory_gb: Option[Long],\n  memory_tb: Option[Long],\n  memory_pb: Option[Long]\n)\nval meta = ViashMeta(\n  Some(\"\"\"example_scala\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala3239117617314856434\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala3239117617314856434/example_scala\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala3239117617314856434/.config.vsh.yaml\"\"\"),\n  Some(\"\"\"/tmp\"\"\"),\n  Some(\"\"\"123\"\"\".toInt),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong)\n)\n\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)"
  },
  {
    "objectID": "guide/component/variables.html#runtime-parameters-in-par",
    "href": "guide/component/variables.html#runtime-parameters-in-par",
    "title": "Par and meta variables",
    "section": "Runtime parameters in par",
    "text": "Runtime parameters in par\nThe par object (or par_ environment variables in Bash) will contain argument values passed at runtime. For example, passing --input foo.txt will result in a par[\"input\"] being equal to \"foo.txt\".\n\n\n\n\n\n\nTip\n\n\n\nTry adding more arguments with different file types to see what effect this has on the resulting placeholder."
  },
  {
    "objectID": "guide/component/variables.html#meta-variables-in-meta",
    "href": "guide/component/variables.html#meta-variables-in-meta",
    "title": "Par and meta variables",
    "section": "Meta variables in meta",
    "text": "Meta variables in meta\nMeta-variables offer information on the runtime environment which you can use from within your script.\n\ncpus (integer): The maximum number of (logical) cpus a component is allowed to use. By default, this value will be undefined.\nconfig (string): Path to the processed Viash config YAML. This file is usually called .config.vsh.yaml and resides next to the wrapped executable (see below). This YAML file is useful for doing some runtime introspection of the component for writing generic unit tests.\nexecutable (string): The executable being used at runtime; that is, the wrapped script. This variable is used in unit tests.\nfunctionality_name (string): The name of the component, useful for logging.\nmemory_* (long): The maximum amount of memory a component is allowed to allocate. The following denominations are provided: memory_b, memory_kb, memory_mb, memory_gb, memory_tb, memory_pb. By default, this value will be undefined.\nresources_dir (string): Path to where the resources are stored. See the previous section on how to define resources.\ntemp_dir (string): A temporary directory in which your script is allowed to create new temporary files / directories. By default, this will be set to the VIASH_TEMP environment variable. When the VIASH_TEMP variable is undefined, /tmp is used instead.\n\n\n\ncpus (integer)\nThis field specifies the maximum number of (logical) cpus a component is allowed to use. This is useful when parallellizing your component in such a way that integrates very nicely with pipeline frameworks such as Nextflow. Below is an example usage of the cpus meta-variable.\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=\"path/to/file.txt\"\npar_output=\"output.txt\"\nmeta_cpus=10\n## VIASH END\n\n# Pass number of cores to the popular_software_tool. Set the default to 1.\n./popular_software_tool --ncores ${meta_cpus:-1}\n\n\nNo example available yet.\n\n\nNo example available yet.\n\n\nfrom multiprocessing import Pool\n\n## VIASH START\npar = {}\nmeta = {\"cpus\": 1}\n## VIASH END\n\ndef my_fun(x):\n    return x + \"!\"\nmy_data = [\"hello\", \"world\"]\n\nwith Pool(processes=meta.get(\"cpus\", 1)) as pool:\n    out = pool.map(my_fun, my_data)\n\n\nlibrary(furrr)\n\n## VIASH START\npar &lt;- list()\nmeta &lt;- list(\n  cpus = 1L\n)\n## VIASH END\n\nif (is.null(meta$cpus)) meta$cpus &lt;- 1\nplan(multisession, workers = meta$cpus)\n\nmy_data &lt;- c(\"hello\", \"world\")\nout = future_map(\n  my_data, \n  function(x) {\n    paste0(x, \"!\")\n  }\n)\n\n\nimport scala.collection.parallel._\nimport java.util.concurrent.ForkJoinPool\n\n// VIASH START\n// ...\n// VIASH END\n\nval pc = mutable.ParArray(1, 2, 3)\nval numCores = meta.cores.getOrElse(1)\npc.tasksupport = new ForkJoinTaskSupport(new ForkJoinPool(numCores))\npc map { _ + 1 }\n\n\n\nYou can set the number of cores in your component using any of the following approaches:\n# as a parameter of viash run\nviash run config.vsh.yaml --cpus 10 -- &lt;my component arguments&gt;\n\n# as a parameter of viash test\nviash test config.vsh.yaml --cpus 10\n\n# or as a parameter of the executable\nviash build config.vsh.yaml -o output\noutput/my_executable ---cpus 10\n#                     ↑ notice the triple dash"
  }
]