[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Viash",
    "section": "",
    "text": "Viash is free open source software distributed under the GPL-3 license.\nFor more information or support contact us at info@data-intuitive.com."
  },
  {
    "objectID": "documentation/faq/index.html",
    "href": "documentation/faq/index.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "Can I store helper functions as separate files?\nYes, though you’ll need to let Viash know which additional files are required to run the component. For example, if several helper functions are stored in an additional file mymodule.py or mymodule.R, use the following code to import the helper functions:\n\nPython\nIn the resources section of the Viash config file:\nresources:\n  - type: python_script\n    path: script.py\n  - path: mymodule.py\nIn the main Python script:\nimport sys\n\n## VIASH START\nmeta = { 'resources_dir': '.' }\n## VIASH END\n\nsys.path.append(meta['resources_dir'])\nfrom mymodule import helper_fun\n\n\nR\nIn the resources section of the Viash config file:\nresources:\n  - type: r_script\n    path: script.R\n  - path: mymodule.R\nIn the main R script:\n## VIASH START\nmeta <- list(resources_dir = \".\")\n## VIASH END\n\nsource(paste0(meta[[\"resources_dir\"]], \"/mymodule.R\"))\nhelper_fun(...)"
  },
  {
    "objectID": "documentation/reference/config/functionality.html",
    "href": "documentation/reference/config/functionality.html",
    "title": "Functionality",
    "section": "",
    "text": "The functionality-part of the config file describes the behaviour of the script in terms of arguments and resources. By specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you."
  },
  {
    "objectID": "documentation/reference/config/functionality.html#add_resources_to_path",
    "href": "documentation/reference/config/functionality.html#add_resources_to_path",
    "title": "Functionality",
    "section": "add_resources_to_path",
    "text": "add_resources_to_path\n\n\n\n\n\n\nWarning\n\n\n\nRemoved since Viash 0.5.11. Extending the PATH turned out to be not desirable.\n\n\nType: Boolean\nAdds the resources directory to the PATH variable when set to true. This is set to false by default."
  },
  {
    "objectID": "documentation/reference/config/functionality.html#argument_groups",
    "href": "documentation/reference/config/functionality.html#argument_groups",
    "title": "Functionality",
    "section": "argument_groups",
    "text": "argument_groups\nType: List of ArgumentGroup\nA grouping of the arguments, used to display the help message.\n\nname: foo, the name of the argument group.\ndescription: Description of foo, a description of the argument group. Multiline descriptions are supported.\narguments: [arg1, arg2, ...], list of the arguments names.\n\n\nExample\nargument_groups:\n  - name: \"Input\"\n    arguments: [ id, input1, input2 ]\n  - name: \"Output\"\n    arguments: [ output, optional_output ]\n  - name: \"Foo\"\n    description: Arguments related to the foo functionality of this component.\n    arguments: [ foo, bar, zing, bork ]\nThis results in the following output when calling the component with the --help argument:\ncomponent_name\n\n  Input:\n      --id\n          type: string\n\n      --input1\n          type: file\n\n      --input2\n          type: file\n\n  Output:\n      --output\n          type: file\n\n      --optional_output\n          type: file\n\n  Foo:\n      Arguments related to the foo functionality of this component.\n\n      --foo\n          type: integer\n\n      --bar\n          type: double\n\n      --zing\n          type: boolean\n\n      --bork\n          type: string"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#arguments",
    "href": "documentation/reference/config/functionality.html#arguments",
    "title": "Functionality",
    "section": "arguments",
    "text": "arguments\nType: List of Argument\nA list of arguments for this component. For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:\n\nstring\nfile\ninteger\ndouble\nboolean\nboolean_true\nboolean_false\n\n\nExample\narguments:\n   - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    required: false\n    multiple: true\n    multiple_sep: \",\"\n   - name: --bar\n    type: string"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#authors",
    "href": "documentation/reference/config/functionality.html#authors",
    "title": "Functionality",
    "section": "authors",
    "text": "authors\nType: List of Author\nA list of authors. An author must at least have a name, but can also have a list of roles, an e-mail address, and a map of custom properties.\nSuggested values for roles are:\n\n\n\n\n\n\n\n\nRole\nAbbrev.\nDescription\n\n\n\n\nmaintainer\nmnt\nfor the maintainer of the code. Ideally, exactly one maintainer is specified.\n\n\nauthor\naut\nfor persons who have made substantial contributions to the software.\n\n\ncontributor\nctb\nfor persons who have made smaller contributions (such as code patches).\n\n\ndatacontributor\ndtc\nfor persons or organisations that contributed data sets for the software\n\n\ncopyrightholder\ncph\nfor all copyright holders. This is a legal concept so should use the legal name of an institution or corporate body.\n\n\nfunder\nfnd\nfor persons or organizations that furnished financial support for the development of the software\n\n\n\nThe full list of roles is extremely comprehensive.\n\nExample\nauthors:\n  - name: Bob Cando\n    roles: [maintainer, author]\n    email: bob@can.do\n    props: {github: bobcando, orcid: 0000-0001-0002-0003}\n  - name: Tim Farbe\n    roles: [author]\n    email: tim@far.be"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#description",
    "href": "documentation/reference/config/functionality.html#description",
    "title": "Functionality",
    "section": "description",
    "text": "description\nType: String\nA description of the component. This will be displayed with --help.\n\nExample\ndescription: |\n  This component performs function Y and Z.\n  It is possible to make this a multiline string."
  },
  {
    "objectID": "documentation/reference/config/functionality.html#enabled",
    "href": "documentation/reference/config/functionality.html#enabled",
    "title": "Functionality",
    "section": "enabled",
    "text": "enabled\nType: Boolean\nSetting this to false will disable this component when using namespaces.\n\nExample\nenabled: false"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#info",
    "href": "documentation/reference/config/functionality.html#info",
    "title": "Functionality",
    "section": "info",
    "text": "info\nType: Map of String,String\nA map for storing custom annotation.\n\nExample\ninfo: {twitter: wizzkid, appId: com.example.myApplication}"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#inputs",
    "href": "documentation/reference/config/functionality.html#inputs",
    "title": "Functionality",
    "section": "inputs",
    "text": "inputs\nType: List of Argument\nA list of input arguments in addition to the arguments list. Any arguments specified here will have their type set to file and the direction set to input by default.\n\nExample\ninputs:\n  - name: input_file\n  - name: another_input\nThis results in the following output when calling the component with the --help argument:\ncomponent_with_inputs\n  \n  Inputs:\n      input_file\n          type: file\n  \n      another_input\n          type: file"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#name",
    "href": "documentation/reference/config/functionality.html#name",
    "title": "Functionality",
    "section": "name",
    "text": "name\nType: String\nName of the component and the filename of the executable when built with viash build.\n\nExample\nname: this_is_my_component"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#namespace",
    "href": "documentation/reference/config/functionality.html#namespace",
    "title": "Functionality",
    "section": "namespace",
    "text": "namespace\nType: String\nNamespace this component is a part of. See the Namespaces guide for more information on namespaces.\n\nExample\nnamespace: fancy_components"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#outputs",
    "href": "documentation/reference/config/functionality.html#outputs",
    "title": "Functionality",
    "section": "outputs",
    "text": "outputs\nType: List of Argument\nA list of output arguments in addition to the arguments list. Any arguments specified here will have their type set to file and thr direction set to output by default.\n\nExample\noutputs:\n  - name: output_file\n  - name: another_output\nThis results in the following output when calling the component with the --help argument:\ncomponent_with_outputs\n  \n  Outputs:\n      output_file\n          type: file, output\n  \n      another_output\n          type: file, output"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#requirements",
    "href": "documentation/reference/config/functionality.html#requirements",
    "title": "Functionality",
    "section": "requirements",
    "text": "requirements\nType: ComputationalRequirements\nComputational requirements related to running the component. n_proc specifies the maximum number of processes a component is allowed to spawn in parallel, whereas memory specifies the maximum amount of memory a component is allowed to allicate. Memory units must be in B, KB, MB, GB, TB or PB.\n\nExample\nrequirements:\n  n_proc: 5\n  memory: 10GB"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#resources",
    "href": "documentation/reference/config/functionality.html#resources",
    "title": "Functionality",
    "section": "resources",
    "text": "resources\nType: List of Resource\nResources are files that support the component. The first resource should be the script that will be executed when the functionality is run. Additional resources will be copied to the same directory.\nCommon properties:\n\ntype: file / r_script / python_script / bash_script / javascript_script / scala_script / csharp_script, the type of resource. The first resource cannot be of type file. When the type is not specified, the default type is simply file.\nname: filename, the resulting name of the resource.\npath: path/to/file, the path of the input file. Can be a relative or an absolute path, or a URI.\ntext: …multiline text…, the raw content of the input file. Exactly one of path or text must be defined, the other undefined.\nis_executable: true / false, whether the resulting file is made executable.\n\n\nExample\nresources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#test_resources",
    "href": "documentation/reference/config/functionality.html#test_resources",
    "title": "Functionality",
    "section": "test_resources",
    "text": "test_resources\nType: List of Resource\nOne or more scripts to be used to test the component behaviour when viash test is invoked. Additional files of type file will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing. See the Unit Testing guide for more info.\n\nExample\ntest_resources:\n  - type: bash_script\n    path: tests/test1.sh\n  - type: r_script\n    path: tests/test2.R\n  - path: resource1.txt"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#tests",
    "href": "documentation/reference/config/functionality.html#tests",
    "title": "Functionality",
    "section": "tests",
    "text": "tests\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since Viash 0.5.13. Use test_resources instead. No functional difference.\n\n\nType: List of Resource\nOne or more Bash/R/Python scripts to be used to test the component behaviour when viash test is invoked. Additional files of type file will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing."
  },
  {
    "objectID": "documentation/reference/config/functionality.html#usage",
    "href": "documentation/reference/config/functionality.html#usage",
    "title": "Functionality",
    "section": "usage",
    "text": "usage\nType: String\nA description on how to use the component. This will be displayed with --help under the ‘Usage:’ section.\n\nExample\nusage: Place the executable in a directory containing TSV files and run it"
  },
  {
    "objectID": "documentation/reference/config/functionality.html#version",
    "href": "documentation/reference/config/functionality.html#version",
    "title": "Functionality",
    "section": "version",
    "text": "version\nType: Version\nVersion of the component. This field will be used to version the executable and the Docker container.\n\nExample\nversion: 0.8"
  },
  {
    "objectID": "documentation/reference/config/overview.html",
    "href": "documentation/reference/config/overview.html",
    "title": "Viash Config Overview",
    "section": "",
    "text": "A Viash configuration is a YAML file which contains metadata to describe the behaviour and build target(s) of a component.\nWe commonly name this file config.vsh.yaml in our examples, but you can name it however you choose.\nHere’s an example of a config file:\nEvery Viash config consists of two main sections: functionality and platforms."
  },
  {
    "objectID": "documentation/reference/config/overview.html#functionality",
    "href": "documentation/reference/config/overview.html#functionality",
    "title": "Viash Config Overview",
    "section": "Functionality",
    "text": "Functionality\nThe functionality section describes the behaviour of the component. This includes a name, a description and the arguments and resources the component needs to function.\nCheck out our Arguments section on the left to find out more about the supported arguments. The External Resources guide contains information on how to add resources and use them."
  },
  {
    "objectID": "documentation/reference/config/overview.html#platforms",
    "href": "documentation/reference/config/overview.html#platforms",
    "title": "Viash Config Overview",
    "section": "Platforms",
    "text": "Platforms\nThe platforms section specifies what platforms are supported as build targets for a component and their requirements. We support native, docker and nextflow. If no platforms are specified, the native platform is used by default."
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html",
    "title": "Nextflow Legacy Platform",
    "section": "",
    "text": "Run a Viash component as a Nextflow module."
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#id",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#id",
    "title": "Nextflow Legacy Platform",
    "section": "id",
    "text": "id\nType: String\nEvery platform can be given a specific id that can later be referred to explicitly when running or building the Viash component."
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#image",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#image",
    "title": "Nextflow Legacy Platform",
    "section": "image",
    "text": "image\nType: String\nIf no image attributes are configured, Viash will use the auto-generated image name from the Docker platform:\n[<namespace>/]<name>:<version>\nIt’s possible to specify the container image explicitly with which to run the module in different ways:\nimage: dataintuitive/viash:0.4.0\nExactly the same can be obtained with\nimage: dataintuitive/viash\nregistry: index.docker.io/v1/\ntag: 0.4.0\nSpecifying the attribute(s) like this will use the container dataintuitive/viash:0.4.0 from Docker hub (registry).\nIf no tag is specified Viash will use functionality.version as the tag.\nIf no registry is specified, Viash (and NextFlow) will assume the image is available locally or on Docker Hub. In other words, the registry: ... attribute above is superfluous. No other registry is checked automatically due to a limitation from Docker itself."
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#label",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#label",
    "title": "Nextflow Legacy Platform",
    "section": "label",
    "text": "label\nType: String\nWhen running the module in a cluster context and depending on the cluster type, NextFlow allows for attaching labels to the process that can later be used as selectors for associating resources to this process.\nIn order to attach one label to a process/component, one can use the label: ... attribute, multiple labels can be added using labels: [ ..., ... ] and the two can even be mixed.\nIn the main nextflow.config, one can now use this label:\nprocess { … withLabel: bigmem { maxForks = 5 … } }\n\nExample\nlabel: highmem labels: [ highmem, highcpu ]"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#labels",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#labels",
    "title": "Nextflow Legacy Platform",
    "section": "labels",
    "text": "labels\nType: String / List of String\nWhen running the module in a cluster context and depending on the cluster type, NextFlow allows for attaching labels to the process that can later be used as selectors for associating resources to this process.\nIn order to attach one label to a process/component, one can use the label: ... attribute, multiple labels can be added using labels: [ ..., ... ] and the two can even be mixed.\nIn the main nextflow.config, one can now use this label:\nprocess { … withLabel: bigmem { maxForks = 5 … } }\n\nExample\nlabel: highmem labels: [ highmem, highcpu ]"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#namespace_separator",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#namespace_separator",
    "title": "Nextflow Legacy Platform",
    "section": "namespace_separator",
    "text": "namespace_separator\nType: String\nThe default namespace separator is “_“.\n\nExample\nnamespace_separator: \"+\""
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#organization",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#organization",
    "title": "Nextflow Legacy Platform",
    "section": "organization",
    "text": "organization\nType: String\nName of a container’s organization.\n\nExample\norganization: viash-io"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#path",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#path",
    "title": "Nextflow Legacy Platform",
    "section": "path",
    "text": "path\nType: String\nWhen publish: true, this attribute defines where the output is written relative to the params.publishDir setting. For example, path: processed in combination with --output s3://some_bucket/ will store the output of this component under\ns3://some_bucket/processed/\nThis attribute gives control over the directory structure of the output. For example:\npath: raw_data\nOr even:\npath: raw_data/bcl\nPlease note that per_id and path can be combined."
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#per_id",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#per_id",
    "title": "Nextflow Legacy Platform",
    "section": "per_id",
    "text": "per_id\nType: Boolean\nBy default, a subdirectory is created corresponding to the unique ID that is passed in the triplet. Let us illustrate this with an example. The following code snippet uses the value of --input as an input of a workflow. The input can include a wildcard so that multiple samples can run in parallel. We use the parent directory name (.getParent().baseName) as an identifier for the sample. We pass this as the first entry of the triplet:\nChannel.fromPath(params.input) \\\n    | map{ it -> [ it.getParent().baseName , it ] } \\\n    | map{ it -> [ it[0] , it[1], params ] }\n    | ...\nSay the resulting sample names are SAMPLE1 and SAMPLE2. The next step in the pipeline will be published (at least by default) under:\n<publishDir>/SAMPLE1/\n<publishDir>/SAMPLE2/\nThese per-ID subdirectories can be avoided by setting:\nper_id: false"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#publish",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#publish",
    "title": "Nextflow Legacy Platform",
    "section": "publish",
    "text": "publish\nType: Boolean\nNextFlow uses the autogenerated work dirs to manage process IO under the hood. In order effectively output something one can publish the results a module or step in the pipeline. In order to do this, add publish: true to the config:\n\npublish is optional\nDefault value is false\n\nThis attribute simply defines if output of a component should be published yes or no. The output location has to be provided at pipeline launch by means of the option --publishDir ... or as params.publishDir in nextflow.config:\nparams.publishDir = \"...\""
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#registry",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#registry",
    "title": "Nextflow Legacy Platform",
    "section": "registry",
    "text": "registry\nType: String\nThe URL to the a custom Docker registry.\n\nExample\nregistry: https://my-docker-registry.org"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#separate_multiple_outputs",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#separate_multiple_outputs",
    "title": "Nextflow Legacy Platform",
    "section": "separate_multiple_outputs",
    "text": "separate_multiple_outputs\nType: Boolean\nSeparates the outputs generated by a Nextflow component with multiple outputs as separate events on the channel. Default value: true.\n\nExample\nseparate_multiple_outputs: false"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#stageinmode",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#stageinmode",
    "title": "Nextflow Legacy Platform",
    "section": "stageInMode",
    "text": "stageInMode\nType: String\nBy default NextFlow will create a symbolic link to the inputs for a process/module and run the tool at hand using those symbolic links. Some applications do not cope well with this strategy, in that case the files should effectively be copied rather than linked to. This can be achieved by using stageInMode: copy. This attribute is optional, the default is symlink.\n\nExample\nstageInMode: copy"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#tag",
    "href": "documentation/reference/config/platforms/nextflowLegacyPlatform.html#tag",
    "title": "Nextflow Legacy Platform",
    "section": "tag",
    "text": "tag\nType: Version\nSpecify a Docker image based on its tag.\n\nExample\ntag: 4.0"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowVdsl3Platform.html",
    "href": "documentation/reference/config/platforms/nextflowVdsl3Platform.html",
    "title": "Nextflow VDSL3 Platform",
    "section": "",
    "text": "Next-gen platform for generating NextFlow VDSL3 modules."
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowVdsl3Platform.html#auto",
    "href": "documentation/reference/config/platforms/nextflowVdsl3Platform.html#auto",
    "title": "Nextflow VDSL3 Platform",
    "section": "auto",
    "text": "auto\nType: NextflowAuto\nAutomated processing flags which can be toggled on or off:\n\nsimplifyInput: If true, an input tuple only containing only a single File (e.g. [\"foo\", file(\"in.h5ad\")]) is automatically transformed to a map (i.e. [\"foo\", [ input: file(\"in.h5ad\") ] ]). Default is true.\nsimplifyOutput: If true, an output tuple containing a map with a File (e.g. [\"foo\", [ output: file(\"out.h5ad\") ] ]) is automatically transformed to a map (i.e. [\"foo\", file(\"out.h5ad\")]). Default is true.\ntranscript: If true, the module’s transcripts from work/ are automatically published to params.transcriptDir. If not defined, params.publishDir + \"/_transcripts\" will be used. Will throw an error if neither are defined. Default is false.\npublish: If true, the module’s outputs are automatically published to params.publishDir. Will throw an error if params.publishDir is not defined. Default is false.\n\n\nExample\nauto:\n    publish: true"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowVdsl3Platform.html#debug",
    "href": "documentation/reference/config/platforms/nextflowVdsl3Platform.html#debug",
    "title": "Nextflow VDSL3 Platform",
    "section": "debug",
    "text": "debug\nType: Boolean\nWhether or not to print debug messages."
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowVdsl3Platform.html#directives",
    "href": "documentation/reference/config/platforms/nextflowVdsl3Platform.html#directives",
    "title": "Nextflow VDSL3 Platform",
    "section": "directives",
    "text": "directives\nType: NextflowDirectives\nDirectives are optional settings that affect the execution of the process. These mostly match up with the Nextflow counterparts that are linked below:\n\naccelerator\nafterScript\nbeforeScript\ncache\nconda\ncontainer\ncontainerOptions\ncpus\ndisk\necho\nerrorStrategy\nexecutor\nmachineType\nmaxErrors\nmaxForks\nmaxRetries\nmemory\nmodule\npenv\npublishDir\nqueue\nscratch\nstoreDir\nstageInMode\nstageOutMode\ntag\ntime\n\n\nExample\ndirectives:\n    container: rocker/r-ver:4.1\n    label: highcpu\n    cpus: 4\n    memory: 16 GB"
  },
  {
    "objectID": "documentation/reference/config/platforms/nextflowVdsl3Platform.html#id",
    "href": "documentation/reference/config/platforms/nextflowVdsl3Platform.html#id",
    "title": "Nextflow VDSL3 Platform",
    "section": "id",
    "text": "id\nType: String\nEvery platform can be given a specific id that can later be referred to explicitly when running or building the Viash component.\n\nExample\nid: foo"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html",
    "href": "documentation/reference/config/platforms/dockerPlatform.html",
    "title": "Docker Platform",
    "section": "",
    "text": "Run a Viash component on a Docker backend platform. By specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository."
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#apk",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#apk",
    "title": "Docker Platform",
    "section": "apk",
    "text": "apk\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since Viash 0.5.15. Use setup instead.\n\n\nType: ApkRequirements\nSpecify which apk packages should be available in order to run the component.\n\nExample\nsetup:\n  - type: apk\n    packages: [ sl ]"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#apt",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#apt",
    "title": "Docker Platform",
    "section": "apt",
    "text": "apt\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since Viash 0.5.15. Use setup instead.\n\n\nType: AptRequirements\nSpecify which apt packages should be available in order to run the component.\n\nExample\nsetup:\n  - type: apt\n    packages: [ sl ]"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#chown",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#chown",
    "title": "Docker Platform",
    "section": "chown",
    "text": "chown\nType: Boolean\nIn Linux, files created by a Docker container will be owned by root. With chown: true, Viash will automatically change the ownership of output files (arguments with type: file and direction: output) to the user running the Viash command after execution of the component. Default value: true.\n\nExample\nchown: false"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#docker",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#docker",
    "title": "Docker Platform",
    "section": "docker",
    "text": "docker\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since Viash 0.5.15. Use setup instead.\n\n\nType: DockerRequirements\nSpecify which Docker commands should be run during setup.\n\nExample\nsetup:\n  - type: docker\n    build_args: [ GITHUB_PAT=hello_world ]\n    run: [ git clone ... ]\n    add: [ \"http://foo.bar .\" ]\n    copy: [ \"http://foo.bar .\" ]\n    resources: \n      - resource.txt /path/to/resource.txt"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#id",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#id",
    "title": "Docker Platform",
    "section": "id",
    "text": "id\nType: String\nAs with all platforms, you can give a platform a different name. By specifying id: foo, you can target this platform (only) by specifying -p foo in any of the Viash commands.\n\nExample\nid: foo"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#image",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#image",
    "title": "Docker Platform",
    "section": "image",
    "text": "image\nType: String\nThe base container to start from. You can also add the tag here if you wish.\n\nExample\nimage: \"bash:4.0\""
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#namespace_separator",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#namespace_separator",
    "title": "Docker Platform",
    "section": "namespace_separator",
    "text": "namespace_separator\nType: String\nThe default namespace separator is “_“.\n\nExample\nnamespace_separator: \"+\""
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#organization",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#organization",
    "title": "Docker Platform",
    "section": "organization",
    "text": "organization\nType: String\nName of a container’s organization."
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#port",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#port",
    "title": "Docker Platform",
    "section": "port",
    "text": "port\nType: String / List of String\nA list of enabled ports. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.\n\nExample\nport:\n  - 80\n  - 8080"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#python",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#python",
    "title": "Docker Platform",
    "section": "python",
    "text": "python\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since Viash 0.5.15. Use setup instead.\n\n\nType: PythonRequirements\nSpecify which Python packages should be available in order to run the component.\n\nExample\nsetup:\n  - type: python\n    pip: [ numpy ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ jkbr/httpie ]\n    gitlab: [ foo/bar ]\n    mercurial: [ http://... ]\n    svn: [ http://...]\n    bazaar: [ http://... ]\n    url: [ http://... ]"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#r",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#r",
    "title": "Docker Platform",
    "section": "r",
    "text": "r\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since Viash 0.5.15. Use setup instead.\n\n\nType: RRequirements\nSpecify which R packages should be available in order to run the component.\n\nExample\nsetup: \n  - type: r\n    cran: [ dynutils ]\n    bioc: [ AnnotationDbi ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ rcannood/SCORPIUS ]\n    gitlab: [ org/package ]\n    svn: [ https://path.to.svn/group/repo ]\n    url: [ https://github.com/hadley/stringr/archive/HEAD.zip ]\n    script: [ 'devtools::install(\".\")' ]"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#registry",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#registry",
    "title": "Docker Platform",
    "section": "registry",
    "text": "registry\nType: String\nThe URL to the a custom Docker registry\n\nExample\nregistry: https://my-docker-registry.org"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#run_args",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#run_args",
    "title": "Docker Platform",
    "section": "run_args",
    "text": "run_args\nType: String / List of String\nAdd docker run arguments."
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#setup",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#setup",
    "title": "Docker Platform",
    "section": "setup",
    "text": "setup\nType: List of Requirements\nA list of requirements for installing the following types of packages:\n\napt\napk\nyum\nR\nPython\nJavaScript\nDocker setup instructions\n\nThe order in which these dependencies are specified determines the order in which they will be installed."
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#tag",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#tag",
    "title": "Docker Platform",
    "section": "tag",
    "text": "tag\nType: Version\nSpecify a Docker image based on its tag.\n\nExample\ntag: 4.0"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#target_image",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#target_image",
    "title": "Docker Platform",
    "section": "target_image",
    "text": "target_image\nType: String\nIf anything is specified in the setup section, running the ---setup will result in an image with the name of <target_image>:<version>. If nothing is specified in the setup section, simply image will be used.\n\nExample\ntarget_image: myfoo"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#target_image_source",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#target_image_source",
    "title": "Docker Platform",
    "section": "target_image_source",
    "text": "target_image_source\nType: String\nThe source of the target image. This is used for defining labels in the dockerfile.\n\nExample\ntarget_image_source: https://github.com/foo/bar"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#target_registry",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#target_registry",
    "title": "Docker Platform",
    "section": "target_registry",
    "text": "target_registry\nType: String\nThe URL where the resulting image will be pushed to.\n\nExample\ntarget_registry: https://my-docker-registry.org"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#target_tag",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#target_tag",
    "title": "Docker Platform",
    "section": "target_tag",
    "text": "target_tag\nType: Version\nThe tag the resulting image gets.\n\nExample\ntarget_tag: 0.5.0"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#test_setup",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#test_setup",
    "title": "Docker Platform",
    "section": "test_setup",
    "text": "test_setup\nType: List of Requirements"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#workdir",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#workdir",
    "title": "Docker Platform",
    "section": "workdir",
    "text": "workdir\nType: String\nThe working directory when starting the container. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.\n\nExample\nworkdir: /home/user"
  },
  {
    "objectID": "documentation/reference/config/platforms/dockerPlatform.html#yum",
    "href": "documentation/reference/config/platforms/dockerPlatform.html#yum",
    "title": "Docker Platform",
    "section": "yum",
    "text": "yum\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since Viash 0.5.15. Use setup instead.\n\n\nType: YumRequirements\nSpecify which yum packages should be available in order to run the component.\n\nExample\nsetup:\n  - type: yum\n    packages: [ sl ]"
  },
  {
    "objectID": "documentation/reference/config/platforms/nativePlatform.html",
    "href": "documentation/reference/config/platforms/nativePlatform.html",
    "title": "Native Platform",
    "section": "",
    "text": "Running a Viash component on a native platform means that the script will be executed in your current environment. Any dependencies are assumed to have been installed by the user, so the native platform is meant for developers (who know what they’re doing) or for simple bash scripts (which have no extra dependencies)."
  },
  {
    "objectID": "documentation/reference/config/platforms/nativePlatform.html#id",
    "href": "documentation/reference/config/platforms/nativePlatform.html#id",
    "title": "Native Platform",
    "section": "id",
    "text": "id\nType: String\nAs with all platforms, you can give a platform a different name. By specifying id: foo, you can target this platform (only) by specifying -p foo in any of the Viash commands.\n\nExample\nid: foo"
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean_false.html",
    "href": "documentation/reference/config/arguments/boolean_false.html",
    "title": "boolean_false",
    "section": "",
    "text": "An argument of the boolean_false type acts like an inverted boolean flag with a default value of true. When called as an argument it sets the boolean to false."
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean_false.html#alternatives",
    "href": "documentation/reference/config/arguments/boolean_false.html#alternatives",
    "title": "boolean_false",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean_false.html#description",
    "href": "documentation/reference/config/arguments/boolean_false.html#description",
    "title": "boolean_false",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean_false.html#name",
    "href": "documentation/reference/config/arguments/boolean_false.html#name",
    "title": "boolean_false",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --no-log, -n or no-log. The number of dashes determines how values can be passed:\n\n--no-log is a long option, which can be passed with executable_name --no-log\n-n is a short option, which can be passed with executable_name -n\nno-log is an argument, which can be passed with executable_name no-log"
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html",
    "href": "documentation/reference/config/arguments/file.html",
    "title": "file",
    "section": "",
    "text": "A file type argument has a string value that points to a file or folder path."
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#alternatives",
    "href": "documentation/reference/config/arguments/file.html#alternatives",
    "title": "file",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#default",
    "href": "documentation/reference/config/arguments/file.html#default",
    "title": "file",
    "section": "default",
    "text": "default\nType: Path / List of Path\nThe default value when no argument value is provided. This will not work if the required property is enabled.\n\nExample\n- name: --my_file\n  type: file\n  default: data.csv"
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#description",
    "href": "documentation/reference/config/arguments/file.html#description",
    "title": "file",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#direction",
    "href": "documentation/reference/config/arguments/file.html#direction",
    "title": "file",
    "section": "direction",
    "text": "direction\nType: Direction\nMakes this argument an input or an output, as in does the file/folder needs to be read or written. input by default.\n\nExample\n- name: --my_output_file\n  type: file\n  direction: output"
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#example-3",
    "href": "documentation/reference/config/arguments/file.html#example-3",
    "title": "file",
    "section": "example",
    "text": "example\nType: Path / List of Path\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\n\nExample\n- name: --my_file\n  type: file\n  example: data.csv"
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#multiple",
    "href": "documentation/reference/config/arguments/file.html#multiple",
    "title": "file",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\n\nExample\n- name: --my_files\n  type: file\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_files=firstFile.csv:anotherFile.csv:yetAnother.csv"
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#multiple_sep",
    "href": "documentation/reference/config/arguments/file.html#multiple_sep",
    "title": "file",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: Char\nThe delimiter character for providing multiple values. : by default.\n\nExample\n- name: --my_files\n  type: file\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_files=firstFile.csv,anotherFile.csv,yetAnother.csv"
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#must_exist",
    "href": "documentation/reference/config/arguments/file.html#must_exist",
    "title": "file",
    "section": "must_exist",
    "text": "must_exist\nType: Boolean\nThe file or folder should exist before the start of execution. If set to true, an error will be produced if the file or folder wasn’t found.\n\nExample\n- name: --my_file\n  type: file\n  must_exist: true"
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#name",
    "href": "documentation/reference/config/arguments/file.html#name",
    "title": "file",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "documentation/reference/config/arguments/file.html#required",
    "href": "documentation/reference/config/arguments/file.html#required",
    "title": "file",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\n\nExample\n- name: --my_file\n  type: file\n  required: true"
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html",
    "href": "documentation/reference/config/arguments/integer.html",
    "title": "integer",
    "section": "",
    "text": "An integer type argument has a numeric value without decimal points."
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#alternatives",
    "href": "documentation/reference/config/arguments/integer.html#alternatives",
    "title": "integer",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#choices",
    "href": "documentation/reference/config/arguments/integer.html#choices",
    "title": "integer",
    "section": "choices",
    "text": "choices\nType: List of Int\nLimit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.\n\nExample\n- name: --memory\n  type: integer\n  choices: [1024, 2048, 4096]"
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#default",
    "href": "documentation/reference/config/arguments/integer.html#default",
    "title": "integer",
    "section": "default",
    "text": "default\nType: Int / List of Int\nThe default value when no argument value is provided. This will not work if the required property is enabled.\n\nExample\n- name: --my_integer\n  type: integer\n  default: 100"
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#description",
    "href": "documentation/reference/config/arguments/integer.html#description",
    "title": "integer",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#example-3",
    "href": "documentation/reference/config/arguments/integer.html#example-3",
    "title": "integer",
    "section": "example",
    "text": "example\nType: Int / List of Int\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\n\nExample\n- name: --my_integer\n  type: integer\n  example: 100"
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#max",
    "href": "documentation/reference/config/arguments/integer.html#max",
    "title": "integer",
    "section": "max",
    "text": "max\nType: Int\nMaximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with min to clamp values.\n\nExample\n- name: --my_integer\n  type: integer\n  max: 150"
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#min",
    "href": "documentation/reference/config/arguments/integer.html#min",
    "title": "integer",
    "section": "min",
    "text": "min\nType: Int\nMinimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with max to clamp values.\n\nExample\n- name: --my_integer\n  type: integer\n  min: 50"
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#multiple",
    "href": "documentation/reference/config/arguments/integer.html#multiple",
    "title": "integer",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\n\nExample\n- name: --my_integer\n  type: integer\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_integer=10:80:152"
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#multiple_sep",
    "href": "documentation/reference/config/arguments/integer.html#multiple_sep",
    "title": "integer",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: Char\nThe delimiter character for providing multiple values. : by default.\n\nExample\n- name: --my_integer\n  type: integer\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_integer=10:80:152"
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#name",
    "href": "documentation/reference/config/arguments/integer.html#name",
    "title": "integer",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "documentation/reference/config/arguments/integer.html#required",
    "href": "documentation/reference/config/arguments/integer.html#required",
    "title": "integer",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\n\nExample\n- name: --my_integer\n  type: integer\n  required: true"
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html",
    "href": "documentation/reference/config/arguments/double.html",
    "title": "double",
    "section": "",
    "text": "A double type argument has a numeric value with decimal points"
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#alternatives",
    "href": "documentation/reference/config/arguments/double.html#alternatives",
    "title": "double",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#default",
    "href": "documentation/reference/config/arguments/double.html#default",
    "title": "double",
    "section": "default",
    "text": "default\nType: Double / List of Double\nThe default value when no argument value is provided. This will not work if the required property is enabled.\n\nExample\n- name: --my_double\n  type: double\n  default: 5.8"
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#description",
    "href": "documentation/reference/config/arguments/double.html#description",
    "title": "double",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#example-2",
    "href": "documentation/reference/config/arguments/double.html#example-2",
    "title": "double",
    "section": "example",
    "text": "example\nType: Double / List of Double\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\n\nExample\n- name: --my_double\n  type: double\n  example: 5.8"
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#max",
    "href": "documentation/reference/config/arguments/double.html#max",
    "title": "double",
    "section": "max",
    "text": "max\nType: Double\nMaximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with min to clamp values.\n\nExample\n- name: --my_double\n  type: double\n  max: 80.4"
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#min",
    "href": "documentation/reference/config/arguments/double.html#min",
    "title": "double",
    "section": "min",
    "text": "min\nType: Double\nMinimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with max to clamp values.\n\nExample\n- name: --my_double\n  type: double\n  min: 25.5"
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#multiple",
    "href": "documentation/reference/config/arguments/double.html#multiple",
    "title": "double",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\n\nExample\n- name: --my_double\n  type: double\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_double=5.8:22.6:200.4"
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#multiple_sep",
    "href": "documentation/reference/config/arguments/double.html#multiple_sep",
    "title": "double",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: Char\nThe delimiter character for providing multiple values. : by default.\n\nExample\n- name: --my_double\n  type: double\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_double=5.8,22.6,200.4"
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#name",
    "href": "documentation/reference/config/arguments/double.html#name",
    "title": "double",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "documentation/reference/config/arguments/double.html#required",
    "href": "documentation/reference/config/arguments/double.html#required",
    "title": "double",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\n\nExample\n- name: --my_double\n  type: double\n  required: true"
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html",
    "href": "documentation/reference/config/arguments/string.html",
    "title": "string",
    "section": "",
    "text": "A string type argument has a value made up of an ordered sequences of characters, like “Hello” or “I’m a string”."
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html#alternatives",
    "href": "documentation/reference/config/arguments/string.html#alternatives",
    "title": "string",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html#choices",
    "href": "documentation/reference/config/arguments/string.html#choices",
    "title": "string",
    "section": "choices",
    "text": "choices\nType: List of String\nLimit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.\n\nExample\n- name: --language\n  type: string\n  choices: [\"python\", \"r\", \"javascript\"]"
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html#default",
    "href": "documentation/reference/config/arguments/string.html#default",
    "title": "string",
    "section": "default",
    "text": "default\nType: String / List of String\nThe default value when no argument value is provided. This will not work if the required property is enabled.\n\nExample\n- name: --my_string\n  type: string\n  default: \"The answer is 42\""
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html#description",
    "href": "documentation/reference/config/arguments/string.html#description",
    "title": "string",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html#example-3",
    "href": "documentation/reference/config/arguments/string.html#example-3",
    "title": "string",
    "section": "example",
    "text": "example\nType: String / List of String\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\n\nExample\n- name: --my_string\n  type: string\n  example: \"Hello World\""
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html#multiple",
    "href": "documentation/reference/config/arguments/string.html#multiple",
    "title": "string",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\n\nExample\n- name: --my_string\n  type: string\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_string=Marc:Susan:Paul"
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html#multiple_sep",
    "href": "documentation/reference/config/arguments/string.html#multiple_sep",
    "title": "string",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: Char\nThe delimiter character for providing multiple values. : by default.\n\nExample\n- name: --my_string\n  type: string\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_string=Marc,Susan,Paul"
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html#name",
    "href": "documentation/reference/config/arguments/string.html#name",
    "title": "string",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "documentation/reference/config/arguments/string.html#required",
    "href": "documentation/reference/config/arguments/string.html#required",
    "title": "string",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\n\nExample\n- name: --my_string\n  type: string\n  required: true"
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean.html",
    "href": "documentation/reference/config/arguments/boolean.html",
    "title": "boolean",
    "section": "",
    "text": "A boolean type argument has two possible values: true or false."
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean.html#alternatives",
    "href": "documentation/reference/config/arguments/boolean.html#alternatives",
    "title": "boolean",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean.html#default",
    "href": "documentation/reference/config/arguments/boolean.html#default",
    "title": "boolean",
    "section": "default",
    "text": "default\nType: Boolean / List of Boolean\nThe default value when no argument value is provided. This will not work if the required property is enabled.\n\nExample\n- name: --my_boolean\n  type: boolean\n  default: true"
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean.html#description",
    "href": "documentation/reference/config/arguments/boolean.html#description",
    "title": "boolean",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean.html#example-2",
    "href": "documentation/reference/config/arguments/boolean.html#example-2",
    "title": "boolean",
    "section": "example",
    "text": "example\nType: Boolean / List of Boolean\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\n\nExample\n- name: --my_boolean\n  type: boolean\n  example: true"
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean.html#multiple",
    "href": "documentation/reference/config/arguments/boolean.html#multiple",
    "title": "boolean",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\n\nExample\n- name: --my_boolean\n  type: boolean\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_boolean=true:true:false"
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean.html#multiple_sep",
    "href": "documentation/reference/config/arguments/boolean.html#multiple_sep",
    "title": "boolean",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: Char\nThe delimiter character for providing multiple values. : by default.\n\nExample\n- name: --my_boolean\n  type: boolean\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_boolean=true,true,false"
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean.html#name",
    "href": "documentation/reference/config/arguments/boolean.html#name",
    "title": "boolean",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --trim, -t or trim. The number of dashes determines how values can be passed:\n\n--trim is a long option, which can be passed with executable_name --trim\n-t is a short option, which can be passed with executable_name -t\ntrim is an argument, which can be passed with executable_name trim"
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean.html#required",
    "href": "documentation/reference/config/arguments/boolean.html#required",
    "title": "boolean",
    "section": "required",
    "text": "required\nType: Boolean\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\n\nExample\n- name: --my_boolean\n  type: boolean\n  required: true"
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean_true.html",
    "href": "documentation/reference/config/arguments/boolean_true.html",
    "title": "boolean_true",
    "section": "",
    "text": "An argument of the boolean_true type acts like a boolean flag with a default value of false. When called as an argument it sets the boolean to true."
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean_true.html#alternatives",
    "href": "documentation/reference/config/arguments/boolean_true.html#alternatives",
    "title": "boolean_true",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nList of alternative format variations for this argument."
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean_true.html#description",
    "href": "documentation/reference/config/arguments/boolean_true.html#description",
    "title": "boolean_true",
    "section": "description",
    "text": "description\nType: String\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "documentation/reference/config/arguments/boolean_true.html#name",
    "href": "documentation/reference/config/arguments/boolean_true.html#name",
    "title": "boolean_true",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --silent, -s or silent. The number of dashes determines how values can be passed:\n\n--silent is a long option, which can be passed with executable_name --silent\n-s is a short option, which can be passed with executable_name -s\nsilent is an argument, which can be passed with executable_name silent"
  },
  {
    "objectID": "documentation/reference/viash/ns.html",
    "href": "documentation/reference/viash/ns.html",
    "title": "viash ns",
    "section": "",
    "text": "Build a namespace from many viash config files.\nUsage:\nviash ns build [-n nmspc] [-s src] [-t target] [-p docker] [--setup] [---push] [--parallel] [--flatten]\n\n\n\n\n\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--config_mod, -c\nModify a viash config at runtime using a custom DSL. For more information, see the online documentation.\nList[String]\n\n\n--flatten, -f\nFlatten the target builds, handy for building one platform to a bin directory.\nBoolean\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--push\nWhether or not to push the container to a Docker registry [Docker Platform only].\nBoolean\n\n\n--query, -q\nFilter which components get selected by name and namespace. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--setup\nWhich setup strategy for creating the container to use [Docker Platform only].\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--target, -t\nA target directory to build the executables into. Default: target/.\nString\n\n\n--write_meta, -w\nWrite out some meta information to RESOURCES_DIR/viash.yaml at the end.\nBoolean\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "documentation/reference/viash/ns.html#viash-ns-test",
    "href": "documentation/reference/viash/ns.html#viash-ns-test",
    "title": "viash ns",
    "section": "viash ns test",
    "text": "viash ns test\nTest a namespace containing many viash config files.\nUsage:\nviash ns test [-n nmspc] [-s src] [-p docker] [--parallel] [--tsv file.tsv] [--append]\n\n\n\n\n\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--append, -a\nAppend to tsv instead of overwrite\nBoolean\n\n\n--config_mod, -c\nModify a viash config at runtime using a custom DSL. For more information, see the online documentation.\nList[String]\n\n\n--keep, -k\nWhether or not to keep temporary files. By default, files will be deleted if all goes well but remain when an error occurs. By specifying –keep true, the temporary files will always be retained, whereas –keep false will always delete them. The temporary directory can be overwritten by setting defining a VIASH_TEMP directory.\nString\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--query, -q\nFilter which components get selected by name and namespace. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--tsv, -t\nPath to write a summary of the test results to.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "documentation/reference/viash/ns.html#viash-ns-list",
    "href": "documentation/reference/viash/ns.html#viash-ns-list",
    "title": "viash ns",
    "section": "viash ns list",
    "text": "viash ns list\nList a namespace containing many viash config files.\nUsage:\nviash ns list [-n nmspc] [-s src] [-p docker]\n\n\n\n\n\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--config_mod, -c\nModify a viash config at runtime using a custom DSL. For more information, see the online documentation.\nList[String]\n\n\n--format, -f\nWhich output format to use.\nString\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--query, -q\nFilter which components get selected by name and namespace. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "documentation/reference/viash/config.html",
    "href": "documentation/reference/viash/config.html",
    "title": "viash config",
    "section": "",
    "text": "View the config file after parsing.\nUsage:\nviash config view config.vsh.yaml\n\n\n\n\n\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using a custom DSL. For more information, see the online documentation.\nList[String]\n\n\n--format, -f\nWhich output format to use.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "documentation/reference/viash/config.html#viash-config-inject",
    "href": "documentation/reference/viash/config.html#viash-config-inject",
    "title": "viash config",
    "section": "viash config inject",
    "text": "viash config inject\nInject a Viash header into the main script of a Viash component.\nUsage:\nviash config inject config.vsh.yaml\n\n\n\n\n\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using a custom DSL. For more information, see the online documentation.\nList[String]\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "documentation/reference/viash/test.html",
    "href": "documentation/reference/viash/test.html",
    "title": "viash test",
    "section": "",
    "text": "Usage:\nviash test config.vsh.yaml [-p docker] [-k true/false]\n\n\n\n\n\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using a custom DSL. For more information, see the online documentation.\nList[String]\n\n\n--keep, -k\nWhether or not to keep temporary files. By default, files will be deleted if all goes well but remain when an error occurs. By specifying –keep true, the temporary files will always be retained, whereas –keep false will always delete them. The temporary directory can be overwritten by setting defining a VIASH_TEMP directory.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "documentation/reference/viash/run.html",
    "href": "documentation/reference/viash/run.html",
    "title": "viash run",
    "section": "",
    "text": "Usage:\nviash run config.vsh.yaml [-p docker] [-k true/false]  -- [arguments for script]\n\n\n\n\n\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using a custom DSL. For more information, see the online documentation.\nList[String]\n\n\n--keep, -k\nWhether or not to keep temporary files. By default, files will be deleted if all goes well but remain when an error occurs. By specifying –keep true, the temporary files will always be retained, whereas –keep false will always delete them. The temporary directory can be overwritten by setting defining a VIASH_TEMP directory.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "documentation/reference/viash/build.html",
    "href": "documentation/reference/viash/build.html",
    "title": "viash build",
    "section": "",
    "text": "Usage:\nviash build config.vsh.yaml -o output [-p docker] [-m] [-s]\n\n\n\n\n\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using a custom DSL. For more information, see the online documentation.\nList[String]\n\n\n--meta, -m\nPrint out some meta information at the end.\nBoolean\n\n\n--output, -o\nPath to directory in which the executable and any resources is built to. Default: “output/”. This is a required argument.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--push\nWhether or not to push the container to a Docker registry [Docker Platform only].\nBoolean\n\n\n--setup, -s\nWhich setup strategy for creating the container to use [Docker Platform only].\nString\n\n\n--write_meta, -w\nWrite out some meta information to RESOURCES_DIR/viash.yaml at the end.\nBoolean\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "documentation/quickstart/index.html",
    "href": "documentation/quickstart/index.html",
    "title": "Quickstart",
    "section": "",
    "text": "This tutorial will guide you through creating a Viash component, generating a Nextflow module and using that in a simple data pipeline. We will provide useful links to our Guide and Reference pages along the way if you want to delve deeper into certain topics."
  },
  {
    "objectID": "documentation/quickstart/index.html#what-is-viash",
    "href": "documentation/quickstart/index.html#what-is-viash",
    "title": "Quickstart",
    "section": "What is Viash?",
    "text": "What is Viash?\nViash is a script code wrapper for building modular software components that serve as building blocks to develop (Nextflow) data pipelines. All you need is your script and a metadata file to get started.\nHere are a few of Viash’s key features:\n\nYou can use your preferred scripting language per component, and mix and match scripts between multiple components as you please. Supported languages include: Bash, Python, R, Scala, JS and C#.\nA custom Docker container is automatically generated based on your dependencies described in your metadata. No expert Docker knowledge is required.\nViash generates a Nextflow module from your script. No expert Nextflow knowledge is required.\nYou can simply script the nextflow modules to create and run your scalable and reproducible data pipeline.\nYou can test every single module on your local workstation through the built-in development kit."
  },
  {
    "objectID": "documentation/quickstart/index.html#quickstart-example-project",
    "href": "documentation/quickstart/index.html#quickstart-example-project",
    "title": "Quickstart",
    "section": "Quickstart example project",
    "text": "Quickstart example project\nThe example in this Quickstart will take you from nothing to a scalable and reproducible data pipeline. Here’s the pipeline you’ll be building:\n\n\n\n\ngraph LR\n   A(data/file?.tsv) --> B[/remove_comments/]\n   B --> C[/take_column/]\n   C --> D[/combine_columns/]\n   D --> E(output)\n\n\n\n\n\n\n\n\nOne or more TSV files are taken as the input and will be processed through a series of modules. At the end, the output is written away to a folder."
  },
  {
    "objectID": "documentation/quickstart/index.html#step-1-installation",
    "href": "documentation/quickstart/index.html#step-1-installation",
    "title": "Quickstart",
    "section": "Step 1: Installation",
    "text": "Step 1: Installation\nBefore getting started, make sure you’ve installed Viash, Docker and Nextflow on your system.\nIf you want to skip the directory structure component creation and start using Viash commands right away, download the zip below and skip to Step 6: Generating builds.\nDownload starter.zip"
  },
  {
    "objectID": "documentation/quickstart/index.html#step-2-prepare-the-directory-structure",
    "href": "documentation/quickstart/index.html#step-2-prepare-the-directory-structure",
    "title": "Quickstart",
    "section": "Step 2: Prepare the directory structure",
    "text": "Step 2: Prepare the directory structure\nTo keep the source code, input data and build targets separated, it’s good practice to make some dedicated directories. Create a directory structure that looks like this, either by hand or with the commands below:\nadvanced_pipeline\n├── data\n└── src\n    └── example\n        ├── combine_columns\n        ├── remove_comments\n        └── take_column\nmkdir advanced_pipeline\nmkdir advanced_pipeline/data\nmkdir advanced_pipeline/src\nmkdir advanced_pipeline/src/example\nmkdir advanced_pipeline/src/example/combine_columns\nmkdir advanced_pipeline/src/example/remove_comments\nmkdir advanced_pipeline/src/example/take_column"
  },
  {
    "objectID": "documentation/quickstart/index.html#step-3-create-an-example-file",
    "href": "documentation/quickstart/index.html#step-3-create-an-example-file",
    "title": "Quickstart",
    "section": "Step 3: Create an example file",
    "text": "Step 3: Create an example file\nThe input for this pipeline consists of one or more TSV files in the data directory. Add a new file named file1.tsv to the data directory and add the following as its content (or download the file):\nDownload file1.tsv\n# this is a header      \n# this is also a header     \none     0.11    123\ntwo     0.23    456\nthree   0.35    789\nfour    0.47    123\n\n\n\nSee current directory structure\n\nadvanced_pipeline\n├── data  \n│   └── > sample.tsv <  \n└── src  \n    └── example  \n        ├── combine_columns  \n        ├── remove_comments  \n        └── take_column"
  },
  {
    "objectID": "documentation/quickstart/index.html#step-4-write-a-script",
    "href": "documentation/quickstart/index.html#step-4-write-a-script",
    "title": "Quickstart",
    "section": "Step 4: Write a script",
    "text": "Step 4: Write a script\nA Viash component consists of a script and a config file, let’s start with a Bash script. Add a new file named script.sh to the advanced_pipeline/src/example/remove_comments directory and add this:\nDownload script.sh\n#!/bin/bash\ngrep -v '^#' \"$par_input\" > \"$par_output\"\n\n\nSee current directory structure\n\nadvanced_pipeline\n├── data\n│   └── file1.tsv\n└── src\n    └── example\n        ├── combine_columns\n        ├── remove_comments\n        │   └── > script.sh <\n        └── take_column"
  },
  {
    "objectID": "documentation/quickstart/index.html#step-5-add-a-viash-config-file",
    "href": "documentation/quickstart/index.html#step-5-add-a-viash-config-file",
    "title": "Quickstart",
    "section": "Step 5: Add a Viash config file",
    "text": "Step 5: Add a Viash config file\nWith the script added, you can now add a Viash config file next to it to complete the component. Add a file named config.vsh.yaml to the advanced_pipeline/src/example/remove_comments directory, using the following as its content:\nDownload config.vsh.yaml\nfunctionality:\n  name: remove_comments\n  description: My first Nextflow pipeline module\n  namespace: example\n  arguments:\n    - name: \"--input\"\n      alternatives: [ \"-i\" ]\n      type: file\n      required: true\n    - name: \"--output\"\n      alternatives: [ \"-o\" ]\n      type: file\n      required: true\n      direction: output\n    - type: string\n      name: --id\n      default: \"remove_comments\"\n  resources:\n  - type: bash_script\n    path: ./script.sh\nplatforms:\n  - type: docker\n    image: ubuntu:20.04\n  - type: nextflow\n    variant: vdsl3\n\n\nSee current directory structure\n\nadvanced_pipeline\n├── data\n│   └── file1.tsv\n└── src\n    └── example\n        ├── combine_columns\n        ├── remove_comments\n        │   ├── > config.vsh.yaml <\n        │   └── script.sh\n        └── take_column"
  },
  {
    "objectID": "documentation/quickstart/index.html#step-6-generating-builds",
    "href": "documentation/quickstart/index.html#step-6-generating-builds",
    "title": "Quickstart",
    "section": "Step 6: Generating builds",
    "text": "Step 6: Generating builds\nNow that you have a component, it’s time to use Viash to generate the executable and module. Make sure your working directory is inside the root of the advanced_pipeline directory, then run the viash ns build command:\nviash ns build\n\n\n\n\n\n\nNote\n\n\n\nA namespace is a group of related Viash components. The ns build command builds all components in a given namespace.\n\n\nThe output should look like this:\nExporting remove_comments (example) =docker=> target/docker/example/remove_comments\nExporting remove_comments (example) =nextflow=> target/nextflow/example/remove_comments\nAll 2 configs built successfully\nViash has now generated a target directory structure and several files grouped per platform.\n\n\nSee current directory structure\n\nadvanced_pipeline\n├── data\n│   └── file1.tsv\n├── src\n│   └── example\n│       ├── combine_columns\n│       ├── remove_comments\n│       │   ├── config.vsh.yaml\n│       │   └── script.sh\n│       └── take_column\n└── > target <\n    ├── docker\n    │   └── example\n    │       └── remove_comments\n    │           └── remove_comments\n    └── nextflow\n        └── example\n            └── remove_comments\n                ├── main.nf\n                └── nextflow.config"
  },
  {
    "objectID": "documentation/quickstart/index.html#step-7-run-the-build-targets",
    "href": "documentation/quickstart/index.html#step-7-run-the-build-targets",
    "title": "Quickstart",
    "section": "Step 7: Run the build targets",
    "text": "Step 7: Run the build targets\nYou now have two usable targets which you can run:\n\nAn executable with a Docker backend in the target/docker directory. This runs an executable based on your component in a docker container.\nA Nextflow module in the target/nextflow directory. This module is ready to be used in a data pipeline.\n\nTo test if the executable works, try running the following command:\ntarget/docker/example/remove_comments/remove_comments --help\nThis should give you a summary of what you can do with the executable and the arguments it accepts based on the component’s config file.\nNext, try running it with the following command:\ntarget/docker/example/remove_comments/remove_comments \\\n--input data/file1.tsv --output output/test_output.tsv\nThere should now be a test_output.tsv file in the output directory with the following content:\none     0.11    123\ntwo     0.23    456\nthree   0.35    789\nfour    0.47    123\nNotice that the lines starting with hashtags have been removed, this means the executable works!\nNow try getting the documentation from the Nextflow module with this command:\nnextflow run target/nextflow/example/remove_comments/main.nf --help\nThis will not only give you the same information as it did with the executable, but also additional arguments specific to Nextflow modules.\nThe final test is to run the Nextflow module as a standalone pipeline so it can process the TSV just like the executable did before it:\nnextflow run target/nextflow/example/remove_comments/main.nf \\\n--input ./data/file1.tsv --publishDir output\nIf all went well, you should now find a new file inside of an output directory that contains the TSV contents without the comments."
  },
  {
    "objectID": "documentation/quickstart/index.html#step-8-create-a-nextflow-pipeline",
    "href": "documentation/quickstart/index.html#step-8-create-a-nextflow-pipeline",
    "title": "Quickstart",
    "section": "Step 8: Create a Nextflow pipeline",
    "text": "Step 8: Create a Nextflow pipeline\nTime to ramp things up and create a simple Nextflow pipeline by adding a Nextflow script named main.nf to the root of the advanced_pipeline folder. Add the following:\ntargetDir = \"./target/nextflow\" \n\ninclude { remove_comments } from \"$targetDir/example/remove_comments/main.nf\" \n\nworkflow {\n  Channel.fromPath(params.input) // 3\n    | map{ file -> [ file.baseName, file ] } \n    | view{ file -> \"Input: $file\" }\n    | remove_comments.run( \n    auto: [ publish: true ])\n    | view{ file -> \"Output: $file\" } \n}\n\n\nSee current directory structure\n\nadvanced_pipeline\n├── data\n│   ├── file1.tsv\n│   └── test_output.tsv\n├── > main.nf <\n├── src\n│   └── example\n│       ├── combine_columns\n│       ├── remove_comments\n│       │   ├── config.vsh.yaml\n│       │   └── script.sh\n│       └── take_column\n└── target\n    ├── docker\n    │   └── example\n    │       └── remove_comments\n    │           └── remove_comments\n    └── nextflow\n        └── example\n            └── remove_comments\n                ├── main.nf\n                └── nextflow.config"
  },
  {
    "objectID": "documentation/quickstart/index.html#step-9-run-the-pipeline",
    "href": "documentation/quickstart/index.html#step-9-run-the-pipeline",
    "title": "Quickstart",
    "section": "Step 9: Run the pipeline",
    "text": "Step 9: Run the pipeline\nNow run the pipeline script you just created with Nextflow:\nnextflow run main.nf \\\n--input ./data/file1.tsv --publishDir output\nThis should have created another file inside of the output directory, which means the pipeline works as expected."
  },
  {
    "objectID": "documentation/quickstart/index.html#step-10-expand-the-pipeline",
    "href": "documentation/quickstart/index.html#step-10-expand-the-pipeline",
    "title": "Quickstart",
    "section": "Step 10: Expand the pipeline",
    "text": "Step 10: Expand the pipeline\nYou now have a pipeline with a single module, which isn’t a very realistic scenario. To remedy that, you’ll add two more components to the src directory.\nTo start with, add the take_column component by adding a script named script.py and the config file to the src/example/take_columns directory\nDownload script.py\n\n\n\nContents of script.py\n\nimport pandas as pd\n\n## VIASH START\npar = {\n    \"input\": \"data/file1.tsv\",\n    \"column\": 2,\n    \"output\": \"temp/foo\"\n}\n## VIASH END\n\n# read the tsv file\ntab = pd.read_csv(par[\"input\"], sep=\"\\t\", comment=\"#\")\n\n# subset a column\ntab_filt = tab.iloc[:, par[\"column\"]-1]\n\n# write to file\ntab_filt.to_csv(par[\"output\"], index=False)\n\nDownload config.vsh.yaml\n\n\n\nContents of config.vsh.yaml\n\nfunctionality:\n  name: take_column\n  namespace: example\n  arguments:\n    - name: \"--input\"\n      alternatives: [ \"-i\" ]\n      type: file\n      required: true\n    - name: \"--output\"\n      alternatives: [ \"-o\" ]\n      type: file\n      required: true\n      direction: output\n    - name: \"--column\"\n      type: integer\n      required: false\n      default: 2\n    - type: string\n      name: --id\n      default: \"take_column\"\n  resources:\n  - type: python_script\n    path: ./script.py\nplatforms:\n  - type: docker\n    image: amancevice/pandas:slim\n  - type: nextflow\n    variant: vdsl3\n\nThis component subsets a TSV file by extracting only a certain column for the file.\nNow add a script named script.R and a Viash config to the src/example/combine_columns directory to create the combine_columns component:\nDownload script.R\n\n\n\nContents of script.R\n\n## VIASH START\npar <- list(\n    input = c(\"data/file1.tsv\", \"data/file2.tsv\"),\n    output = \"temp/foo.tsv\"\n)\n## VIASH END\n\nouts <- lapply(par$input, function(file) {\n  read.delim(file, comment.char = \"#\", sep = \"\\t\", header = FALSE)\n})\n\ntable <- do.call(cbind, outs)\n\nwrite.table(table, par$output, col.names = FALSE, sep = \"\\t\")\n\nDownload config.vsh.yaml\n\n\n\nContents of config.vsh.yaml\n\nfunctionality:\n  name: combine_columns\n  namespace: example\n  arguments:\n    - name: \"--input\"\n      alternatives: [ \"-i\" ]\n      type: file\n      multiple: true\n      required: true\n    - name: \"--output\"\n      alternatives: [ \"-o\" ]\n      type: file\n      required: true\n      direction: output\n    - type: string\n      name: --id\n      default: \"combine_columns\"\n  resources:\n    - type: r_script\n      path: ./script.R\nplatforms:\n  - type: docker\n    image: rocker/r-ver:4.1\n  - type: nextflow\n    variant: vdsl3\n\nThe combine_columns combines multiple TSV files into one by concatenating all of the columns together, assuming every TSV file has the same amount of rows.\n\n\nSee current directory structure\n\nadvanced_pipeline\n├── data\n│   ├── file1.tsv\n│   └── test_output.tsv\n├── main.nf\n├── src\n│   └── example\n│       ├── combine_columns\n│       │   ├── > config.vsh.yaml <\n│       │   └── > script.R <\n│       ├── remove_comments\n│       │   ├── config.vsh.yaml\n│       │   └── script.sh\n│       └── take_column\n│           ├── > config.vsh.yaml <\n│           └── > script.py <\n└── target\n    ├── docker\n    │   └── example\n    │       └── remove_comments\n    │           └── remove_comments\n    └── nextflow\n        └── example\n            └── remove_comments\n                ├── main.nf\n                └── nextflow.config"
  },
  {
    "objectID": "documentation/quickstart/index.html#step-11-generate-more-modules",
    "href": "documentation/quickstart/index.html#step-11-generate-more-modules",
    "title": "Quickstart",
    "section": "Step 11: Generate more modules",
    "text": "Step 11: Generate more modules\nWith the two extra components in place, run the viash ns build command again:\nviash ns build\nThe output will look like this:\nExporting take_column (example) =docker=> target/docker/example/take_column\nExporting take_column (example) =nextflow=> target/nextflow/example/take_column\nExporting combine_columns (example) =docker=> target/docker/example/combine_columns\nExporting combine_columns (example) =nextflow=> target/nextflow/example/combine_columns\nExporting remove_comments (example) =docker=> target/docker/example/remove_comments\nExporting remove_comments (example) =nextflow=> target/nextflow/example/remove_comments\nThe target directory now contains the needed executables and modules to expand the pipeline.\n\n\nSee current directory structure\n\nadvanced_pipeline\n├── data\n│   ├── file1.tsv\n│   └── test_output.tsv\n├── main.nf\n├── src\n│   └── example\n│       ├── combine_columns\n│       │   ├── config.vsh.yaml\n│       │   └── script.R\n│       ├── remove_comments\n│       │   ├── config.vsh.yaml\n│       │   └── script.sh\n│       └── take_column\n│           ├── config.vsh.yaml\n│           └── script.py\n└── target\n    ├── docker\n    │   └── example\n    │       ├── combine_columns\n    │       │   └── combine_columns\n    │       ├── remove_comments\n    │       │   └── remove_comments\n    │       └── take_column\n    │           └── take_column\n    └── nextflow\n        └── example\n            ├── combine_columns\n            │   ├── main.nf\n            │   └── nextflow.config\n            ├── remove_comments\n            │   ├── main.nf\n            │   └── nextflow.config\n            └── take_column\n                ├── main.nf\n                └── nextflow.config"
  },
  {
    "objectID": "documentation/quickstart/index.html#step-12-create-the-final-pipeline",
    "href": "documentation/quickstart/index.html#step-12-create-the-final-pipeline",
    "title": "Quickstart",
    "section": "Step 12: Create the final pipeline",
    "text": "Step 12: Create the final pipeline\nThe puzzle pieces are now in place, waiting for you to create the final pipeline and run it. Replace the contents of the main.nf script in the root of the advanced_pipeline directory with the following:\ntargetDir = \"./target/nextflow\" \n\ninclude { remove_comments } from \"$targetDir/example/remove_comments/main.nf\" \ninclude { take_column } from \"$targetDir/example/take_column/main.nf\" \ninclude { combine_columns } from \"$targetDir/example/combine_columns/main.nf\" \n\nworkflow {\n  Channel.fromPath(params.input)\n    | map{ file -> [ file.baseName, file ] }\n    | remove_comments\n    | take_column\n    | toList()\n    | map{ tups -> \n      files = tups.collect{id, file -> file}\n      [ \"combined\", [ input: files ] ] \n      }\n    | combine_columns.run(\n      auto: [ publish: true ]\n      )\n    | view{ file -> \"Output: $file\" }\n}\nFinally, run the pipeline using Nextflow with the following command:\nnextflow run main.nf \\\n--input ./data/file1.tsv --publishDir output\nThis will process the input file through the three modules with the result being written to the output folder:\n\"1\" 123\n\"2\" 456\n\"3\" 789\n\"4\" 123"
  },
  {
    "objectID": "documentation/quickstart/index.html#whats-next",
    "href": "documentation/quickstart/index.html#whats-next",
    "title": "Quickstart",
    "section": "What’s next?",
    "text": "What’s next?\nYou can download the full pipeline using the download button below.\nDownload complete.zip\nNow that you’ve had a taste of what Viash can do for you, take a look at our Guide and Reference pages to learn more about how to use Viash.\nIf you want to start simple, we suggest to take a look at the Native component creation guide."
  },
  {
    "objectID": "documentation/guide/building-block/docker/building-running.html",
    "href": "documentation/guide/building-block/docker/building-running.html",
    "title": "Docker Executable",
    "section": "",
    "text": "This guide covers how you can can build and run an executable with a Docker backend. Most of what is covered in the Native Executable guide is true for executables with a Docker backend."
  },
  {
    "objectID": "documentation/guide/building-block/docker/building-running.html#building-the-executable",
    "href": "documentation/guide/building-block/docker/building-running.html#building-the-executable",
    "title": "Docker Executable",
    "section": "Building the executable",
    "text": "Building the executable\nIf you have multiple platforms defined in your Viash config file, use the --platform argument of viash build to specify you want to create an executable with a Docker backend.\nviash build config.vsh.yaml --platform docker --output bin"
  },
  {
    "objectID": "documentation/guide/building-block/docker/building-running.html#running-the-executable",
    "href": "documentation/guide/building-block/docker/building-running.html#running-the-executable",
    "title": "Docker Executable",
    "section": "Running the executable",
    "text": "Running the executable\nYou can run the executable by executing it as a command:\nbin/hello_world\nExecutable with a Docker backend include functions to create a Docker image and a container based on your Viash config file. When you run the executable for the first time, both the image and container will built, followed by running the executable inside of the container:\n[notice] Checking if Docker image is available at 'hello_world:latest'\n[warning] Could not pull from 'hello_world:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'hello_world:latest' with Dockerfile\nHello World\nIf you already have the container on your system, that will be used to run the executable:\nHello World"
  },
  {
    "objectID": "documentation/guide/building-block/docker/building-running.html#whats-next",
    "href": "documentation/guide/building-block/docker/building-running.html#whats-next",
    "title": "Docker Executable",
    "section": "What’s next?",
    "text": "What’s next?\nNow you know how to build and run executables with a Docker backend, you may be interested in building and running Nextflow modules."
  },
  {
    "objectID": "documentation/guide/building-block/nextflow/building-running.html",
    "href": "documentation/guide/building-block/nextflow/building-running.html",
    "title": "Build & Run",
    "section": "",
    "text": "This guide covers how you can can build a Nextflow module and run it as a standalone pipeline."
  },
  {
    "objectID": "documentation/guide/building-block/nextflow/building-running.html#building-a-nextflow-vdsl3-module",
    "href": "documentation/guide/building-block/nextflow/building-running.html#building-a-nextflow-vdsl3-module",
    "title": "Build & Run",
    "section": "Building a Nextflow VDSL3 module",
    "text": "Building a Nextflow VDSL3 module\nTo start off, either follow along with the Nextflow component creation guide to create a simple hello_world component that targets Nextflow or download the zip below containing the component in all supported languages.\nDownload hello_world_nextflow.zip\nIf you downloaded the zip above, rename the language folder you want to use to hello_world and use that as your working directory.\nTo let Viash generate a Nextflow module from your component, use the viash build command:\nviash build src/config.vsh.yaml --platform nextflow --output target\nThis will generate two files in the target directory: a pipeline script named main.nf and a Nextflow config file named nextflow.config. Your directory structure should now look like this:\nhello_world\n├── src\n│   ├── config.vsh.yaml\n│   └── script.sh\n└── target\n    ├── main.nf\n    └── nextflow.config"
  },
  {
    "objectID": "documentation/guide/building-block/nextflow/building-running.html#running-a-standalone-pipeline",
    "href": "documentation/guide/building-block/nextflow/building-running.html#running-a-standalone-pipeline",
    "title": "Build & Run",
    "section": "Running a standalone pipeline",
    "text": "Running a standalone pipeline\nWith the module built, you can now call the pipeline script with nextflow to run it standalone:\nnextflow run target/main.nf --publishDir ./output --output myFile.txt \nYou might be wondering where the --publishDir argument comes from. This is required by Nextflow, it specifies the directory where the output from the module should be put. In this case, a new folder named output. The --output argument sets the filename, myFile.txt.\nHere’s what should be shown in the console:\nN E X T F L O W  ~  version 22.04.5\nLaunching `target/main.nf` [prickly_brattain] DSL2 - revision: 3c1902d86f\nWARN: Key for module 'hello_world' is duplicated.\n\nexecutor >  local (1)\n[90/735d3c] process > hello_world:hello_world_process1 (1) [100%] 1 of 1 ✔\ninput: [hello_world, [input:World, id:hello_world, output:myFile.txt]]\noutput: [hello_world, /home/user/hello_world/work/90/735d3cc9396ce3aa5629eb9ede59b7/myFile.txt]\nNextflow will have generated several directories and files, but the one we’re interested in is the output directory. It should contain a file named myFile.txt with a single line of text: Hello World. You can check this by opening the file or printing its contents to the terminal like this:\ncat output/myFile.txt \nWhich should result in:\nHello World"
  },
  {
    "objectID": "documentation/guide/building-block/nextflow/building-running.html#whats-next",
    "href": "documentation/guide/building-block/nextflow/building-running.html#whats-next",
    "title": "Build & Run",
    "section": "What’s next?",
    "text": "What’s next?\nTo use generated modules inside an actual Nextflow pipeline, take a look at our Pipeline Basics guide."
  },
  {
    "objectID": "documentation/guide/building-block/native-building-running.html",
    "href": "documentation/guide/building-block/native-building-running.html",
    "title": "Native Executable",
    "section": "",
    "text": "This guide covers how you can can build and run a native executable."
  },
  {
    "objectID": "documentation/guide/building-block/native-building-running.html#building-a-native-executable",
    "href": "documentation/guide/building-block/native-building-running.html#building-a-native-executable",
    "title": "Native Executable",
    "section": "Building a native executable",
    "text": "Building a native executable\nTo start with, create a Viash component that targets the native platform as explained in this guide or download the sample component via the download button below.\nThe zip contains the component in all supported languages. Simply rename the language folder you want to use to hello_world and use that as your working directory.\nDownload hello_world.zip\nNext, use the viash build command to generate an executable inside of a bin directory:\nviash build config.vsh.yaml --output bin\nThis will generate an executable named the same as your component in the bin directory:\nhello_world\n├── bin\n│   └── hello_world\n├── config.vsh.yaml\n└── script.sh"
  },
  {
    "objectID": "documentation/guide/building-block/native-building-running.html#documentation",
    "href": "documentation/guide/building-block/native-building-running.html#documentation",
    "title": "Native Executable",
    "section": "Documentation",
    "text": "Documentation\nIt’s often useful to know what arguments an executable expects before trying to run it. To display its documentation, run the executable with just the --help argument:\nbin/hello_world --help\nThis will result in output that looks like this:\nhello_world\n\nA minimal example component.\n\nOptions:\n    --input\n        type: string\n        default: World\nThis example takes a single optional string named --input as an argument."
  },
  {
    "objectID": "documentation/guide/building-block/native-building-running.html#running-the-executable",
    "href": "documentation/guide/building-block/native-building-running.html#running-the-executable",
    "title": "Native Executable",
    "section": "Running the executable",
    "text": "Running the executable\nRunning a native executable is the same as any other executable on your system. Simply call it as a command in your terminal:\nbin/hello_world\nThis results in the following output:\nHello World\nYou can pass arguments to it directly, which differs from using the viash run command as Viash itself isn’t called:\nbin/hello_world --input \"everyone!\"\nThis outputs:\nHello everyone!"
  },
  {
    "objectID": "documentation/guide/building-block/native-building-running.html#whats-next",
    "href": "documentation/guide/building-block/native-building-running.html#whats-next",
    "title": "Native Executable",
    "section": "What’s next?",
    "text": "What’s next?\n\n\nNow you know how to build and run native executables, you might also be interested in learning more about executables with a Docker backend."
  },
  {
    "objectID": "documentation/guide/component/unit-testing.html",
    "href": "documentation/guide/component/unit-testing.html",
    "title": "Unit Testing",
    "section": "",
    "text": "To ensure that your components and namespaces works as expected during its development cycle, writing one or more tests is essential.\nViash supports unit testing, which is a software testing method by which individual units of source code are tested to determine whether they output data as expected."
  },
  {
    "objectID": "documentation/guide/component/unit-testing.html#unit-testing-a-single-component",
    "href": "documentation/guide/component/unit-testing.html#unit-testing-a-single-component",
    "title": "Unit Testing",
    "section": "Unit testing a single component",
    "text": "Unit testing a single component\nTo write a unit test for a component, you need two things: a definition in the config file and a script that runs the executable and verifies its output.\nThis tutorial uses a sample component named md_url_checker to explain how to write a unit test for Viash. To follow along, start by creating a new folder named “testing” on your machine.\nNow create a new file named Testfile.md and add the following contents:\n# Test File\n\nThis is a simple markdown file with some hyperlinks to test if the component works correctly.\nSome links to websites:\n\n- [Google](https://www.google.com)\n- [Reddit](https://www.reddit.com)\n- [A broken link](http://microsoft.com/random-link)\n\nLinks that are relative to [viash.io](http://www.viash.io):\n\n- You can [install viash here](/documentation/installation).\n- It all starts with a script and a [config file](/documentation/reference/config/overview.html).\nNext, either download or copy the text for the config file and script below and add them to the same folder:\nDownload config.vsh.yaml\n\n\n\nContents of config.vsh.yaml\n\nfunctionality:\n  name: md_url_checker\n  description: Check if URLs in a markdown are reachable and create a text report with the results.\n  arguments:                     \n  - type: file\n    name: --inputfile\n    description: The input markdown file.\n    required: true\n    must_exist: true\n  - type: string                           \n    name: --domain\n    description: The domain URL that gets inserted before any relative URLs. For example, \"/documentation/intro\" could be replaced with \"https://my-website/documentation/intro\" to create a valid URL.\n  - type: file                           \n    name: --output\n    description: The path of the output text file that will contain the report.\n    default: \"output.txt\"\n    direction: output\n  resources:\n  - type: bash_script\n    path: script.sh\n  test_resources:\n  - type: bash_script\n    path: test.sh\n  - path: Testfile.md\nplatforms:\n  - type: native\n  - type: docker\n    image: bash:latest\n    setup:\n      - type: apk\n        packages: [ curl ]\n\nDownload script.sh\n\n\n\nContents of script.sh\n\n#!/usr/bin/env bash\n\n### 1 ###\n\n## VIASH START\n\npar_inputfile=\"Testfile.md\"\npar_domain=\"https://viash.io\"\npar_output=\"output.txt\"\n\n## VIASH END\n\namount_of_errors=0\n\necho \"Extracting URLs\"\n\n### 2 ###\n\n# Extract the titles and URLs from the markdown file with sed and put them into arrays\nreadarray -t title_array <<<$(sed -rn 's@^.*\\[(.*)\\]\\((.*)\\).*$@\\1@p' $par_inputfile)\nreadarray -t url_array <<<$(sed -rn 's@^.*\\[(.*)\\]\\((.*)\\).*$@\\2@p' $par_inputfile)\n\n# Get length of array\namount_of_urls=$(echo \"${#url_array[@]}\")\n\necho \"Checking $amount_of_urls URLs\"\n\n# Clear file\n>$par_output\n\n### 3 ###\n\n# Iterate over the array of titles and check each URL\nfor ((n = 0; n < ${#title_array[*]}; n++)); do\n    title=\"${title_array[n]}\"\n    url=\"${url_array[n]}\"\n\n    ### 4 ###\n\n    # If an URL doesn't start with 'http', add the domain before it\n    if [[ $url != http* ]]; then\n        url=\"$par_domain${url_array[n]}\"\n    fi\n\n    echo \"$(($n + 1)): $url\"\n\n    echo -e \"Link name: $title\" >>$par_output\n    echo -e \"URL: $url\" >>$par_output\n\n    ### 5 ###\n\n    # Do a cURL and get the status code from the last response after following any redirects\n    status_code=$(curl -ILs --max-redirs 5 $url | tac | grep -m1 HTTP)\n    expected_code=\"200\"\n\n    # Check if status code obtained via cURL contains the expected code\n    if [[ $status_code == *$expected_code* ]]; then\n        echo \"OK\"\n        echo -e \"Status: OK, can be reached.\" >>$par_output\n    else\n        echo $status_code\n        echo -e \"Status: ERROR! URL cannot be reached. Status code: $status_code\" >>$par_output\n        amount_of_errors=$(($amount_of_errors + 1))\n    fi\n\n    echo -e \"---\" >>$par_output\ndone\n\necho \"\"\necho \"$par_inputfile has been checked and a report named $par_output has been generated.\n$amount_of_errors of $amount_of_urls URLs could not be resolved.\"\n\n\nConfiguration\nTo see where to define your unit tests, open up config.vsh.yaml file and take a look at the end of the functionality dictionary, between the path: script.sh and platforms: lines:\n  test_resources:\n  - type: bash_script\n    path: test.sh\n  - path: Testfile.md\nThe test_resources dictionary contains a reference to a test script and all of the files that need to be copied over in order to complete a test:\n\nThe type signifies what scripting language is used for performing the unit test, which doesn’t need to be the same language as the main script. The path points to the test script.\nEvery file path added straight into the tests dictionary will be copied over next to the temporary test directory. Any files that are necessary for the test to work correctly can be added here.\n\nIn the case of this example, test.sh will be the test script and Testfile.md is necessary as an input markdown file for the script to function.\n\n\nTest script\nTo write the test itself, create a new file named test.sh in the testing folder and add this as its content:\nset -ex # Exit the script when one of the checks fail. Output all commands.\n\n# Check 1\necho \">>> Checking whether output is correct\"\n\n# Run md_url_checker component with its required inputs and output the results to test-output.txt\n\"./$meta_functionality_name\" --inputfile Testfile.md > test-output.txt\n\n[[ ! -f test-output.txt ]] && echo \"Test output file could not be found!\" && exit 1 # Check if test-output.txt exists\ngrep -q '1: https://www.google.com' test-output.txt # Did the script find the URL?\ngrep -q 'HTTP/2 404' test-output.txt  # Did the web request return a 404 for the page that doesn't exist?\n\n# Check 2\necho \">>> Checking whether an output file was created correctly\"\n\n[[ ! -f output.txt ]] && echo \"Output file could not be found!\" && exit 1 # Check if output.txt exists\ngrep -q 'URL: https://www.google.com' output.txt # Was the URL written correctly in the report?\ngrep -q 'Status: ERROR! URL cannot be reached. Status code: HTTP/2 404' output.txt # Was the error written correctly in the report?\ngrep -q 'Link name: install viash here' output.txt # Was link name written correctly in the report?\n\necho \">>> Test finished successfully!\"\nexit 0 # Exit with a 0 code to note a success \n\n\n\n\n\n\nTip\n\n\n\nAs you can see above, you can use the meta variable $meta_functionality_name to automatically get the name of the component (and the generated executable). This way, you can more reuse parts of your test scripts.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThis script uses grep to search for files and strings. Make sure to read the comments to understand what is happening.\n\n\nThe bash script above is just a minimal example of how you can write a test. You can use any of the supported languages and your favorite testing framework if that’s your preference. The most important part is the last line, which uses a 0 exit code to signal a success.\n\n\nRunning a test\nTo run all tests defined in a config file, use the viash test command:\nviash test config.vsh.yaml\nViash will now automatically build an executable and place it alongside the other defined resources in a temporary working directory. The output should look like this:\nRunning tests in temporary directory: '/tmp/viash_test_md_url_checker5828773777380597444'\n====================================================================\n+/tmp/viash_test_md_url_checker5828773777380597444/build_executable/md_url_checker ---setup\n====================================================================\n+/tmp/viash_test_md_url_checker5828773777380597444/test_test.sh/test.sh\n>>> Checking whether output is correct\n+ echo '>>> Checking whether output is correct'\n+ ./md_url_checker --inputfile Testfile.md\n+ [[ ! -f test-output.txt ]]\n+ grep -q '1: https://www.google.com' test-output.txt\n+ grep -q 'HTTP/2 404' test-output.txt\n>>> Checking whether an output file was created correctly\n+ echo '>>> Checking whether an output file was created correctly'\n+ [[ ! -f output.txt ]]\n+ grep -q 'URL: https://www.google.com' output.txt\n+ grep -q 'Status: ERROR! URL cannot be reached. Status code: HTTP/2 404' output.txt\n+ grep -q 'Link name: install viash here' output.txt\n+ echo '>>> Test finished successfully!'\n>>> Test finished successfully!\n+ exit 0\n====================================================================\n[32mSUCCESS! All 1 out of 1 test scripts succeeded![0m\nCleaning up temporary directory\nIf the test succeeds, Viash writes the full output to the shell and deletes the temporary files. If there are any issues, the script stops and an error message will appear in red. In this case, you can inspect the temporary files to troubleshoot.\n\n\n\n\n\n\nTip\n\n\n\nYou can pass the --keep true argument to viash test to prevent viash from automatically deleting the temporary files in case of a success: viash test --keep true config.vsh.yaml."
  },
  {
    "objectID": "documentation/guide/component/creation/nextflow.html",
    "href": "documentation/guide/component/creation/nextflow.html",
    "title": "Nextflow",
    "section": "",
    "text": "When targeting the Nextflow platform, a module is generated that can be run standalone or used in a pipeline."
  },
  {
    "objectID": "documentation/guide/component/creation/nextflow.html#requirements",
    "href": "documentation/guide/component/creation/nextflow.html#requirements",
    "title": "Nextflow",
    "section": "Requirements",
    "text": "Requirements\nThis example targets the Nextflow platform, which requires you to install Nextflow and Docker. Follow the instructions on NextFlow’s homepage to install it on your system if you haven’t done so already. You can find instructions on how to install Docker for your OS on the Viash installation page."
  },
  {
    "objectID": "documentation/guide/component/creation/nextflow.html#preparing-a-component-for-nextflow",
    "href": "documentation/guide/component/creation/nextflow.html#preparing-a-component-for-nextflow",
    "title": "Nextflow",
    "section": "Preparing a component for Nextflow",
    "text": "Preparing a component for Nextflow\nUnlike components that target the native and Docker platform, a component targeting Nextflow requires you to keep some things in mind besides editing your config file.\n\nCreating the component\nThis guide builds upon the hello_world component from the Docker component creation guide. You can either follow with that guide first or simply download the component below that contains the component in all supported languages. Simply rename the language folder you want to use to hello_world and use that as your working directory.\nDownload hello_world_docker.zip\nCreate a new folder named src and drag the component files inside of that, this is to keep your source and target files neatly separated. Your directory structure should look like this now:\nhello world\n└── src\n    └── config.vsh.yaml\n    └── script"
  },
  {
    "objectID": "documentation/guide/component/creation/nextflow.html#adapting-the-script",
    "href": "documentation/guide/component/creation/nextflow.html#adapting-the-script",
    "title": "Nextflow",
    "section": "Adapting the script",
    "text": "Adapting the script\nComponents that target the Nextflow platform don’t support writing to standard output when run in a pipeline. Instead, their output should be redirected to a file. To do that, change the contents of your script file as below:\n\nBashC#JavaScriptPythonScalaR\n\n\nChange this:\necho \"Hello $par_input\"\nTo this:\necho \"Hello $par_input\" > $par_output\n\n\nChange this:\nConsole.WriteLine(\"Hello \" + par.input);\nTo this:\nFile.WriteAllText(par.output, \"Hello \" + par.input);\n\n\nChange this:\nconsole.log('Hello' + par['input']);\nTo this:\nconst fs = require('fs');\nfs.writeFileSync(par['output'], 'Hello ' + par['input']);\n\n\nChange this:\nprint(\"Hello\", par[\"input\"])\nTo this:\nfile = open(par[\"output\"], 'a+')\nfile.write(\"Hello \" + par[\"input\"])\nfile.close()\n\n\nChange this:\nprintln(\"Hello \" + par.input.get)\nTo this:\nimport java.io._\n\nval writer = new FileWriter(par.output.get)\ntry { writer.append(\"Hello \" + par.input.get) }\nfinally { writer.close }        \n\n\nChange this:\ncat(\"Hello \", par$input)\nTo this:\ncat(\"Hello\", par$input, file=par$output, sep=\" \", append=TRUE)"
  },
  {
    "objectID": "documentation/guide/component/creation/nextflow.html#adjusting-the-config",
    "href": "documentation/guide/component/creation/nextflow.html#adjusting-the-config",
    "title": "Nextflow",
    "section": "Adjusting the config",
    "text": "Adjusting the config\n\nAdd --id argument\nNextflow modules need an --id argument in order to work, so add that to the config file below the --input argument:\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  - type: string\n    name: --id\n    default: \"hello_world\"\n...\n\n\nAdd a file output argument\nNow that the script outputs a file, its output path should be added as an argument to the config file. To do that, add yet another argument below the --id argument named --output:\n- type: file\n  name: --output\n  default: \"output\"\n\n\nAdd Nextflow platform\nTo add support for the Nextflow platform as a build target, you need to add nextflow to the platforms section of your Viash config file. To do this, add these lines to the bottom of your config file:\n- type: nextflow\n  variant: vdsl3\nThis will add Nextflow as a build target, with VDSL3 set as the pipeline scripting variant, which adds new features and quality of life changes.\n\n\n\n\n\n\nSpecifying the Docker image\n\n\n\n\n\nBy default, Nextflow will use the Docker image specified in the docker platform section. For example:\nplatforms:\n  - type: docker\n    image: bash:4.0\nIf you don’t add docker as a build target or want to override the image, you can use the directives dictionary to specify a base image to use:\nplatforms:\n  - type: nextflow\n    variant: vdsl3\n    directives:\n      container: ubuntu:20.04\n\n\n\n\nBashC#JavaScriptPythonScalaR\n\n\nHere’s the full config after making these changes:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  - type: string\n    name: --id\n    default: \"hello_world\"\n  - type: file\n    name: --output\n    direction: output\n    default: \"output\"\n  resources:\n  - type: bash_script\n    path: script.sh\nplatforms:\n  - type: native\n  - type: docker\n    image: bash:4.0\n  - type: nextflow\n    variant: vdsl3\n\n\nHere’s the full config after making these changes:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  - type: string\n    name: --id\n    default: \"hello_world\"\n  - type: file\n    name: --output\n    direction: output\n    default: \"output\"\n  resources:\n  - type: csharp_script\n    path: script.csx\nplatforms:\n  - type: native\n  - type: docker\n    image: \"dataintuitive/dotnet-script:1.2.1\"\n    setup:\n      - type: apk\n        packages: [ bash ]\n  - type: nextflow\n    variant: vdsl3\n\n\nHere’s the full config after making these changes:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  - type: string\n    name: --id\n    default: \"hello_world\"\n  - type: file\n    name: --output\n    direction: output\n    default: \"output\"\n  resources:\n  - type: javascript_script\n    path: script.js\nplatforms:\n  - type: native\n  - type: docker\n    image: node:15-buster\n  - type: nextflow\n    variant: vdsl3\n\n\nHere’s the full config after making these changes:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  - type: string\n    name: --id\n    default: \"hello_world\"\n  - type: file\n    name: --output\n    direction: output\n    default: \"output\"\n  resources:\n  - type: python_script\n    path: script.py\nplatforms:\n  - type: native\n  - type: docker\n    image: \"python:3.8\"\n  - type: nextflow\n    variant: vdsl3\n\n\nHere’s the full config after making these changes:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  - type: string\n    name: --id\n    default: \"hello_world\"\n  - type: file\n    name: --output\n    direction: output\n    default: \"output\"\n  resources:\n  - type: scala_script\n    path: script.scala\nplatforms:\n  - type: native\n  - type: docker\n    image: hseeberger/scala-sbt\n  - type: nextflow\n    variant: vdsl3\n\n\nHere’s the full config after making these changes:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  - type: string\n    name: --id\n    default: \"hello_world\"\n  - type: file\n    name: --output\n    direction: output\n    default: \"output\"\n  resources:\n  - type: r_script\n    path: script.R\nplatforms:\n  - type: native\n  - type: docker\n    image: \"rocker/tidyverse:4.0.4\"\n  - type: nextflow\n    variant: vdsl3"
  },
  {
    "objectID": "documentation/guide/component/creation/nextflow.html#running",
    "href": "documentation/guide/component/creation/nextflow.html#running",
    "title": "Nextflow",
    "section": "Running",
    "text": "Running\nIn contrast to native and Docker based components, a Nextflow based component cannot be ran by using the viash run command. Components targeting Nextflow require you to use viash build first to generate a Nextflow module and run that module using nextflow run. See the Nextflow Build Target page for more information on how to generate a Nextflow module and run it as a standalone pipeline."
  },
  {
    "objectID": "documentation/guide/component/creation/native.html",
    "href": "documentation/guide/component/creation/native.html",
    "title": "Native",
    "section": "",
    "text": "A Viash component can target one or more platforms. When targeting the native platform, a single executable is generated."
  },
  {
    "objectID": "documentation/guide/component/creation/native.html#requirements",
    "href": "documentation/guide/component/creation/native.html#requirements",
    "title": "Native",
    "section": "Requirements",
    "text": "Requirements\nThe example targets the Native platform, which means you will need to have the required packages installed on your system depending on your chosen scripting language. Take a look at the Scripting Languages page to learn more about a specific language.\n\n\n\n\n\n\nTip\n\n\n\nIf you want to get started quickly, use Bash as that doesn’t have any external dependencies."
  },
  {
    "objectID": "documentation/guide/component/creation/native.html#creating-the-viash-component",
    "href": "documentation/guide/component/creation/native.html#creating-the-viash-component",
    "title": "Native",
    "section": "Creating the Viash component",
    "text": "Creating the Viash component\n\nWriting the script\nFor this example, you’ll use a tiny script that simply outputs “Hello World”, with the “World” part being a variable. To start off, create a folder named hello_world and follow the instructions below based on your preferred scripting language.\n\nBashC#JavaScriptPythonScalaR\n\n\nCreate a new file named script.sh and copy the following content inside of it:\necho \"Hello $par_input\"\n\n\nCreate a new file named script.csx and copy the following content inside of it:\nConsole.WriteLine(\"Hello \" + par.input);\n\n\nCreate a new file named script.js and copy the following content inside of it:\nconsole.log('Hello' + par['input']);\n\n\nCreate a new file named script.py and copy the following content inside of it:\nprint(\"Hello\", par[\"input\"])\n\n\nCreate a new file named script.scala and copy the following content inside of it:\nprintln(\"Hello \" + par.input.get)\n\n\nCreate a new file named script.R and copy the following content inside of it:\ncat(\"Hello \", par$input)\n\n\n\nThis outputs Hello to the console, followed by an input variable. Notice that this variable isn’t defined in the script itself as Viash will generate it for you based on the config file you’ll create in the next step.\n\n\n\n\n\n\nTip\n\n\n\nEvery scripting language has its own way of using variables generated by Viash. Check out the Scripting Languages for more information and examples.\n\n\n\n\nAdding the config\nA Viash config file is a YAML file that describes the functionality of a component and the platform(s) it targets. Create a file name config.vsh.yaml and add the contents below based on your chosen scripting language.\n\nBashC#JavaScriptPythonScalaR\n\n\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: bash_script\n    path: script.sh\nplatforms:\n  - type: native\n\n\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: csharp_script\n    path: script.csx\nplatforms:\n  - type: native\n\n\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: javascript_script\n    path: script.js\nplatforms:\n  - type: native\n\n\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: python_script\n    path: script.py\nplatforms:\n  - type: native\n\n\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: scala_script\n    path: script.scala\nplatforms:\n  - type: native\n\n\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: r_script\n    path: script.R\nplatforms:\n  - type: native\n\n\n\nHere’s a breakdown of the different sections:\n\nfunctionality describes what the component does and the resources it needs. It contains the name, a short description and more importantly, the arguments and resources the component uses.\n\narguments contains all arguments the component accepts and will be passed to the script. In this case, a single string named --input resides here with a default value of World.\nresources holds references to all necessary files and folders to make the component work. For this example, a single script is all that’s needed.\n\nplatforms lists what platforms the component can target. This example targets the native platform, which will generate an executable that’s run using the system resources."
  },
  {
    "objectID": "documentation/guide/component/creation/native.html#running",
    "href": "documentation/guide/component/creation/native.html#running",
    "title": "Native",
    "section": "Running",
    "text": "Running\nWith the two necessary files present to create a component, you can call upon Viash to generate a temporary executable and run it:\nviash run config.vsh.yaml\nWithout passing any arguments, this will use the default value for --input, which is World. This results in the following output:\nHello World\nBy providing the a value for --input, you can customize the greeting:\nviash run config.vsh.yaml -- --input Earth\n\n\n\n\n\n\nNote\n\n\n\nThe double dash (--) between the viash command and the arguments is used to signify the end of the arguments passed to viash and the start of those passed to the component. If you forgot to add these, you’ll get an error similar to this:\n[scallop] Error: Unknown option 'input'\n\n\nThe example above results in this output:\nHello Earth"
  },
  {
    "objectID": "documentation/guide/component/creation/native.html#whats-next",
    "href": "documentation/guide/component/creation/native.html#whats-next",
    "title": "Native",
    "section": "What’s next?",
    "text": "What’s next?\nTo learn how to use Viash to build an executable and run it, see the Native Executable Build Target page."
  },
  {
    "objectID": "documentation/guide/component/creation/docker.html",
    "href": "documentation/guide/component/creation/docker.html",
    "title": "Docker",
    "section": "",
    "text": "Viash can generate a Docker image and final container for you based on a component. This guide explains how to adapt a component that targets the native platform to work with a Docker backend."
  },
  {
    "objectID": "documentation/guide/component/creation/docker.html#requirements",
    "href": "documentation/guide/component/creation/docker.html#requirements",
    "title": "Docker",
    "section": "Requirements",
    "text": "Requirements\nAs this example targets the Docker platform, the only requirement is to have Docker installed on your system. This is one of the biggest benefits of targeting the Docker platform. You can find instructions on how to install Docker for your OS on the Viash installation page."
  },
  {
    "objectID": "documentation/guide/component/creation/docker.html#preparing-a-component-for-docker",
    "href": "documentation/guide/component/creation/docker.html#preparing-a-component-for-docker",
    "title": "Docker",
    "section": "Preparing a component for Docker",
    "text": "Preparing a component for Docker\n\nCreating a component\nFor this example, you’ll use the same hello_world component the native component creation guide uses. You can either follow with that guide first or simply download the component below that contains the component in all supported languages. Simply rename the language folder you want to use to hello_world and use that as your working directory.\nDownload hello_world.zip\n\n\nAdjusting the config\nAll you need to do to add the Docker platform as a build target is adding docker to the platforms list in your Viash config file. The docker platform has an image property that points to a Docker image from Docker Hub to use as a base.\nDepending on the scripting language you’re using, a setup section might be included that will install additional packages in the final image.\n\nBashC#JavaScriptPythonScalaR\n\n\nAdd this snippet to the bottom of your config file to add Docker as a build target and add a bash base image:\n- type: docker\n  image: bash:4.0\nHere’s the full config after making this change:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: bash_script\n    path: script.sh\nplatforms:\n  - type: native\n  - type: docker\n    image: bash:4.0\n\n\nAdd this snippet to the bottom of your config file to add Docker as a build target and our dotnet-script base image:\n- type: docker\n  image: \"dataintuitive/dotnet-script:1.2.1\"\n  setup:\n    - type: apk\n      packages: [ bash ]\nHere’s the full config after making this change:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: csharp_script\n    path: script.csx\nplatforms:\n  - type: native\n  - type: docker\n    image: \"dataintuitive/dotnet-script:1.2.1\"\n    setup:\n      - type: apk\n        packages: [ bash ]\n\n\nAdd this snippet to the bottom of your config file to add Docker as a build target and a Node.js base image:\n- type: docker\n  image: node:15-buster\nHere’s the full config after making this change:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: javascript_script\n    path: script.js\nplatforms:\n  - type: native\n  - type: docker\n    image: node:15-buster\n\n\nAdd this snippet to the bottom of your config file to add Docker as a build target and a Python base image:\n- type: docker\n  image: \"python:3.8\"\nHere’s the full config after making this change:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: python_script\n    path: script.py\nplatforms:\n  - type: native\n  - type: docker\n    image: \"python:3.8\"\n\n\nAdd this snippet to the bottom of your config file to add Docker as a build target and a base image containing Scala and sbt:\n- type: docker\n  image: hseeberger/scala-sbt\nHere’s the full config after making this change:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: scala_script\n    path: script.scala\nplatforms:\n  - type: native\n  - type: docker\n    image: hseeberger/scala-sbt\n\n\nAdd this snippet to the bottom of your config file to add Docker as a build target and a base image containing R, rstudio and R packages:\n- type: docker\n  image: \"rocker/tidyverse:4.0.4\"\nHere’s the full config after making this change:\nDownload config.vsh.yaml\nfunctionality:\n  name: hello_world\n  description: A minimal example component.\n  arguments:\n  - type: string\n    name: --input\n    default: \"World\"\n  resources:\n  - type: r_script\n    path: script.R\nplatforms:\n  - type: native\n  - type: docker\n    image: \"rocker/tidyverse:4.0.4\"\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen building your own components that only target Docker or Nextflow, adding the native target platform isn’t necessary."
  },
  {
    "objectID": "documentation/guide/component/creation/docker.html#running",
    "href": "documentation/guide/component/creation/docker.html#running",
    "title": "Docker",
    "section": "Running",
    "text": "Running\nYou can now call upon Viash to generate a temporary executable and run it:\nviash run config.vsh.yaml --platform docker\nThe --platform argument is passed to viash run so Docker will be chosen as the build target. If the platform isn’t specified, the first one in the platforms list is picked.\nThis results in the following output:\n[notice] Checking if Docker image is available at 'hello_world:latest'\n[warning] Could not pull from 'hello_world:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'hello_world:latest' with Dockerfile\nHello World\nAs you can see, Viash checks first if an image has been generated before continuing. If the image already exists, Viash will run a contained based on the image.\nIn this case though, no image was found for this component, so Viash generates the image before building and running the container."
  },
  {
    "objectID": "documentation/guide/component/creation/docker.html#whats-next",
    "href": "documentation/guide/component/creation/docker.html#whats-next",
    "title": "Docker",
    "section": "What’s next?",
    "text": "What’s next?\nTo learn how to use Viash to build an executable with a Docker backend and run it, see Building and Running."
  },
  {
    "objectID": "documentation/guide/component/languages.html",
    "href": "documentation/guide/component/languages.html",
    "title": "Scripting Languages",
    "section": "",
    "text": "Viash supports several languages to use in your components. This guide explains how to reference scripts in your Viash config files and how to use Viash specific variables."
  },
  {
    "objectID": "documentation/guide/component/languages.html#requirements",
    "href": "documentation/guide/component/languages.html#requirements",
    "title": "Scripting Languages",
    "section": "Requirements",
    "text": "Requirements\n\n\n\n\n\n\nNote\n\n\n\nIf you’re using WSL2, make sure to follow the Linux instructions and execute the commands in a WSL2 terminal.\n\n\n\nBashC#JavaScriptPythonRScala\n\n\nBash doesn’t have any dependencies and is included in every modern Linux distro, including those provided for WSL2 on Microsoft’s Store app. On macOS, the default shell is Zsh since 2019, but it still comes packaged with an older Bash 3.2.\n\n\nTo get started with C# scripting, you need to download and install the .NET 6.0 SDK.\nAfter installing the SDK, run this command to install the dotnet-script tool:\ndotnet tool install -g dotnet-script\nTo verify that dotnet-script was installed successfully, run this command to get a list of installed tools:\ndotnet tool list -g\nThe output should look something like this:\nPackage Id         Version      Commands     \n---------------------------------------------\ndotnet-script      1.3.1        dotnet-script\n\n\nTo run JavaScript on your system, you’ll need to download and install Node.js from their homepage.\n\n\nTo run Python scripts on your system, download and install Python. Most package managers include a python package as well. Make sure to install a version of Python that’s at least version 3.8 or newer.\n\n\nTo be able to run R scripts, you’ll need download and install R for your OS.\n\n\nRunning Scala scripts requires you to download and install Scala."
  },
  {
    "objectID": "documentation/guide/component/languages.html#referencing-scripts-in-a-viash-config-file",
    "href": "documentation/guide/component/languages.html#referencing-scripts-in-a-viash-config-file",
    "title": "Scripting Languages",
    "section": "Referencing scripts in a Viash config file",
    "text": "Referencing scripts in a Viash config file\n\nBashC#JavaScriptPythonRScala\n\n\nWhen referencing a Bash script in the resources of the functionality section your Viash config, use bash_script as its type:\nfunctionality:\n  name: my_component\n  resources:\n  - type: bash_script\n    path: script.sh\n\n\nWhen referencing a C# script in the resources of the functionality section your Viash config, use csharp_script as its type:\nfunctionality:\n  name: my_component\n  resources:\n  - type: csharp_script\n    path: script.csx\n\n\nWhen referencing a JavaScript script in the resources of the functionality section your Viash config, use javascript_script as its type:\nfunctionality:\n  name: my_component\n  resources:\n  - type: javascript_script\n    path: script.js\n\n\nWhen referencing a Python script in the resources of the functionality section your Viash config, use python_script as its type:\nfunctionality:\n  name: my_component\n  resources:\n  - type: python_script\n    path: script.py\n\n\nWhen referencing a R script in the resources of the functionality section your Viash config, use r_script as its type:\nfunctionality:\n  name: my_component\n  resources:\n  - type: r_script\n    path: script.r\n\n\nWhen referencing a Scala script in the resources of the functionality section your Viash config, use scala_script as its type:\nfunctionality:\n  name: my_component\n  resources:\n  - type: scala_script\n    path: script.scala"
  },
  {
    "objectID": "documentation/guide/component/languages.html#executing-scripts",
    "href": "documentation/guide/component/languages.html#executing-scripts",
    "title": "Scripting Languages",
    "section": "Executing scripts",
    "text": "Executing scripts\n\nBashC#JavaScriptPythonRScala\n\n\nBash scripts end with the .sh extension. They can be run locally by using the bash command:\nbash script.sh\n\n\nC# scripts end with the .csx extension. They can be run locally by using the dotnet script command:\ndotnet script script.csx\n\n\nJavaScript scripts end with the .js extension. They can be run locally by using the node command:\nnode script.js\n\n\nPython scripts end with the .py extension. They can be run locally by using the python command:\npython script.py\n\n\nR scripts end with the .r extension. They can be run locally by using the Rscript command:\nRscript script.r\n\n\nScala scripts end with the .scala extension. They can be run locally by using the scala -nc command:\nscala -nc script.scala"
  },
  {
    "objectID": "documentation/guide/component/languages.html#script-examples",
    "href": "documentation/guide/component/languages.html#script-examples",
    "title": "Scripting Languages",
    "section": "Script examples",
    "text": "Script examples\nThese examples will briefly show to start scripting with Viash in mind. Each example shows the source code and the output after running it.\n\nUsing variables\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\nhello=\"Hello World!\"\necho $hello\n\n\n#!/usr/bin/env dotnet-script\n\nstring hello = \"Hello World!\";\nConsole.WriteLine(hello);\n\n\n#!/usr/bin/env node\n\nlet hello = 'Hello World!'\nconsole.log(hello)\n\n\n#!/usr/bin/env python3\n\nhello = \"Hello World!\"\nprint(hello)\n\n\n#!/usr/bin/env Rscript\n\nhello = \"Hello World!\"\ncat(hello)\nRscript script.r\n\n\n#!/usr/bin/env scala\n\nval hello = \"Hello World!\";\nprintln(hello)\n\n\n\nOutput\nHello World!\n\n\nUsing Viash arguments as variables\nViash generates variables based on the arguments defined in the Viash config file and injects them at the top of your script.\n\nBashC#JavaScriptPythonRScala\n\n\nVariables start with $par_, followed by the name of the argument.\nconfig.vsh.yaml\nfunctionality:\n  name: hello_world\n  arguments:\n  - type: string\n    name: --hello\n    default: \"Hello World!\"\n  resources:\n  - type: bash_script\n    path: ViashVariables.sh\nViashVariables.sh\n#!/bin/bash\n\necho $par_hello\n\n\nVariables are grouped inside an anonymous par class and can be referenced by name.\nconfig.vsh.yaml\nfunctionality:\n  name: hello_world\n  arguments:\n  - type: string\n    name: --hello\n    default: \"Hello World!\"\n  resources:\n  - type: csharp_script\n    path: ViashVariables.csx\nViashVariables.csx\n#!/usr/bin/env dotnet-script\n\nConsole.WriteLine(par.hello);\n\n\nVariables are grouped inside a dictionary named par and can be referenced by name.\nconfig.vsh.yaml\nfunctionality:\n  name: hello_world\n  arguments:\n  - type: string\n    name: --hello\n    default: \"Hello World!\"\n  resources:\n  - type: javascript_script\n    path: ViashVariables.js\nViashVariables.js\n#!/usr/bin/env node\n\nconsole.log(par['hello'])\n\n\nVariables are grouped inside a dictionary named par and can be referenced by name.\nconfig.vsh.yaml\nfunctionality:\n  name: hello_world\n  arguments:\n  - type: string\n    name: --hello\n    default: \"Hello World!\"\n  resources:\n  - type: python_script\n    path: ViashVariables.py\nViashVariables.py\n#!/usr/bin/env python3\n\nprint(par[\"hello\"])\n\n\nVariables are grouped inside a list named par and can be referenced by name.\nconfig.vsh.yaml\nfunctionality:\n  name: hello_world\n  arguments:\n  - type: string\n    name: --hello\n    default: \"Hello World!\"\n  resources:\n  - type: r_script\n    path: ViashVariables.r\nViashVariables.r\n#!/usr/bin/env Rscript\n\ncat(par$hello)\n\n\nVariables are grouped inside an instance of a class named par and can be referenced by name.\nconfig.vsh.yaml\nfunctionality:\n  name: hello_world\n  arguments:\n  - type: string\n    name: --hello\n    default: \"Hello World!\"\n  resources:\n  - type: scala_script\n    path: ViashVariables.scala\nViashVariables.scala\n#!/usr/bin/env scala\n\nprintln(par.hello.get)\n\n\n\n\n\nUsing Viash placeholder variables\nBy adding Viash variables between a VIASH START and a VIASH END comment, you can write your script with Viash in mind while keeping it working for standalone execution.\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_hello=\"Hello World!\"\n## VIASH END\n\necho $par_hello\n\n\n#!/usr/bin/env dotnet-script\n\n// VIASH START\nvar par = new {\n  hello = \"Hello World!\"\n};\n// VIASH END\n\nConsole.WriteLine(par.hello);\n\n\n#!/usr/bin/env node\n\n// VIASH START\nlet par = {\n    'hello': 'Hello World!'\n  }\n// VIASH END\n\nconsole.log(par['hello'])\n\n\n#!/usr/bin/env python3\n\n## VIASH START\npar = {\n  \"hello\": \"Hello World!\"\n}\n## VIASH END\n\nprint(par[\"hello\"])\n\n\n#!/usr/bin/env Rscript\n\n## VIASH START\npar <- list(\n  hello = \"Hello World!\"\n)\n## VIASH END\n\ncat(par$hello)\n\n\n#!/usr/bin/env scala\n\n// VIASH START\ncase class ViashPar(\n  greeter: Option[String]\n)\n\nval par = ViashPar(\n  greeter = Some(\"Hello World!\")\n)\n// VIASH END\n\nprintln(par.hello.get)\n\n\n\nOutput\nHello World!\nAnything between VIASH START and VIASH END will be replaced by the injected variables Viash generates once the script is executed as part of a component. This allows you to easily troubleshoot your script while being compatible with Viash.\n\n\nLanguage specific tips\n\nBashC#JavaScriptPythonRScala\n\n\n\nSourcing other scripts\nWith bash, you can include other bash scripts to share content and functionality by using the source command.\nBy writing two scripts and adding them to the same directory, one can reference the other:\nscript.sh\n#!/bin/bash\n\nsource include_me.sh\necho \"Hello from the main script!\"\ninclude_me.sh\n#!/bin/bash\n\necho \"Hi from the included script!\"\nRunning script.sh results in the following output:\nHi from the included script!\nHello from the main script!\nViash supports the sourcing of scripts by adding them as a resource:\nconfig.vsh.yaml\nfunctionality:\n  name: source_example\n  resources:\n  - type: bash_script\n    path: script.sh\n  - type: bash_script\n    path: include_me.sh\nDoing this will ensure any needed scripts will be included with the build target.\n\n\n\n\nUsing NuGet packages\nWith dotnet-script, you can reference NuGet packages directly from within the script. In the example below, we add a reference to Newtonsoft.Json to convert a dictionary to JSON and output it to the console.\nscript.csx\n#!/usr/bin/env dotnet-script\n#r \"nuget: Newtonsoft.Json, 13.0.1\"\n\nusing Newtonsoft.Json;\n\nDictionary<string, int> downloads = new Dictionary<string, int>\n{\n    { \"v1.0\", 501 },\n    { \"v1.1\", 802 },\n    { \"v2.0\", 2857 }\n};\n\nstring json = JsonConvert.SerializeObject(downloads, Formatting.Indented);\nConsole.WriteLine(json);\nRunning script.csx results in the following output:\n{\n  \"v1.0\": 501,\n  \"v1.1\": 802,\n  \"v2.0\": 2857\n}\n\n\n\nWe don’t have any JavaScript tips yet!\n\n\nWe don’t have any Python tips yet!\n\n\nWe don’t have any R tips yet!\n\n\nWe don’t have any Scala tips yet!"
  },
  {
    "objectID": "documentation/guide/component/languages.html#meta-variables",
    "href": "documentation/guide/component/languages.html#meta-variables",
    "title": "Scripting Languages",
    "section": "Meta variables",
    "text": "Meta variables\nViash offers hidden variables to use in your scripts that can be used to get meta information about your component.\n\nFunctionality name\nName of the component found in the functionality section of the Viash config:\nfunctionality:\n  name: my_component\n\nBashC#JavaScriptPythonRScala\n\n\necho $meta_functionality_name\n\n\nConsole.WriteLine(meta.functionality_name);\n\n\nconsole.log(meta['functionality_name']);\n\n\nprint(meta[\"functionality_name\"])\n\n\ncat(meta$functionality_name)\n\n\nprintln(meta.functionality_name)\n\n\n\nOutput\nmy_component\n\n\nResources directory\nPath where the resources as defined in the Viash config file are stored.\n\nBashC#JavaScriptPythonRScala\n\n\necho $meta_resources_dir\n\n\nConsole.WriteLine(meta.resources_dir);\n\n\nconsole.log(meta['resources_dir']);\n\n\nprint(meta[\"resources_dir\"])\n\n\ncat(meta$resources_dir)\n\n\nprintln(meta.resources_dir)\n\n\n\nWhen using viash run to create a temporary build target and execute it, this will point to the temporary path where the executable was generated:\n/tmp/viash_my_component9560481446119256265\nAfter building a component using viash build and running the generated executable, it points to the directory where the executable and the other resources reside in:\n/home/user/components/my_component_target_dir\n\n\nTemp directory\nPath to the directory supplied by the host system where you can write temporary files to.\n\nBashC#JavaScriptPythonRScala\n\n\necho $meta_temp_dir\n\n\nConsole.WriteLine(meta.temp_dir);\n\n\nconsole.log(meta['temp_dir']);\n\n\nprint(meta[\"temp_dir\"])\n\n\ncat(meta$temp_dir)\n\n\nprintln(meta.temp_dir)\n\n\n\nOutput\n/tmp"
  },
  {
    "objectID": "documentation/guide/component/namespaces.html",
    "href": "documentation/guide/component/namespaces.html",
    "title": "Namespaces",
    "section": "",
    "text": "A namespace is a group of Viash components.\nHere are some benefits of grouping your components:\n\nGrouping components in namespaces allows for categorizing components.\nEach teams of developers can work on a different set of components in parallel, which improves the separation of concerns.\nGenerating build targets and unit testing can be done in bulk, with optional filtering by namespace using the viash ns commands.\n\nThis guide will cover how to define a namespace and use it with Viash."
  },
  {
    "objectID": "documentation/guide/component/namespaces.html#adding-components-to-a-namespace",
    "href": "documentation/guide/component/namespaces.html#adding-components-to-a-namespace",
    "title": "Namespaces",
    "section": "Adding components to a namespace",
    "text": "Adding components to a namespace\nThere are two ways of defining a namespace: either by adding the namespace property to the Viash config file or by creating a directory structure. You can use one or both of these methods in your projects.\n\nNamespace property\nYou can assign a component to a namespace by defining its namespace attribute in the viash config file:\nfunctionality:\n  name: some_component\n  namespace: my_namespace\n\n\nDirectory structure\nViash can deduce namespaces automatically if you structure the components hierarchically. The namespace directories should be in the root of your (source) directory, with the component directories inside, grouped per namespace.\nIn the example below, there are two namespaces: namespace_one and namespace_two, each of these namespaces has one or more components assigned to them:\nsrc\n├── namespace_one\n│   ├── component_one\n│   │   ├── config.vsh.yaml\n│   │   └── script.sh\n│   └── component_two\n│       ├── config.vsh.yaml\n│       └── script.sh\n└── namespace_two\n    └── component_three\n        ├── config.vsh.yaml\n        └── script.sh\nHere, namespace_one groups component_one and component_two together while namespace_two only consists of a single component, component_three."
  },
  {
    "objectID": "documentation/guide/component/namespaces.html#using-the-viash-ns-subcommands",
    "href": "documentation/guide/component/namespaces.html#using-the-viash-ns-subcommands",
    "title": "Namespaces",
    "section": "Using the viash ns subcommands",
    "text": "Using the viash ns subcommands\nViash comes with a useful viash ns command to work with namespaces. This can be used to inspect, test and build the components that are part of a namespace.\nWe’ve provided a simple example project if you wish to test these commands. Its components use bash for some integer and string manipulation.\nDownload namespace_example.zip\n\nListing components and namespaces\nThe viash ns list command is the namespace equivalent of viash config view, it outputs a parsed version of all config files found in a directory and their subdirectories:\nviash ns list -src src\nThis prints all fields to the terminal, even those not defined in the config files themselves. Here’s a part of the output:\n\n\nOutput\n\n- functionality:\n    name: \"replace\"\n    namespace: \"string_manipulation\"\n    authors: []\n    inputs: []\n    outputs: []\n    arguments:\n    - type: \"string\"\n      name: \"--text\"\n      alternatives: []\n      example: []\n      default:\n      - \"Hello world!\"\n      required: false\n      values: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n    - type: \"string\"\n      name: \"--search\"\n      alternatives: []\n      example: []\n      default:\n      - \"Hello\"\n      required: false\n      values: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n    - type: \"string\"\n      name: \"--replace\"\n      alternatives: []\n      example: []\n      default:\n      - \"Greetings\"\n      required: false\n      values: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n    resources:\n    - type: \"bash_script\"\n      path: \"script.sh\"\n      is_executable: true\n      parent: \"file:/.../namespace_example/src/string_manipulation/replace/config.vsh.yaml\"\n    description: \"Search for a substring in a string and replace it with another string\"\n    test_resources:\n    - type: \"bash_script\"\n      path: \"test.sh\"\n      is_executable: true\n      parent: \"file:/.../namespace_example/src/string_manipulation/replace/config.vsh.yaml\"\n    info: {}\n    dummy_arguments: []\n    set_wd_to_resources_dir: false\n  platform:\n    type: \"native\"\n    id: \"native\"\n  platforms:\n  - type: \"native\"\n    id: \"native\"\n  info:\n    config: \"namespace_example/src/string_manipulation/replace/config.vsh.yaml\"\n    platform: \"native\"\n    viash_version: \"0.5.12\"\n    git_commit: \"d9d624de0264b1154d7eeb5dba3c1deb567311ac\"\n    git_remote: \"https://github.com/...\"\n...\n\n\n\nUnit testing a namespace\nYou can test multiple components using the viash ns test command.\nviash ns test --src src\n\n\n\n\n\n\nTip\n\n\n\nTo speed up the testing, you can use the parallel flag to test all components at once:\nviash ns test --src src --parallel\n\n\nThis will test each component in series and will output a tab separated output that contains the results:\nThe working directory for the namespace tests is /tmp/viash_ns_test2526740097581645786\n           namespace        functionality             platform            test_name exit_code duration               result\n string_manipulation              replace               native                start                                        \n string_manipulation              replace               native              test.sh         0        0              SUCCESS\n                math             subtract               native                start                                        \n                math             subtract               native              test.sh         0        0              SUCCESS\n                math                  add               native                start                                        \n                math                  add               native              test.sh         0        0              SUCCESS\n\n\nBuilding a namespace\nMultiple components can be build in series using the viash ns build command:\nviash ns build --src src --target target\n\n\n\n\n\n\nTip\n\n\n\nTo speed up the building, you can use the parallel flag to build all components at once:\nviash ns build --src src --target target --parallel\n\n\nThis will output the following to the console:\nExporting replace (string_manipulation) =native=> target/native/string_manipulation/replace\nExporting subtract (math) =native=> target/native/math/subtract\nExporting add (math) =native=> target/native/math/add\nAn executable and/or module will be generated for every target platform defined in each of the component configs. These are grouped per platform and namespace in the target directory:\ntarget\n└── native\n    ├── math\n    │   ├── add\n    │   │   └── add\n    │   └── subtract\n    │       └── subtract\n    └── string_manipulation\n        └── replace\n            └── replace"
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html",
    "title": "Advanced Pipeline",
    "section": "",
    "text": "This guide explains how to create an example pipeline that’s closer to a typical use-case of a Nextflow bioinformatics pipeline. It has a mixture of scripting languages and uses a join to merge all events."
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html#creating-the-modules",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html#creating-the-modules",
    "title": "Advanced Pipeline",
    "section": "Creating the modules",
    "text": "Creating the modules\nThe sections below describe how to create the VDSL3 modules in preparation for creating the pipeline.\n\nPreparation\ncreate a new folder named advanced pipeline, add src folder with a nextflow_module folder inside. Now create three folders inside nextflow_module folder, one per component needed for the pipeline:\n\ncombine_columns\nremove_comments\ntake_columns\n\nThe folder structure should look like this now:\nadvanced_pipeline\n└── src\n    └── nextflow_modules\n        ├── combine_columns\n        ├── remove_comments\n        └── take_column\n\n\nCreating the remove_comments component\nThis component removes all comments (lines starting with a hashtag) from a tsv file.\nDownload or copy the contents of config.vsh.yaml and script.sh below into the remove_comments folder.\nDownload config.vsh.yaml\n\n\n\nContents of config.vsh.yaml\n\nfunctionality:\n  name: remove_comments\n  description: Remove comments from a TSV file.\n  namespace: nextflow_modules\n  arguments:\n    - name: \"--input\"\n      alternatives: [ \"-i\" ]\n      type: file\n      required: true\n      example: \"file.tsv\"\n    - name: \"--output\"\n      alternatives: [ \"-o\" ]\n      type: file\n      required: true\n      direction: output\n      example: \"file.tsv\"\n    - type: string\n      name: --id\n      default: \"remove_comments\"\n  resources:\n  - type: bash_script\n    path: ./script.sh\nplatforms:\n  - type: docker\n    image: ubuntu:20.04\n  - type: nextflow\n    variant: vdsl3\n\nDownload script.sh\n\n\n\nContents of script.sh\n\n#!/bin/bash\n\ngrep -v '^#' \"$par_input\" > \"$par_output\"\n\n\n\nCreating the take_column component\nThis component subsets an incoming tsv file by extracting a certain column from the file.\nDownload or copy the contents of config.vsh.yaml and script.py below into the take_column folder.\nDownload config.vsh.yaml\n\n\n\nContents of config.vsh.yaml\n\nfunctionality:\n  name: take_column\n  namespace: nextflow_modules\n  arguments:\n    - name: \"--input\"\n      alternatives: [ \"-i\" ]\n      type: file\n      required: true\n    - name: \"--output\"\n      alternatives: [ \"-o\" ]\n      type: file\n      required: true\n      direction: output\n    - name: \"--column\"\n      type: integer\n      required: false\n      default: 2\n    - type: string\n      name: --id\n      default: \"take_column\"\n  resources:\n  - type: python_script\n    path: ./script.py\nplatforms:\n  - type: nextflow\n    variant: vdsl3\n    directives:\n      container: amancevice/pandas:slim\n\nDownload script.py\n\n\n\nContents of script.py\n\nimport pandas as pd\n\n## VIASH START\npar = {\n    \"input\": \"data/file1.tsv\",\n    \"column\": 2,\n    \"output\": \"temp/foo\"\n}\n## VIASH END\n\n# read the tsv file\ntab = pd.read_csv(par[\"input\"], sep=\"\\t\", comment=\"#\")\n\n# subset a column\ntab_filt = tab.iloc[:, par[\"column\"]-1]\n\n# write to file\ntab_filt.to_csv(par[\"output\"], index=False)\n\n\n\nCreating the combine_columns component\nThis component combines multiple tsv files into one by concatenating all of the columns together. It assumes each incoming tsv file has an equal number of rows.\nDownload or copy the contents of config.vsh.yaml and script.R below into the combine_columns folder.\nDownload config.vsh.yaml\n\n\n\nContents of config.vsh.yaml\n\nfunctionality:\n  name: combine_columns\n  namespace: nextflow_modules\n  arguments:\n    - name: \"--input\"\n      alternatives: [ \"-i\" ]\n      type: file\n      multiple: true\n      required: true\n    - name: \"--output\"\n      alternatives: [ \"-o\" ]\n      type: file\n      required: true\n      direction: output\n    - type: string\n      name: --id\n      default: \"combine_columns\"\n  resources:\n    - type: r_script\n      path: ./script.R\nplatforms:\n  - type: nextflow\n    variant: vdsl3\n    directives:\n      container: rocker/r-ver:4.1\n\nDownload script.R\n\n\n\nContents of script.R\n\n## VIASH START\npar <- list(\n    input = c(\"data/file1.tsv\", \"data/file2.tsv\"),\n    output = \"temp/foo.tsv\"\n)\n## VIASH END\n\nouts <- lapply(par$input, function(file) {\n  read.delim(file, comment.char = \"#\", sep = \"\\t\", header = FALSE)\n})\n\ntable <- do.call(cbind, outs)\n\nwrite.table(table, par$output, col.names = FALSE, sep = \"\\t\")"
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html#building-the-modules",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html#building-the-modules",
    "title": "Advanced Pipeline",
    "section": "Building the modules",
    "text": "Building the modules\nThe basic pipeline guide describes how to generate an individual VDSL3 Nextflow module using the viash build command, but there’s a better way when it comes to building multiple modules at once: viash ns build. Each one of the three components has its namespace defined as nextflow_modules inside of its config file. Execute this command from the root of the advanced_pipeline directory\nviash ns build\nThis will result in the following output:\nExporting take_column (nextflow_modules) =nextflow=> target/nextflow/nextflow_modules/take_column\nExporting combine_columns (nextflow_modules) =nextflow=> target/nextflow/nextflow_modules/combine_columns\nExporting remove_comments (nextflow_modules) =nextflow=> target/nextflow/nextflow_modules/remove_comments\nThe VDSL3 Nextflow modules were generated inside of a target folder. The directory structure now looks like this:\nadvanced_pipeline\n├── src\n│   └── nextflow_modules\n│       ├── combine_columns\n│       │   ├── config.vsh.yaml\n│       │   └── script.R\n│       ├── remove_comments\n│       │   ├── config.vsh.yaml\n│       │   └── script.sh\n│       └── take_column\n│           ├── config.vsh.yaml\n│           └── script.py\n└── target\n    └── nextflow\n        └── nextflow_modules\n            ├── combine_columns\n            │   ├── main.nf\n            │   └── nextflow.config\n            ├── remove_comments\n            │   ├── main.nf\n            │   └── nextflow.config\n            └── take_column\n                ├── main.nf\n                └── nextflow.config"
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html#creating-the-pipeline",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html#creating-the-pipeline",
    "title": "Advanced Pipeline",
    "section": "Creating the pipeline",
    "text": "Creating the pipeline\nCreate a new file named main.nf and add it to the root of the advanced_pipeline directory. Use the following as its contents:\ntargetDir = \"../../target/nextflow\" // 1\n\n// 2\ninclude { remove_comments } from \"$targetDir/nextflow_modules/remove_comments/main.nf\"\ninclude { take_column } from \"$targetDir/nextflow_modules/take_column/main.nf\"\ninclude { combine_columns } from \"$targetDir/nextflow_modules/combine_columns/main.nf\"\n\nworkflow {\n  Channel.fromPath(params.input) // 3\n  \n    // 4\n    // File -> (String, File)\n    | map{ file -> [ file.baseName, file ] }\n    \n    // 5\n    // (String, File) -> (String, File)\n    | remove_comments\n\n    // 6\n    // (String, File) -> (String, File)\n    | take_column\n\n    // 7\n    // (String, File)* -> List[(String, File)]\n    | toList()\n\n    // 8\n    // List[(String, File)] -> (String, {input: List[File]})\n    | map{ tups -> \n      files = tups.collect{id, file -> file}\n      [ \"combined\", [ input: files ] ] \n    }\n\n    // 9\n    // (String, {input: List[File]}) -> (String, File)\n    | combine_columns.run(\n      auto: [ publish: true ]\n      )\n\n    // 10\n    | view{ file -> \"Output: $file\" }\n}\n\nTarget directory where the modules are located\nInclude the modules from the target directory\nCreate a channel based on the input parameter’s path\nAssign a unique ID to each event using map{}\nRun remove_comments to remove the comments from the TSV\nExtract a single column from TSV by running take_column\nCombine all events into a single List event using toList()\nAdd unique ID to the tuple\nConcatenate the TSVs into one by running the combine_columns module with auto publishing enabled using the auto directive to\nView the channel contents bu printing it to the console using view()"
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html#running-the-pipeline",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-advanced.html#running-the-pipeline",
    "title": "Advanced Pipeline",
    "section": "Running the pipeline",
    "text": "Running the pipeline\nBefore being able to run the pipeline, you’ll need some TSV files to work with. Download the files below and place them in a new directory named data in the root of advanced_pipeline.\nDownload file1.tsv\nDownload file2.tsv\nNow run the following command to run the pipeline using Nextflow:\nnextflow run main.nf --input \"data/file?.tsv\" --publishDir output\nYou should get an output similar to this:\nN E X T F L O W  ~  version 22.04.3\nLaunching `workflows/310-realistic_pipeline/main.nf` [stupefied_saha] DSL2 - revision: 6669aefc6c\n[93/232aba] Submitted process > remove_comments:remove_comments_process (2)\n[ef/a28e89] Submitted process > remove_comments:remove_comments_process (1)\n[63/279f98] Submitted process > take_column:take_column_process (1)\n[50/2a17ef] Submitted process > take_column:take_column_process (2)\n[8d/6eeff5] Submitted process > combine_columns:combine_columns_process\nOutput: [combined, /home/runner/work/viash_nxf_course/viash_nxf_course/work/8d/6eeff571e9ff2c5389851c6ab3001c/combined.combine_columns.output]\nYou can find the final TSV in the output directory:\n# this is a header      \n# this is also a header     \none     0.11    123\ntwo     0.23    456\nthree   0.35    789\nfour    0.47    123"
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html",
    "title": "Basic Pipeline",
    "section": "",
    "text": "This guide will explain how to create a basic Nextflow pipeline using a Viash component."
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html#creating-the-module",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html#creating-the-module",
    "title": "Basic Pipeline",
    "section": "Creating the module",
    "text": "Creating the module\nNextflow works with modules to run scripts and handle their input and output, so the first step is generating a Nextflow module from a Viash component. This guide will use a small component named remove_comments that removes comments (lines starting with a hashtag) from a TSV file.\n\n\n\n\n\n\nNote\n\n\n\nThis guide won’t go in-depth about how to generate a Nextflow module from a Viash component. For more information on that topic, read the Nextflow component creation and the Nextflow Build & Run guides.\n\n\n\nDownload the source files\nDownload the zip below and extract it to a directory of your choosing:\nDownload basic_pipeline.zip\nOnce extracted, the directory contains the remove_comments component in the src directory and a small TSV file in the data directory:\nbasic_pipeline\n├── data\n│   └── sample.tsv\n└── src\n    └── remove_comments\n        ├── config.vsh.yaml\n        └── script.sh\n\n\nBuilding the Nextflow module\nWith the component ready, execute the viash build command below to generate the Nextflow module:\nviash build src/remove_comments/config.vsh.yaml -p nextflow -o target/remove_comments\nYou should now have a target directory that contains the generated Nextflow module.\nbasic_pipeline\n├── data\n│   └── sample.tsv\n├── src\n│   └── remove_comments\n│       ├── config.vsh.yaml\n│       └── script.sh\n└── target\n    └── remove_comments\n        ├── main.nf\n        └── nextflow.config"
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html#creating-the-pipeline",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html#creating-the-pipeline",
    "title": "Basic Pipeline",
    "section": "Creating the pipeline",
    "text": "Creating the pipeline\nTo use the module in a pipeline, create a new file in the root of the directory and name it main.nf, this will be the Nextflow pipeline script. Add this as its contents:\ntargetDir = \"./target\" // 1\n\ninclude { remove_comments } from \"$targetDir/remove_comments/main.nf\" // 2\n\nworkflow {\n  Channel.fromPath(params.input) // 3\n    | map{ file -> [ file.baseName, file ] } // 4\n    | view{ file -> \"Input: $file\" } // 5\n    | remove_comments.run( // 6\n      auto: [ publish: true ]\n      )\n    | view{ file -> \"Output: $file\" } // 7\n}\nHere’s an overview of this Nextflow script:\n\nStore the location of the target directory where the modules are located\nInclude the remove_comments module from the remove_comments/main.nf script\nCreate a channel based on the input parameter’s path\nTake the tuple list and map it to the [ file.baseName, file ] format\nPrint the input tuple to the console\nRun the remove_comments module with auto publishing enabled using the auto directive, this makes sure that the output of this module is written to a directory based on its id\nPrint the output tuple to the console"
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html#running-the-pipeline",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html#running-the-pipeline",
    "title": "Basic Pipeline",
    "section": "Running the pipeline",
    "text": "Running the pipeline\nYou can now run the pipeline script above with Nextflow using the following command:\nnextflow run main.nf --input \"data/sample.tsv\" --publishDir output\nThis results in a console output similar to this:\nN E X T F L O W  ~  version 22.04.3\nLaunching `main.nf` [curious_gates] DSL2 - revision: 3e22e3038c\nexecutor >  local (1)\n[2a/5df658] process > remove_comments:remove_comments_process (1) [100%] 1 of 1 ✔\nInput: [sample, basic_pipeline/data/sample.tsv]\nOutput: [sample, basic_pipeline/work/2a/5df6584524e26995953a4eaec97136/sample.remove_comments.output.tsv]\nAfter the pipeline has finished working, a new file named sample.remove_comments.output.tsv has been created in the output directory:\nbasic_pipeline\n└── output\n    └── sample.remove_comments.output.tsv\nFor comparison, here’s what the input and output files look like to show what changed:\nsample.tsv\n# this is a header      \n# this is also a header     \none     0.11    123\ntwo     0.23    456\nthree   0.35    789\nfour    0.47    123\nsample.remove_comments.output.tsv\none     0.11    123\ntwo     0.23    456\nthree   0.35    789\nfour    0.47    123"
  },
  {
    "objectID": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html#whats-next",
    "href": "documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html#whats-next",
    "title": "Basic Pipeline",
    "section": "What’s next?",
    "text": "What’s next?\nThe pipeline in this guide was a bare minimum example, to learn more about creating Nextflow pipelines, take a look at the Advanced Pipeline guide."
  },
  {
    "objectID": "documentation/help/terminology.html",
    "href": "documentation/help/terminology.html",
    "title": "Terminology",
    "section": "",
    "text": "Term\nDescription\n\n\n\n\nViash\nA script code wrapper for building modular software components that serve as building blocks to develop (Nextflow) data pipelines.\n\n\nComponent\nAt minimum, the combination of a script and a config file. This can also include any needed resources and unit tests.\n\n\nViash config\nA YAML based file that holds all of the parameters needed to create a component.\n\n\nResources\nTools, helper scripts, templates and other files the component depends on to work.\n\n\nUnit test\nA small block of code to test a component.\n\n\nBuild target\nAn executable or a VDSL3 module that’s generated by Viash.\n\n\n(VDSL3) Module\nA Nextflow module generated by Viash.\n\n\n(Viash) Executable\nAn executable script generated for the Native or Docker platform.\n\n\n(Docker) Image\nA standard unit of software that packages up the OS, code and its dependencies so the application runs quickly and reliably from one computing environment to another.\n\n\n(Docker) Container\nAn instance of a Docker image.\n\n\nPlatform\nThe platform(s) targeted by a component. We currently support Native, Docker and Nextflow."
  },
  {
    "objectID": "privacy.html",
    "href": "privacy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "Website visitors\n\nNo personal information is collected.\nNo information is stored in the browser.\nNo information is shared with, sent to or sold to third-parties.\nNo information is shared with advertising companies.\nNo information is mined and harvested for personal and behavioral trends.\nNo information is monetized.\n\n\n\nInformation we collect and what we use it for\nWe run Google Analytics analytics on viash.io. The following information is collected:\n\nPage URL. We track the page URL of each page view on this website. We use this to understand which pages have been viewed and how many times a particular page has been viewed. For example: https://viash.io/.\nHTTP Referrer. We use the referrer string to understand the number of visitors referred to this website from links on other sites. For example: https://github.com/.\nBrowser. We use this to understand what browsers people use when visiting this website. This is derived from the User-Agent HTTP header. The full User-Agent is discarded. For example: Chrome.\nOperating system. We use this to understand what operating systems people use when visiting this website. We only use the brand of the operating system and don’t include the version number or any other details. This is derived from the User-Agent HTTP header. The full User-Agent is discarded. For example: GNU/Linux.\nDevice type. We use this to understand what devices people use when visiting this website. This is derived from window.innerWidth. The actual width of the browser in pixels is discarded. For example: Desktop.\nVisitor Country. We look up the visitor’s country using the IP address. We do not track anything more granular than the country of origin and the IP address of the visitor is discarded. We never store IP addresses in our database or logs. For example: Canada.\n\n\n\nContact us\nContact us if you have any questions."
  },
  {
    "objectID": "download/components/md_url_checker/bash/Testfile.html",
    "href": "download/components/md_url_checker/bash/Testfile.html",
    "title": "Viash",
    "section": "",
    "text": "This is a simple markdown file with some hyperlinks to test if the component works correctly. Some links to websites:\n\nGoogle\nReddit\nA broken link\n\nLinks that are relative to viash.io:\n\nYou can install viash here.\nIt all starts with a script and a config file."
  }
]