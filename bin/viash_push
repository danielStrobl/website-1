#!/usr/bin/env bash

###########################
#    viash_push 0.5.10    #
###########################

# This wrapper script is auto-generated by viash 0.5.10 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="viash_push"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "viash_push 0.5.10"
  echo "Push a project, usually in the context of a pipeline."
  echo
  echo "Options:"

  echo "   -s, --src"
  echo "        type: file"
  echo "        default: src"
  echo "        Directory for sources if different from src/"
  echo ""


  echo "   -m, --mode"
  echo "        type: string"
  echo "        default: development"
  echo "        The mode to run in. Possible values are: 'development', 'integration', 'release'."
  echo ""


  echo "   -q, --query"
  echo "        type: string"
  echo "        example: ^mynamespace/component1\$"
  echo "        Filter which components get selected by name and namespace. Can be a regex."
  echo ""


  echo "   -n, --query_namespace"
  echo "        type: string"
  echo "        example: ^mynamespace\$"
  echo "        Filter which namespaces get selected by namespace. Can be a regex."
  echo ""


  echo "   --query_name"
  echo "        type: string"
  echo "        example: ^component1\$"
  echo "        Filter which components get selected by name. Can be a regex."
  echo ""


  echo "   -t, --tag"
  echo "        type: string"
  echo "        example: dev"
  echo "        The tag/version to be used."
  echo ""


  echo "   -r, --registry"
  echo "        type: string"
  echo "        example: ghcr.io"
  echo "        Which Docker registry to use in the Docker image name."
  echo ""


  echo "   -o, --organisation, --organization"
  echo "        type: string"
  echo "        example: myorganisation"
  echo "        Which organisation name to use in the Docker image name."
  echo ""


  echo "   --namespace_separator"
  echo "        type: string"
  echo "        example: _"
  echo "        The separator to use between the component name and namespace as the image name of a Docker container."
  echo ""


  echo "   --max_threads"
  echo "        type: integer"
  echo "        example: 8"
  echo "        The maximum number of threads viash will use when \`--parallel\` during parallel tasks."
  echo ""


  echo "   --force"
  echo "        type: boolean_true"
  echo "        Overwrite existing container."
  echo ""


  echo "   -c, --config_mod"
  echo "        type: string, multiple values allowed"
  echo "        Modify a viash config at runtime using a custom DSL. For more information, see the online documentation."
  echo ""


  echo "   -l, --log"
  echo "        type: file"
  echo "        example: .viash_push_log.txt"
  echo "        Log file"
  echo ""


  echo "   --viash"
  echo "        type: file"
  echo "        A path to the viash executable. If not specified, this component will look for 'viash' on the \$PATH."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "viash_push 0.5.10"
            exit
            ;;
        --src)
            VIASH_PAR_SRC="$2"
            shift 2
            ;;
        --src=*)
            VIASH_PAR_SRC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -s)
            VIASH_PAR_SRC="$2"
            shift 2
            ;;
        --mode)
            VIASH_PAR_MODE="$2"
            shift 2
            ;;
        --mode=*)
            VIASH_PAR_MODE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -m)
            VIASH_PAR_MODE="$2"
            shift 2
            ;;
        --query)
            VIASH_PAR_QUERY="$2"
            shift 2
            ;;
        --query=*)
            VIASH_PAR_QUERY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -q)
            VIASH_PAR_QUERY="$2"
            shift 2
            ;;
        --query_namespace)
            VIASH_PAR_QUERY_NAMESPACE="$2"
            shift 2
            ;;
        --query_namespace=*)
            VIASH_PAR_QUERY_NAMESPACE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -n)
            VIASH_PAR_QUERY_NAMESPACE="$2"
            shift 2
            ;;
        --query_name)
            VIASH_PAR_QUERY_NAME="$2"
            shift 2
            ;;
        --query_name=*)
            VIASH_PAR_QUERY_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --tag)
            VIASH_PAR_TAG="$2"
            shift 2
            ;;
        --tag=*)
            VIASH_PAR_TAG=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -t)
            VIASH_PAR_TAG="$2"
            shift 2
            ;;
        --registry)
            VIASH_PAR_REGISTRY="$2"
            shift 2
            ;;
        --registry=*)
            VIASH_PAR_REGISTRY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -r)
            VIASH_PAR_REGISTRY="$2"
            shift 2
            ;;
        --organization)
            VIASH_PAR_ORGANIZATION="$2"
            shift 2
            ;;
        --organization=*)
            VIASH_PAR_ORGANIZATION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_ORGANIZATION="$2"
            shift 2
            ;;
        --organisation)
            VIASH_PAR_ORGANIZATION="$2"
            shift 2
            ;;
        --namespace_separator)
            VIASH_PAR_NAMESPACE_SEPARATOR="$2"
            shift 2
            ;;
        --namespace_separator=*)
            VIASH_PAR_NAMESPACE_SEPARATOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_threads)
            VIASH_PAR_MAX_THREADS="$2"
            shift 2
            ;;
        --max_threads=*)
            VIASH_PAR_MAX_THREADS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --force)
            VIASH_PAR_FORCE=true
            shift 1
            ;;
        --config_mod)
            if [ -z "$VIASH_PAR_CONFIG_MOD" ]; then
              VIASH_PAR_CONFIG_MOD="$2"
            else
              VIASH_PAR_CONFIG_MOD="$VIASH_PAR_CONFIG_MOD;""$2"
            fi
            shift 2
            ;;
        --config_mod=*)
            if [ -z "$VIASH_PAR_CONFIG_MOD" ]; then
              VIASH_PAR_CONFIG_MOD=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_CONFIG_MOD="$VIASH_PAR_CONFIG_MOD;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -c)
            if [ -z "$VIASH_PAR_CONFIG_MOD" ]; then
              VIASH_PAR_CONFIG_MOD="$2"
            else
              VIASH_PAR_CONFIG_MOD="$VIASH_PAR_CONFIG_MOD;""$2"
            fi
            shift 2
            ;;
        --log)
            VIASH_PAR_LOG="$2"
            shift 2
            ;;
        --log=*)
            VIASH_PAR_LOG=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -l)
            VIASH_PAR_LOG="$2"
            shift 2
            ;;
        --viash)
            VIASH_PAR_VIASH="$2"
            shift 2
            ;;
        --viash=*)
            VIASH_PAR_VIASH=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




if [ -z "$VIASH_PAR_SRC" ]; then
  VIASH_PAR_SRC="src"
fi
if [ -z "$VIASH_PAR_MODE" ]; then
  VIASH_PAR_MODE="development"
fi
if [ -z "$VIASH_PAR_FORCE" ]; then
  VIASH_PAR_FORCE="false"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-viash_push-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_SRC+x} ]; then echo "par_src='$VIASH_PAR_SRC'"; fi )
$( if [ ! -z ${VIASH_PAR_MODE+x} ]; then echo "par_mode='$VIASH_PAR_MODE'"; fi )
$( if [ ! -z ${VIASH_PAR_QUERY+x} ]; then echo "par_query='$VIASH_PAR_QUERY'"; fi )
$( if [ ! -z ${VIASH_PAR_QUERY_NAMESPACE+x} ]; then echo "par_query_namespace='$VIASH_PAR_QUERY_NAMESPACE'"; fi )
$( if [ ! -z ${VIASH_PAR_QUERY_NAME+x} ]; then echo "par_query_name='$VIASH_PAR_QUERY_NAME'"; fi )
$( if [ ! -z ${VIASH_PAR_TAG+x} ]; then echo "par_tag='$VIASH_PAR_TAG'"; fi )
$( if [ ! -z ${VIASH_PAR_REGISTRY+x} ]; then echo "par_registry='$VIASH_PAR_REGISTRY'"; fi )
$( if [ ! -z ${VIASH_PAR_ORGANIZATION+x} ]; then echo "par_organization='$VIASH_PAR_ORGANIZATION'"; fi )
$( if [ ! -z ${VIASH_PAR_NAMESPACE_SEPARATOR+x} ]; then echo "par_namespace_separator='$VIASH_PAR_NAMESPACE_SEPARATOR'"; fi )
$( if [ ! -z ${VIASH_PAR_MAX_THREADS+x} ]; then echo "par_max_threads='$VIASH_PAR_MAX_THREADS'"; fi )
$( if [ ! -z ${VIASH_PAR_FORCE+x} ]; then echo "par_force='$VIASH_PAR_FORCE'"; fi )
$( if [ ! -z ${VIASH_PAR_CONFIG_MOD+x} ]; then echo "par_config_mod='$VIASH_PAR_CONFIG_MOD'"; fi )
$( if [ ! -z ${VIASH_PAR_LOG+x} ]; then echo "par_log='$VIASH_PAR_LOG'"; fi )
$( if [ ! -z ${VIASH_PAR_VIASH+x} ]; then echo "par_viash='$VIASH_PAR_VIASH'"; fi )
meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
meta_resources_dir='$VIASH_RESOURCES_DIR'
resources_dir="$VIASH_RESOURCES_DIR"

## VIASH END
#!/bin/bash

if [ "\$par_force" == "true" ]; then
  echo "Force push... handle with care..."
  sleep 2
fi

# start creating command
command_builder=(
  --src "\$par_src"
  --platform docker
  --parallel --write_meta
)

# check par mode
if [ "\$par_mode" == "development" ]; then
  echo "No container push can and should be performed in this mode."
  exit 1
elif [ "\$par_mode" == "integration" ]; then
  echo "No container push can and should be performed in this mode."
  exit 1
  # if [ ! -z "\$par_tag" ]; then
  #   echo "Warning: '--tag' is ignored when '--mode=\$par_mode'."
  # fi
  # par_tag="dev"
  # echo "In integration mode with tag '\$par_tag'."
elif [ "\$par_mode" == "release" ]; then
  echo "In RELEASE mode with tag '\$par_tag'."
else
  echo "Error: Not a valid mode argument '\$par_mode'."
  exit 1
fi

if [ -z "\$par_tag" ]; then
  echo "Error: --tag is a requirement argument when '--mode=\$par_mode'."
  exit 1
fi

command_builder+=(
  --config_mod ".functionality.version := '\$par_tag'"
)

# derive setup strategy
if [ "\$par_force" == "true" ]; then
  setup_strat="push"
else
  setup_strat="pushifnotpresent"
fi

command_builder+=(
  --setup "\$setup_strat"
)


################ COMMON PARAMS ################

# check viash arg
# if not specified, default par_viash to look for 'viash' on the PATH
if [ -z "\$par_viash" ]; then
  par_viash="viash"
fi

# if specified, use par_max_threads as a java argument
if [ ! -z "\$par_max_threads" ]; then
  export JAVA_ARGS="\$JAVA_ARGS -Dscala.concurrent.context.maxThreads=\$par_max_threads"
fi

# process queries
if [ ! -z "\$par_query" ]; then
  command_builder+=( "--query" "\$par_query" )
fi
if [ ! -z "\$par_query_namespace" ]; then
  command_builder+=( "--query_name" "\$par_query_namespace" )
fi
if [ ! -z "\$par_query_name" ]; then
  command_builder+=( "--query_namespace" "\$par_query_name" )
fi

# process config mods
if [ ! -z "\$par_config_mod" ]; then
  IFS=";"
  for var in \$par_config_mod; do
    unset IFS
    command_builder+=( "--config_mod" "\$var" )
  done
fi

if [ ! -z "\$par_registry" ]; then
  command_builder+=(
    --config_mod ".platforms[.type == 'docker'].target_registry := '\$par_registry'"
    --config_mod ".platforms[.type == 'nextflow'].registry := '\$par_registry'"
  )
fi

if [ ! -z "\$par_organization" ]; then
  command_builder+=(
    --config_mod ".platforms[.type == 'docker'].target_organization := '\$par_organization'"
    --config_mod ".platforms[.type == 'nextflow'].organization := '\$par_organization'"
  )
fi

if [ ! -z "\$par_namespace_separator" ]; then
  command_builder+=(
    --config_mod ".platforms[.type == 'docker' || .type == 'nextflow'].namespace_separator := '\$par_namespace_separator'"
  )
fi



################ RUN COMMAND ################
if [ -z "\$par_log" ]; then
  "\$par_viash" ns build "\${command_builder[@]}"
else
  rm "\$par_log"
  "\$par_viash" ns build "\${command_builder[@]}" > >(tee -a "\$par_log") 2> >(tee -a "\$par_log")
fi
VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF
