#!/usr/bin/env bash

# viash_tag 0.5.15
# 
# This wrapper script is auto-generated by viash 0.5.15 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# backwards compatibility
VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="viash_tag"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "viash_tag 0.5.15"
  echo ""
  echo "Download existing docker images from a registry and tag them for upload to"
  echo "another registry."
  echo ""
  echo "Arguments:"
  echo "    -b, --build_dir"
  echo "        type: file, required parameter"
  echo "        example: /foo/output"
  echo "        Output folder from viash build. Should contain a 'docker' folder."
  echo ""
  echo "    -t, --tag"
  echo "        type: string"
  echo "        default: latest"
  echo "        example: 3.0.1"
  echo "        Git tag of the verison of the images you would like to pull."
  echo ""
  echo "    -r, --target_registry"
  echo "        type: string, required parameter"
  echo "        example: ghcr.io"
  echo "        Target container registry to push to."
  echo ""
  echo "    -s, --source_registry"
  echo "        type: string"
  echo "        default: registry.hub.docker.com"
  echo "        Source image repository uri."
  echo ""
  echo "    -o, --organization"
  echo "        type: string"
  echo "        Organization name."
  echo ""
  echo "    -d, --dry_run"
  echo "        type: boolean_true"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "viash_tag 0.5.15"
            exit
            ;;
        --build_dir)
            VIASH_PAR_BUILD_DIR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --build_dir. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --build_dir=*)
            VIASH_PAR_BUILD_DIR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -b)
            VIASH_PAR_BUILD_DIR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -b. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --tag)
            VIASH_PAR_TAG="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --tag. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --tag=*)
            VIASH_PAR_TAG=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -t)
            VIASH_PAR_TAG="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -t. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --target_registry)
            VIASH_PAR_TARGET_REGISTRY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --target_registry. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --target_registry=*)
            VIASH_PAR_TARGET_REGISTRY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -r)
            VIASH_PAR_TARGET_REGISTRY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -r. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --source_registry)
            VIASH_PAR_SOURCE_REGISTRY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --source_registry. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --source_registry=*)
            VIASH_PAR_SOURCE_REGISTRY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -s)
            VIASH_PAR_SOURCE_REGISTRY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -s. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --organization)
            VIASH_PAR_ORGANIZATION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --organization. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --organization=*)
            VIASH_PAR_ORGANIZATION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_ORGANIZATION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dry_run)
            VIASH_PAR_DRY_RUN=true
            shift 1
            ;;
        -d)
            VIASH_PAR_DRY_RUN=true
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_BUILD_DIR" ]; then
  ViashError '--build_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_TARGET_REGISTRY" ]; then
  ViashError '--target_registry' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_TAG" ]; then
  VIASH_PAR_TAG="latest"
fi
if [ -z "$VIASH_PAR_SOURCE_REGISTRY" ]; then
  VIASH_PAR_SOURCE_REGISTRY="registry.hub.docker.com"
fi
if [ -z "$VIASH_PAR_DRY_RUN" ]; then
  VIASH_PAR_DRY_RUN="false"
fi


# check whether parameters values are of the right type





if [[ -n "$VIASH_PAR_DRY_RUN" ]]; then
  if ! [[ "$VIASH_PAR_DRY_RUN" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--dry_run' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi


# check whether parameters values are of the right type







cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-viash_tag-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'

## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_BUILD_DIR+x} ]; then echo "par_build_dir='${VIASH_PAR_BUILD_DIR//\'/\'\"\'\"\'}'"; fi )
$( if [ ! -z ${VIASH_PAR_TAG+x} ]; then echo "par_tag='${VIASH_PAR_TAG//\'/\'\"\'\"\'}'"; fi )
$( if [ ! -z ${VIASH_PAR_TARGET_REGISTRY+x} ]; then echo "par_target_registry='${VIASH_PAR_TARGET_REGISTRY//\'/\'\"\'\"\'}'"; fi )
$( if [ ! -z ${VIASH_PAR_SOURCE_REGISTRY+x} ]; then echo "par_source_registry='${VIASH_PAR_SOURCE_REGISTRY//\'/\'\"\'\"\'}'"; fi )
$( if [ ! -z ${VIASH_PAR_ORGANIZATION+x} ]; then echo "par_organization='${VIASH_PAR_ORGANIZATION//\'/\'\"\'\"\'}'"; fi )
$( if [ ! -z ${VIASH_PAR_DRY_RUN+x} ]; then echo "par_dry_run='${VIASH_PAR_DRY_RUN//\'/\'\"\'\"\'}'"; fi )
meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
meta_resources_dir='$VIASH_META_RESOURCES_DIR'
meta_executable='$VIASH_META_EXECUTABLE'
meta_temp_dir='$VIASH_TEMP'
resources_dir="$VIASH_META_RESOURCES_DIR"

## VIASH END
#!/bin/bash
shopt -s extglob

# For older docker versions, docker manifest inspect is an experimental feature,
# which requires DOCKER_CLI_EXPERIMENTAL=enabled
# Docker manifest inspect --help should always exit with status code 0 if the command is found,
# so we must check the output itself and not the exit code.
docker_exists=\$(docker manifest inspect --help > /dev/null 2> /dev/null)
if ! \$docker_exits; then
    echo "Failed to run docker manifest inspect --help."
    exit 1
fi

docker_test=\$(docker manifest inspect --help 2> /dev/null)
if [ "\$docker_test" == "docker manifest inspect is only supported on a Docker cli with experimental cli features enabled" ]; then
    echo "Older version of docker detected, enabling experimental docker cli features."
    export DOCKER_CLI_EXPERIMENTAL=enabled
fi

# Check if build_dir is a directory, not a file (viash checks if the path exists)
if [[ ! -d "\$par_build_dir" ]]; then
    echo "Viash build output directory '\$par_build_dir' is not a directory, exiting..." 
    exit 1
fi

# Remove trailing slashes (requires extglob)
par_target_registry="\${par_target_registry%%+(/)}"
par_source_registry="\${par_source_registry%%+(/)}"
par_organization="\${par_organization%%+(/)}"
# Check if some parameters are not empty
if [ -z "\$par_target_registry" ]; then
    echo "Target docker registry must not be an empty string."
    exit 1
fi

if [ -z "\$par_source_registry" ]; then
    echo "Source docker registry must not be an empty string."
    exit 1
fi

if [ -z "\$par_tag" ]; then
    echo "Tag must not be an empty string."
    exit 1
fi

if [ -z "\$par_organization" ]; then
    echo "Organization must not be an empty string."
    exit 1
fi

# List all folders in the "target/docker"
TARGET_FOLDER="\$par_build_dir/docker"
if [[ ! -d "\$TARGET_FOLDER" && -L "\$TARGET_FOLDER" ]]; then
    echo "\$TARGET_FOLDER does not exits, please build the docker containers first."
    exit 1;
fi

# Adopted from https://stackoverflow.com/questions/23356779/how-can-i-store-the-find-command-results-as-an-array-in-bash
# Alternative for mapfile for older bash versions.
echo "Looking for components in \$TARGET_FOLDER"
components=()
tmpfile=\$(mktemp)
find "\$TARGET_FOLDER" -maxdepth 2 -mindepth 2 -type d -print0 > "\$tmpfile"
while IFS=  read -r -d \$'\\0'; do
    component_name=\${REPLY#"\$TARGET_FOLDER/"}
    component_name_underscore=\${component_name//\\//_}
    components+=("\$par_source_registry/\$par_organization/\$component_name_underscore:\$par_tag")
done <"\$tmpfile"
rm -f tmpfile

if [ \${#components[@]} -eq 0 ]; then
    echo "No components found in \$TARGET_FOLDER, exiting!" 
    exit 1
fi

for i in "\${components[@]}"
do
    printf "\\t\$i\\n"
done

# Check if all images exist before pulling
echo "Checking if all component docker images can be found at \$par_source_registry/\$par_organization."
function check_image_exists {
  docker manifest inspect "\$1" > /dev/null 2> /dev/null
}
for i in "\${components[@]}"
do
    check_image_exists "\$i"
    exit_code=\$?
    if [ \$exit_code -eq 1 ]; then
        echo "Image with id \$i not found. Either you do not have enough permissions" \\
             "to access the repository or the image does not exist." \\
             "Tip: check the output from 'docker manifest inspect \$i'. Exiting..."
        exit 1
    fi
done

# Actually pull the images
echo "Pulling images."
for i in "\${components[@]}"
do
    if [ "\$par_dry_run" = "false" ]; then
        docker pull "\$i" || {
            printf "Failed to pull image \$i, exiting!"; 
            exit 1
        }
    else
        printf "\\tDry run enabled, would try to pull \$i\\n"
    fi
done

# Re-tag docker containers
echo "Tagging docker containers" 
for i in "\${components[@]}"
do
    if [ "\$par_dry_run" = "false" ]; then
        docker tag "\$i" "\${i//\$par_source_registry/\$par_target_registry}" || {
            echo "Failed to tag \$i as \${i//\$par_source_registry/\$par_target_registry}, exiting...";
            exit 1
        }
    else
        printf "\\tDry run enabled, would have renamed \$i to \${i//\$par_source_registry/\$par_target_registry}\\n"
    fi
done

echo "Finished!"
echo "Hint: Images can be pushed to the new repository using 'viash_push --registry \$par_target_registry --mode release --tag \$par_tag'"

VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF
