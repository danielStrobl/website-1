#!/usr/bin/env bash

##############################
#    viash_install 0.5.10    #
##############################

# This wrapper script is auto-generated by viash 0.5.10 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="viash_install"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "viash_install 0.5.10"
  echo "Bootstrap or update a viash project's CI/CD artefacts"
  echo
  echo "Options:"

  echo "   --bin"
  echo "        type: file, output"
  echo "        default: bin"
  echo "        Target dir for viash scripts and tools"
  echo ""


  echo "   -r, --registry"
  echo "        type: string"
  echo "        example: ghcr.io"
  echo "        Which Docker registry to use in the Docker image name."
  echo ""


  echo "   -o, --organisation, --organization"
  echo "        type: string"
  echo "        example: myorganisation"
  echo "        Which organisation name to use in the Docker image name."
  echo ""


  echo "   -tis, --target_image_source"
  echo "        type: string"
  echo "        example: https://github.com/myorganisation/myrepository"
  echo "        Which image source to specify in the component builds."
  echo ""


  echo "   --namespace_separator"
  echo "        type: string"
  echo "        example: _"
  echo "        The separator to use between the component name and namespace as the image name of a Docker container."
  echo ""


  echo "   -c, --config_mod"
  echo "        type: string, multiple values allowed"
  echo "        Modify a viash config at runtime using a custom DSL. For more information, see the online documentation."
  echo ""


  echo "   -t, --tag"
  echo "        type: string"
  echo "        default: latest"
  echo "        Which tag/version of viash to use."
  echo ""


  echo "   -l, --log_prefix"
  echo "        type: string"
  echo "        default: ./.viash_log_"
  echo "        A prefix path or directory for where to store the log files."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "viash_install 0.5.10"
            exit
            ;;
        --bin)
            VIASH_PAR_BIN="$2"
            shift 2
            ;;
        --bin=*)
            VIASH_PAR_BIN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --registry)
            VIASH_PAR_REGISTRY="$2"
            shift 2
            ;;
        --registry=*)
            VIASH_PAR_REGISTRY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -r)
            VIASH_PAR_REGISTRY="$2"
            shift 2
            ;;
        --organization)
            VIASH_PAR_ORGANIZATION="$2"
            shift 2
            ;;
        --organization=*)
            VIASH_PAR_ORGANIZATION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_ORGANIZATION="$2"
            shift 2
            ;;
        --organisation)
            VIASH_PAR_ORGANIZATION="$2"
            shift 2
            ;;
        --target_image_source)
            VIASH_PAR_TARGET_IMAGE_SOURCE="$2"
            shift 2
            ;;
        --target_image_source=*)
            VIASH_PAR_TARGET_IMAGE_SOURCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -tis)
            VIASH_PAR_TARGET_IMAGE_SOURCE="$2"
            shift 2
            ;;
        --namespace_separator)
            VIASH_PAR_NAMESPACE_SEPARATOR="$2"
            shift 2
            ;;
        --namespace_separator=*)
            VIASH_PAR_NAMESPACE_SEPARATOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --config_mod)
            if [ -z "$VIASH_PAR_CONFIG_MOD" ]; then
              VIASH_PAR_CONFIG_MOD="$2"
            else
              VIASH_PAR_CONFIG_MOD="$VIASH_PAR_CONFIG_MOD;""$2"
            fi
            shift 2
            ;;
        --config_mod=*)
            if [ -z "$VIASH_PAR_CONFIG_MOD" ]; then
              VIASH_PAR_CONFIG_MOD=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_CONFIG_MOD="$VIASH_PAR_CONFIG_MOD;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -c)
            if [ -z "$VIASH_PAR_CONFIG_MOD" ]; then
              VIASH_PAR_CONFIG_MOD="$2"
            else
              VIASH_PAR_CONFIG_MOD="$VIASH_PAR_CONFIG_MOD;""$2"
            fi
            shift 2
            ;;
        --tag)
            VIASH_PAR_TAG="$2"
            shift 2
            ;;
        --tag=*)
            VIASH_PAR_TAG=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -t)
            VIASH_PAR_TAG="$2"
            shift 2
            ;;
        --log_prefix)
            VIASH_PAR_LOG_PREFIX="$2"
            shift 2
            ;;
        --log_prefix=*)
            VIASH_PAR_LOG_PREFIX=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -l)
            VIASH_PAR_LOG_PREFIX="$2"
            shift 2
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




if [ -z "$VIASH_PAR_BIN" ]; then
  VIASH_PAR_BIN="bin"
fi
if [ -z "$VIASH_PAR_TAG" ]; then
  VIASH_PAR_TAG="latest"
fi
if [ -z "$VIASH_PAR_LOG_PREFIX" ]; then
  VIASH_PAR_LOG_PREFIX="./.viash_log_"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-viash_install-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_BIN+x} ]; then echo "par_bin='$VIASH_PAR_BIN'"; fi )
$( if [ ! -z ${VIASH_PAR_REGISTRY+x} ]; then echo "par_registry='$VIASH_PAR_REGISTRY'"; fi )
$( if [ ! -z ${VIASH_PAR_ORGANIZATION+x} ]; then echo "par_organization='$VIASH_PAR_ORGANIZATION'"; fi )
$( if [ ! -z ${VIASH_PAR_TARGET_IMAGE_SOURCE+x} ]; then echo "par_target_image_source='$VIASH_PAR_TARGET_IMAGE_SOURCE'"; fi )
$( if [ ! -z ${VIASH_PAR_NAMESPACE_SEPARATOR+x} ]; then echo "par_namespace_separator='$VIASH_PAR_NAMESPACE_SEPARATOR'"; fi )
$( if [ ! -z ${VIASH_PAR_CONFIG_MOD+x} ]; then echo "par_config_mod='$VIASH_PAR_CONFIG_MOD'"; fi )
$( if [ ! -z ${VIASH_PAR_TAG+x} ]; then echo "par_tag='$VIASH_PAR_TAG'"; fi )
$( if [ ! -z ${VIASH_PAR_LOG_PREFIX+x} ]; then echo "par_log_prefix='$VIASH_PAR_LOG_PREFIX'"; fi )
meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
meta_resources_dir='$VIASH_RESOURCES_DIR'
resources_dir="$VIASH_RESOURCES_DIR"

## VIASH END
#!/bin/bash

if ! command -v unzip &> /dev/null; then
    echo "unzip needs to be installed"
    exit
fi
if ! command -v curl &> /dev/null; then
    echo "curl needs to be installed"
    exit
fi

set -e



# get the root of the repository
REPO_ROOT=\`pwd\`

if [ ! -d "\$par_bin" ]; then
  echo "> Creating \$par_bin"
  mkdir "\$par_bin"
fi

if [ "\$par_tag" == "latest" ]; then
  LATEST_RELEASE=\$(curl -L -s -H 'Accept: application/json' https://github.com/viash-io/viash/releases/latest)
  par_tag=\$(echo \$LATEST_RELEASE | sed -e 's/.*"tag_name":"\\([^"]*\\)".*/\\1/')
  echo "> Detected latest version as \$par_tag"
fi

echo "> Using tag \$par_tag"

# remove previous binaries
echo "> Cleanup"
if [ -f "\$par_bin/viash" ]; then
  echo "> Removing previous versions of Viash and recent project binaries"
  rm "\$par_bin/"viash*
fi
if [ -f "\$par_bin/project_update" ]; then
  echo "  > Removing previous versions of project binaries"
  rm "\$par_bin/"project_*
fi
if [ -f "\$par_bin/skeleton" ]; then
  echo "  > Removing previous versions of skeleton binary"
  rm "\$par_bin/"skeleton
fi


# make temporary dir for building things
build_dir=\$(mktemp -d)
function clean_up {
  [[ -d "\$build_dir" ]] && rm -r "\$build_dir"
}
trap clean_up EXIT


if [ \$par_tag == "develop" ]; then
  if ! command -v sbt &> /dev/null; then
      echo "sbt needs to be installed to build from source"
      exit
  fi

  # Download Viash helper scripts
  echo "> Downloading Viash source code @\$par_tag"
  curl -L -s "https://github.com/viash-io/viash/archive/refs/heads/\$par_tag.zip" -o "\$build_dir/\$par_tag.zip"
  unzip -q "\$build_dir/\$par_tag.zip" -d "\$build_dir"

  # Build Viash
  echo "> Building Viash from source"
  cd "\$build_dir/viash-\$par_tag"
  ./configure
  make bin/viash
  cd "\$REPO_ROOT"
  cp "\$build_dir/viash-\$par_tag/bin/viash" "\$par_bin"
else
  # Download Viash
  echo "> Downloading Viash v\$par_tag under \$par_bin"
  curl -L -s "https://github.com/viash-io/viash/releases/download/\$par_tag/viash" -o "\$par_bin/viash"
  chmod +x "\$par_bin/viash"

  # Download Viash helper scripts
  echo "> Downloading source v\$par_tag"
  curl -L -s "https://github.com/viash-io/viash/archive/refs/tags/\$par_tag.zip" -o "\$build_dir/\$par_tag.zip"
  unzip -q "\$build_dir/\$par_tag.zip" -d "\$build_dir"
fi

# build components
extra_args=()

if [ ! -z "\$par_registry" ]; then
  extra_args+=( -c ".functionality.arguments[.name == '--registry'].default := '\$par_registry'" )
fi
if [ ! -z "\$par_organization" ]; then
  extra_args+=( -c ".functionality.arguments[.name == '--organization'].default := '\$par_organization'" )
fi
if [ ! -z "\$par_namespace_separator" ]; then
  extra_args+=( -c ".functionality.arguments[.name == '--namespace_separator'].default := '\$par_namespace_separator'" )
fi
if [ ! -z "\$par_config_mod" ]; then
  echo "Warning: Adding config mods to viash install is currently not supported."
  # extra_args+=( -c ".functionality.arguments[.name == '--config_mod'].default := '\${par_config_mod@Q}'" )
fi
if [ ! -z "\$par_target_image_source" ]; then
  extra_args+=( -c ".functionality.arguments[.name == '--target_image_source'].default := '\$par_target_image_source'" )
fi


echo "> Building Viash helper scripts from source"
"\$par_bin/viash" ns build \\
  -s "\$build_dir/viash-\$par_tag/src/viash" \\
  -t "\$par_bin/" \\
  --flatten \\
  "\${extra_args[@]}" \\
  -c ".functionality.arguments[.name == '--viash'].default := '"\$par_bin/viash"'" \\
  -c ".functionality.arguments[.name == '--log' && root.functionality.name == 'viash_build'].default := '"\${par_log_prefix}build.txt"'" \\
  -c ".functionality.arguments[.name == '--log' && root.functionality.name == 'viash_test'].default := '"\${par_log_prefix}test.txt"'" \\
  -c ".functionality.arguments[.name == '--tsv' && root.functionality.name == 'viash_test'].default := '"\${par_log_prefix}test.tsv"'" \\
  -c ".functionality.arguments[.name == '--log' && root.functionality.name == 'viash_push'].default := '"\${par_log_prefix}push.txt"'" \\
  -c ".functionality.version := '\$par_tag'"

echo "> Done, happy viash-ing!"
VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF
