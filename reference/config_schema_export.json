{
  "config" : {
    "config" : [
      {
        "name" : "__this__",
        "type" : "Config",
        "hierarchy" : [
          "io.viash.config.Config"
        ],
        "description" : "A Viash configuration is a YAML file which contains metadata to describe the behaviour and build target(s) of a component.  \nWe commonly name this file `config.vsh.yaml` in our examples, but you can name it however you choose.  \n",
        "example" : [
          {
            "example" : "functionality:\n  name: hello_world\n  arguments:\n    - type: string\n      name: --input\n      default: \"world\"\n  resources:\n    - type: bash_script\n      path: script.sh\n      text: echo Hello $par_input\nplatforms:\n  - type: docker\n    image: \"bash:4.0\"\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "functionality",
        "type" : "Functionality",
        "description" : "The @[functionality](functionality) describes the behaviour of the script in terms of arguments and resources.\nBy specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you.\n"
      },
      {
        "name" : "platforms",
        "type" : "List of Platform",
        "description" : "A list of platforms to generate target artifacts for.\n\n - @[Native](platform_native)\n - @[Docker](platform_docker)\n - @[Nextflow VDSL3](platform_nextflow)\n"
      },
      {
        "name" : "__merge__",
        "type" : "Option of File",
        "description" : "Config inheritance by including YAML partials. This is useful for defining common APIs in\nseparate files. `__merge__` can be used in any level of the YAML. For example,\nnot just in the config but also in the functionality or any of the platforms.\n",
        "example" : [
          {
            "example" : "__merge__: ../api/common_interface.yaml",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.3"
      }
    ],
    "project" : [
      {
        "name" : "__this__",
        "type" : "ViashProject",
        "hierarchy" : [
          "io.viash.project.ViashProject"
        ],
        "description" : "A Viash project configuration file. It's name should be `_viash.yaml`.",
        "example" : [
          {
            "example" : "viash_version: 0.6.4\nsource: src\ntarget: target\nconfig_mods: |\n  .platforms[.type == 'docker'].target_registry := 'ghcr.io'\n  .platforms[.type == 'docker'].target_organization := 'viash-io'\n  .platforms[.type == 'docker'].namespace_separator := '/'\n  .platforms[.type == 'docker'].target_image_source := 'https://github.com/viash-io/viash'\n",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.4"
      },
      {
        "name" : "source",
        "type" : "Option of String",
        "description" : "Which source directory to use for the `viash ns` commands.",
        "example" : [
          {
            "example" : "source: src",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "viash_version",
        "type" : "Option of String",
        "description" : "Which version of Viash to use.",
        "example" : [
          {
            "example" : "viash_versions: 0.6.4",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "config_mods",
        "type" : "OneOrMore of String",
        "description" : "Which config mods to apply.",
        "example" : [
          {
            "example" : "config_mods: \".functionality.name := 'foo'\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "target",
        "type" : "Option of String",
        "description" : "Which target directory to use for `viash ns build`.",
        "example" : [
          {
            "example" : "target: target",
            "format" : "yaml"
          }
        ]
      }
    ]
  },
  "functionality" : {
    "functionality" : [
      {
        "name" : "__this__",
        "type" : "Functionality",
        "hierarchy" : [
          "io.viash.functionality.Functionality"
        ],
        "description" : "The functionality-part of the config file describes the behaviour of the script in terms of arguments and resources.\nBy specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you.\n"
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "Name of the component and the filename of the executable when built with `viash build`.",
        "example" : [
          {
            "example" : "name: this_is_my_component",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "enabled",
        "type" : "Boolean",
        "description" : "Setting this to false with disable this component when using namespaces.",
        "since" : "Viash 0.5.13",
        "removed" : {
          "message" : "Use `status` instead.",
          "deprecation" : "0.6.0",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "tests",
        "type" : "List of Resource",
        "description" : "One or more Bash/R/Python scripts to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing.",
        "removed" : {
          "message" : "Use `test_resources` instead. No functional difference.",
          "deprecation" : "0.5.13",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "example" : [
          {
            "example" : "info:\n  twitter: wizzkid\n  classes: [ one, two, three ]",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.4.0"
      },
      {
        "name" : "version",
        "type" : "Option of String",
        "description" : "Version of the component. This field will be used to version the executable and the Docker container.",
        "example" : [
          {
            "example" : "version: 0.8",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "inputs",
        "type" : "List of Argument",
        "description" : "A list of input arguments in addition to the `arguments` list. Any arguments specified here will have their `type` set to `file` and the `direction` set to `input` by default.",
        "example" : [
          {
            "example" : "inputs:\n  - name: input_file\n  - name: another_input",
            "format" : "yaml"
          },
          {
            "example" : "component_with_inputs\n  \n  Inputs:\n      input_file\n          type: file\n  \n      another_input\n          type: file",
            "format" : "bash",
            "description" : "This results in the following output when calling the component with the `--help` argument:"
          }
        ],
        "since" : "Viash 0.5.11",
        "removed" : {
          "message" : "Use `arguments` instead.",
          "deprecation" : "0.6.0",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "authors",
        "type" : "List of Author",
        "description" : "A list of @[authors](author). An author must at least have a name, but can also have a list of roles, an e-mail address, and a map of custom properties.\n\nSuggested values for roles are:\n \n| Role | Abbrev. | Description |\n|------|---------|-------------|\n| maintainer | mnt | for the maintainer of the code. Ideally, exactly one maintainer is specified. |\n| author | aut | for persons who have made substantial contributions to the software. |\n| contributor | ctb| for persons who have made smaller contributions (such as code patches).\n| datacontributor | dtc | for persons or organisations that contributed data sets for the software\n| copyrightholder | cph | for all copyright holders. This is a legal concept so should use the legal name of an institution or corporate body.\n| funder | fnd | for persons or organizations that furnished financial support for the development of the software\n\nThe [full list of roles](https://www.loc.gov/marc/relators/relaterm.html) is extremely comprehensive.\n",
        "example" : [
          {
            "example" : "authors:\n  - name: Jane Doe\n    role: [author, maintainer]\n    email: jane@doe.com\n    info:\n      github: janedoe\n      twitter: janedoe\n      orcid: XXAABBCCXX\n      groups: [ one, two, three ]\n  - name: Tim Farbe\n    roles: [author]\n    email: tim@far.be\n",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.3.1"
      },
      {
        "name" : "status",
        "type" : "Status",
        "description" : "Allows setting a component to active, deprecated or disabled.",
        "since" : "Viash 0.6.0"
      },
      {
        "name" : "requirements",
        "type" : "ComputationalRequirements",
        "description" : "@[Computational requirements](computational_requirements) related to running the component. \n`cpus` specifies the maximum number of (logical) cpus a component is allowed to use., whereas\n`memory` specifies the maximum amount of memory a component is allowed to allicate. Memory units must be\nin B, KB, MB, GB, TB or PB.",
        "example" : [
          {
            "example" : "requirements:\n  cpus: 5\n  memory: 10GB\n",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.0"
      },
      {
        "name" : "resources",
        "type" : "List of Resource",
        "description" : "@[Resources](resources) are files that support the component. The first resource should be @[a script](scripting_languages) that will be executed when the functionality is run. Additional resources will be copied to the same directory.\n\nCommon properties:\n\n * type: `file` / `r_script` / `python_script` / `bash_script` / `javascript_script` / `scala_script` / `csharp_script`, specifies the type of the resource. The first resource cannot be of type `file`. When the type is not specified, the default type is simply `file`.\n * dest: filename, the resulting name of the resource.  From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.\n * path: `path/to/file`, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.\n * text: ...multiline text..., the content of the resulting file specified as a string. Mutually exclusive with `path`.\n * is_executable: `true` / `false`, whether the resulting resource file should be made executable.\n",
        "example" : [
          {
            "example" : "resources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "test_resources",
        "type" : "List of Resource",
        "description" : "One or more @[scripts](scripting_languages) to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing. See @[Unit Testing](unit_testing) for more info.",
        "example" : [
          {
            "example" : "test_resources:\n  - type: bash_script\n    path: tests/test1.sh\n  - type: r_script\n    path: tests/test2.R\n  - path: resource1.txt\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "argument_groups",
        "type" : "List of ArgumentGroup",
        "description" : "A grouping of the @[arguments](argument), used to display the help message.\n\n - `name: foo`, the name of the argument group. \n - `description: Description of foo`, a description of the argument group. Multiline descriptions are supported.\n - `arguments: [arg1, arg2, ...]`, list of the arguments names.\n\n",
        "example" : [
          {
            "example" : "argument_groups:\n  - name: \"Input\"\n    arguments:\n      - name: \"--id\"\n        type: string\n        required: true\n      - name: \"--input\"\n        type: file\n        required: true\n  - name: \"Output\"\n    arguments:\n      - name: \"--output\"\n        type: file\n        direction: output\n        required: true\n      - name: \"--output_optional\"\n        type: file\n        direction: output\n",
            "format" : "yaml"
          },
          {
            "example" : "component_name\n\n  Input:\n      --id\n          type: string\n\n      --input\n          type: file\n\n  Output:\n      --output\n          type: file\n\n      --optional_output\n          type: file\n",
            "format" : "bash",
            "description" : "This results in the following output when calling the component with the `--help` argument:"
          }
        ],
        "since" : "Viash 0.5.14"
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the component. This will be displayed with `--help`.",
        "example" : [
          {
            "example" : "description: |\n  This component performs function Y and Z.\n  It is possible to make this a multiline string.\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "usage",
        "type" : "Option of String",
        "description" : "A description on how to use the component. This will be displayed with `--help` under the 'Usage:' section.",
        "example" : [
          {
            "example" : "usage: Place the executable in a directory containing TSV files and run it",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "add_resources_to_path",
        "type" : "Boolean",
        "description" : "Adds the resources directory to the PATH variable when set to true. This is set to false by default.",
        "since" : "Viash 0.5.5",
        "removed" : {
          "message" : "Extending the PATH turned out to be not desirable.",
          "deprecation" : "",
          "removal" : "0.5.11"
        }
      },
      {
        "name" : "outputs",
        "type" : "List of Argument",
        "description" : "A list of output arguments in addition to the `arguments` list. Any arguments specified here will have their `type` set to `file` and thr `direction` set to `output` by default.",
        "example" : [
          {
            "example" : "outputs:\n  - name: output_file\n  - name: another_output",
            "format" : "yaml"
          },
          {
            "example" : "component_with_outputs\n  \n  Outputs:\n      output_file\n          type: file, output\n  \n      another_output\n          type: file, output",
            "format" : "bash",
            "description" : "This results in the following output when calling the component with the `--help` argument:"
          }
        ],
        "since" : "Viash 0.5.11",
        "removed" : {
          "message" : "Use `arguments` instead.",
          "deprecation" : "0.6.0",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "namespace",
        "type" : "Option of String",
        "description" : "Namespace this component is a part of. See the @[Namespaces guide](namespace) for more information on namespaces.",
        "example" : [
          {
            "example" : "namespace: fancy_components",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "arguments",
        "type" : "List of Argument",
        "description" : "A list of @[arguments](argument) for this component. For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:  \n\n - @[string](arg_string)\n - @[file](arg_file)\n - @[integer](arg_integer)\n - @[double](arg_double)\n - @[boolean](arg_boolean)\n - @[boolean_true](arg_boolean_true)\n - @[boolean_false](arg_boolean_false)\n",
        "example" : [
          {
            "example" : "arguments:\n  - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    direction: output\n    required: false\n    multiple: true\n    multiple_sep: \",\"\n  - name: --bar\n    type: string\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "author" : [
      {
        "name" : "__this__",
        "type" : "Author",
        "hierarchy" : [
          "io.viash.functionality.Author"
        ],
        "description" : "Author metadata.",
        "example" : [
          {
            "example" : "name: Jane Doe\nrole: [author, maintainer]\nemail: jane@doe.com\ninfo:\n  github: janedoe\n  twitter: janedoe\n  orcid: XXAABBCCXX\n  groups: [ one, two, three ]\n",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.3.2"
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "Full name of the author, usually in the name of FirstName MiddleName LastName."
      },
      {
        "name" : "email",
        "type" : "Option of String",
        "description" : "E-mail of the author."
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "since" : "Viash 0.7.4"
      },
      {
        "name" : "roles",
        "type" : "OneOrMore of String",
        "description" : "Role of the author. Suggested items:\n\n* `\"author\"`: Authors who have made substantial contributions to the component.\n* `\"maintainer\"`: The maintainer of the component.\n* `\"contributor\"`: Authors who have made smaller contributions (such as code patches etc.).\n"
      },
      {
        "name" : "props",
        "type" : "Map of String,String",
        "description" : "Author properties. Must be a map of strings.",
        "deprecated" : {
          "message" : "Use `info` instead.",
          "deprecation" : "0.7.4",
          "removal" : "0.8.0"
        }
      }
    ],
    "computationalRequirements" : [
      {
        "name" : "__this__",
        "type" : "ComputationalRequirements",
        "hierarchy" : [
          "io.viash.functionality.ComputationalRequirements"
        ],
        "description" : "Computational requirements related to running the component.",
        "since" : "Viash 0.6.0"
      },
      {
        "name" : "n_proc",
        "type" : "Option of Int",
        "removed" : {
          "message" : "Use `cpus` instead.",
          "deprecation" : "0.6.1",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "cpus",
        "type" : "Option of Int",
        "description" : "The maximum number of (logical) cpus a component is allowed to use.",
        "example" : [
          {
            "example" : "cpus: 10",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "commands",
        "type" : "List of String",
        "description" : "A list of commands which should be present on the system for the script to function.",
        "example" : [
          {
            "example" : "commands: [ which, bash, awk, date, grep, egrep, ps, sed, tail, tee ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "memory",
        "type" : "Option of String",
        "description" : "The maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB.",
        "example" : [
          {
            "example" : "memory: 10GB",
            "format" : "yaml"
          }
        ]
      }
    ]
  },
  "platforms" : {
    "nativePlatform" : [
      {
        "name" : "__this__",
        "type" : "NativePlatform",
        "hierarchy" : [
          "io.viash.platforms.NativePlatform",
          "io.viash.platforms.Platform"
        ],
        "description" : "Running a Viash component on a native platform means that the script will be executed in your current environment.\nAny dependencies are assumed to have been installed by the user, so the native platform is meant for developers (who know what they're doing) or for simple bash scripts (which have no extra dependencies).\n"
      },
      {
        "name" : "id",
        "type" : "String",
        "description" : "As with all platforms, you can give a platform a different name. By specifying `id: foo`, you can target this platform (only) by specifying `-p foo` in any of the Viash commands.",
        "example" : [
          {
            "example" : "id: foo",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the platform."
      }
    ],
    "dockerPlatform" : [
      {
        "name" : "__this__",
        "type" : "DockerPlatform",
        "hierarchy" : [
          "io.viash.platforms.DockerPlatform",
          "io.viash.platforms.Platform"
        ],
        "description" : "Run a Viash component on a Docker backend platform.\nBy specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository.\n"
      },
      {
        "name" : "organization",
        "type" : "Option of String",
        "description" : "Name of a container's [organization](https://docs.docker.com/docker-hub/orgs/)."
      },
      {
        "name" : "registry",
        "type" : "Option of String",
        "description" : "The URL to the a [custom Docker registry](https://docs.docker.com/registry/)",
        "example" : [
          {
            "example" : "registry: https://my-docker-registry.org",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "image",
        "type" : "String",
        "description" : "The base container to start from. You can also add the tag here if you wish.",
        "example" : [
          {
            "example" : "image: \"bash:4.0\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "tag",
        "type" : "Option of String",
        "description" : "Specify a Docker image based on its tag.",
        "example" : [
          {
            "example" : "tag: 4.0",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "target_tag",
        "type" : "Option of String",
        "description" : "The tag the resulting image gets. Advanced usage only.",
        "example" : [
          {
            "example" : "target_tag: 0.5.0",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "run_args",
        "type" : "OneOrMore of String",
        "description" : "Add [docker run](https://docs.docker.com/engine/reference/run/) arguments."
      },
      {
        "name" : "namespace_separator",
        "type" : "String",
        "description" : "The separator between the namespace and the name of the component, used for determining the image name. Default: `\"/\"`.",
        "example" : [
          {
            "example" : "namespace_separator: \"_\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "resolve_volume",
        "type" : "DockerResolveVolume",
        "description" : "Enables or disables automatic volume mapping. Enabled when set to `Automatic` or disabled when set to `Manual`. Default: `Automatic`."
      },
      {
        "name" : "port",
        "type" : "OneOrMore of String",
        "description" : "A list of enabled ports. This doesn't change the Dockerfile but gets added as a command-line argument at runtime.",
        "example" : [
          {
            "example" : "port:\n  - 80\n  - 8080\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "python",
        "type" : "Option of PythonRequirements",
        "description" : "Specify which Python packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: python\n    pip: [ numpy ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ jkbr/httpie ]\n    gitlab: [ foo/bar ]\n    mercurial: [ http://... ]\n    svn: [ http://...]\n    bazaar: [ http://... ]\n    url: [ http://... ]\n",
            "format" : "yaml"
          }
        ],
        "removed" : {
          "message" : "Use `setup` instead, e.g. `{type: docker, setup: [{ type: python, ... }]}`. Will be removed.",
          "deprecation" : "0.5.15",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "setup",
        "type" : "List of Requirements",
        "description" : "A list of requirements for installing the following types of packages:\n\n - @[apt](apt_req)\n - @[apk](apk_req)\n - @[Docker setup instructions](docker_req)\n - @[JavaScript](javascript_req)\n - @[Python](python_req)\n - @[R](r_req)\n - @[Ruby](ruby_req)\n - @[yum](yum_req)\n\nThe order in which these dependencies are specified determines the order in which they will be installed.\n"
      },
      {
        "name" : "workdir",
        "type" : "Option of String",
        "description" : "The working directory when starting the container. This doesn't change the Dockerfile but gets added as a command-line argument at runtime.",
        "example" : [
          {
            "example" : "workdir: /home/user",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "apk",
        "type" : "Option of ApkRequirements",
        "description" : "Specify which apk packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: apk\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ],
        "removed" : {
          "message" : "Use `setup` instead, e.g. `{type: docker, setup: [{ type: apk, ... }]}`. Will be removed.",
          "deprecation" : "0.5.15",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "target_image",
        "type" : "Option of String",
        "description" : "If anything is specified in the setup section, running the `---setup` will result in an image with the name of `<target_image>:<version>`. If nothing is specified in the `setup` section, simply `image` will be used. Advanced usage only.",
        "example" : [
          {
            "example" : "target_image: myfoo",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "yum",
        "type" : "Option of YumRequirements",
        "description" : "Specify which yum packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: yum\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ],
        "removed" : {
          "message" : "Use `setup` instead, e.g. `{type: docker, setup: [{ type: yum, ... }]}`. Will be removed.",
          "deprecation" : "0.5.15",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "target_image_source",
        "type" : "Option of String",
        "description" : "The source of the target image. This is used for defining labels in the dockerfile.",
        "example" : [
          {
            "example" : "target_image_source: https://github.com/foo/bar",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "test_setup",
        "type" : "List of Requirements",
        "description" : "Additional requirements specific for running unit tests.",
        "since" : "Viash 0.5.13"
      },
      {
        "name" : "docker",
        "type" : "Option of DockerRequirements",
        "description" : "Specify which Docker commands should be run during setup.",
        "example" : [
          {
            "example" : "setup:\n  - type: docker\n    build_args: [ GITHUB_PAT=hello_world ]\n    run: [ git clone ... ]\n    add: [ \"http://foo.bar .\" ]\n    copy: [ \"http://foo.bar .\" ]\n    resources: \n      - resource.txt /path/to/resource.txt\n",
            "format" : "yaml"
          }
        ],
        "removed" : {
          "message" : "Use `setup` instead, e.g. `{type: docker, setup: [{ type: docker, ... }]}`. Will be removed.",
          "deprecation" : "0.5.15",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "id",
        "type" : "String",
        "description" : "As with all platforms, you can give a platform a different name. By specifying `id: foo`, you can target this platform (only) by specifying `-p foo` in any of the Viash commands.",
        "example" : [
          {
            "example" : "id: foo",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "apt",
        "type" : "Option of AptRequirements",
        "description" : "Specify which apt packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: apt\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ],
        "removed" : {
          "message" : "Use `setup` instead, e.g. `{type: docker, setup: [{ type: apt, ... }]}`. Will be removed.",
          "deprecation" : "0.5.15",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "target_registry",
        "type" : "Option of String",
        "description" : "The URL where the resulting image will be pushed to. Advanced usage only.",
        "example" : [
          {
            "example" : "target_registry: https://my-docker-registry.org",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "privileged",
        "type" : "Option of Boolean",
        "description" : "Adds a `privileged` flag to the docker run.",
        "removed" : {
          "message" : "Add a `privileged` flag in `run_args` instead, e.g. `{type: docker, run_args: \"--privileged\"}`.",
          "deprecation" : "0.6.3",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "setup_strategy",
        "type" : "DockerSetupStrategy",
        "description" : "The Docker setup strategy to use when building a container.\n\n| Strategy | Description |\n|-----|----------|\n| `alwaysbuild` / `build` / `b` | Always build the image from the dockerfile. This is the default setup strategy.\n| `alwayscachedbuild` / `cachedbuild` / `cb` | Always build the image from the dockerfile, with caching enabled.\n| `ifneedbebuild` |  Build the image if it does not exist locally.\n| `ifneedbecachedbuild` | Build the image with caching enabled if it does not exist locally, with caching enabled.\n| `alwayspull` / `pull` / `p` |  Try to pull the container from [Docker Hub](https://hub.docker.com) or the @[specified docker registry](docker_registry).\n| `alwayspullelsebuild` / `pullelsebuild` |  Try to pull the image from a registry and build it if it doesn't exist.\n| `alwayspullelsecachedbuild` / `pullelsecachedbuild` |  Try to pull the image from a registry and build it with caching if it doesn't exist.\n| `ifneedbepull` |  If the image does not exist locally, pull the image.\n| `ifneedbepullelsebuild` |  If the image does not exist locally, pull the image. If the image does exist, build it.\n| `ifneedbepullelsecachedbuild` | If the image does not exist locally, pull the image. If the image does exist, build it with caching enabled.\n| `push` | Push the container to [Docker Hub](https://hub.docker.com)  or the @[specified docker registry](docker_registry).\n| `pushifnotpresent` | Push the container to [Docker Hub](https://hub.docker.com) or the @[specified docker registry](docker_registry) if the @[tag](docker_tag) does not exist yet.\n| `donothing` / `meh` | Do not build or pull anything.\n\n",
        "example" : [
          {
            "example" : "setup_strategy: alwaysbuild",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "r",
        "type" : "Option of RRequirements",
        "description" : "Specify which R packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup: \n  - type: r\n    cran: [ dynutils ]\n    bioc: [ AnnotationDbi ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ rcannood/SCORPIUS ]\n    gitlab: [ org/package ]\n    svn: [ https://path.to.svn/group/repo ]\n    url: [ https://github.com/hadley/stringr/archive/HEAD.zip ]\n    script: [ 'devtools::install(\".\")' ]\n",
            "format" : "yaml"
          }
        ],
        "removed" : {
          "message" : "Use `setup` instead, e.g. `{type: docker, setup: [{ type: r, ... }]}`. Will be removed.",
          "deprecation" : "0.5.15",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the platform."
      },
      {
        "name" : "target_organization",
        "type" : "Option of String",
        "description" : "The organization set in the resulting image. Advanced usage only.",
        "example" : [
          {
            "example" : "target_organization: viash-io",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "chown",
        "type" : "Boolean",
        "description" : "In Linux, files created by a Docker container will be owned by `root`. With `chown: true`, Viash will automatically change the ownership of output files (arguments with `type: file` and `direction: output`) to the user running the Viash command after execution of the component. Default value: `true`.",
        "example" : [
          {
            "example" : "chown: false",
            "format" : "yaml"
          }
        ]
      }
    ],
    "nextflowVdsl3Platform" : [
      {
        "name" : "__this__",
        "type" : "NextflowVdsl3Platform",
        "hierarchy" : [
          "io.viash.platforms.NextflowVdsl3Platform",
          "io.viash.platforms.NextflowPlatform",
          "io.viash.platforms.Platform"
        ],
        "description" : "Next-gen platform for generating NextFlow VDSL3 modules."
      },
      {
        "name" : "auto",
        "type" : "NextflowAuto",
        "description" : "@[Automated processing flags](nextflow_auto) which can be toggled on or off:\n\n| Flag | Description | Default |\n|---|---------|----|\n| `simplifyInput` | If `true`, an input tuple only containing only a single File (e.g. `[\"foo\", file(\"in.h5ad\")]`) is automatically transformed to a map (i.e. `[\"foo\", [ input: file(\"in.h5ad\") ] ]`). | `true` |\n| `simplifyOutput` | If `true`, an output tuple containing a map with a File (e.g. `[\"foo\", [ output: file(\"out.h5ad\") ] ]`) is automatically transformed to a map (i.e. `[\"foo\", file(\"out.h5ad\")]`). | `true` |\n| `transcript` | If `true`, the module's transcripts from `work/` are automatically published to `params.transcriptDir`. If not defined, `params.publishDir + \"/_transcripts\"` will be used. Will throw an error if neither are defined. | `false` |\n| `publish` | If `true`, the module's outputs are automatically published to `params.publishDir`.  Will throw an error if `params.publishDir` is not defined. | `false` |\n\n",
        "example" : [
          {
            "example" : "auto:\n  publish: true",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "directives",
        "type" : "NextflowDirectives",
        "description" : "@[Directives](nextflow_directives) are optional settings that affect the execution of the process. These mostly match up with the Nextflow counterparts.  \n",
        "example" : [
          {
            "example" : "directives:\n  container: rocker/r-ver:4.1\n  label: highcpu\n  cpus: 4\n  memory: 16 GB",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "container",
        "type" : "String",
        "description" : "Specifies the Docker platform id to be used to run Nextflow."
      },
      {
        "name" : "debug",
        "type" : "Boolean",
        "description" : "Whether or not to print debug messages."
      },
      {
        "name" : "id",
        "type" : "String",
        "description" : "Every platform can be given a specific id that can later be referred to explicitly when running or building the Viash component.",
        "example" : [
          {
            "example" : "id: foo",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the platform."
      },
      {
        "name" : "config",
        "type" : "NextflowConfig",
        "description" : "Allows tweaking how the @[Nextflow Config](nextflow_config) file is generated."
      }
    ],
    "nextflowLegacyPlatform" : [
      {
        "name" : "__this__",
        "type" : "NextflowLegacyPlatform",
        "hierarchy" : [
          "io.viash.platforms.NextflowLegacyPlatform",
          "io.viash.platforms.NextflowPlatform",
          "io.viash.platforms.Platform"
        ],
        "description" : "Run a Viash component as a Nextflow module.",
        "removed" : {
          "message" : "Nextflow platform with `variant: legacy` was removed",
          "deprecation" : "0.6.0",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "organization",
        "type" : "Option of String",
        "description" : "Name of a container's [organization](https://docs.docker.com/docker-hub/orgs/).",
        "example" : [
          {
            "example" : "organization: viash-io",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "image",
        "type" : "Option of String",
        "description" : "If no image attributes are configured, Viash will use the auto-generated image name from the Docker platform:\n\n```\n[<namespace>/]<name>:<version>\n```\nIt's possible to specify the container image explicitly with which to run the module in different ways:\n\n```\nimage: dataintuitive/viash:0.4.0\n```\nExactly the same can be obtained with\n\n```\nimage: dataintuitive/viash\nregistry: index.docker.io/v1/\ntag: 0.4.0\n```\nSpecifying the attribute(s) like this will use the container `dataintuitive/viash:0.4.0` from Docker hub (registry).\n\nIf no tag is specified Viash will use `functionality.version` as the tag.\n\nIf no registry is specified, Viash (and NextFlow) will assume the image is available locally or on Docker Hub. In other words, the `registry: ...` attribute above is superfluous. No other registry is checked automatically due to a limitation from Docker itself.\n"
      },
      {
        "name" : "tag",
        "type" : "Option of String",
        "description" : "Specify a Docker image based on its tag.",
        "example" : [
          {
            "example" : "tag: 4.0",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "label",
        "type" : "Option of String",
        "description" : "When running the module in a cluster context and depending on the cluster type, [NextFlow allows for attaching labels](https://www.nextflow.io/docs/latest/process.html#label) to the process that can later be used as selectors for associating resources to this process.\n\nIn order to attach one label to a process/component, one can use the `label: ...` attribute, multiple labels can be added using `labels: [ ..., ... ]` and the two can even be mixed.\n\nIn the main `nextflow.config`, one can now use this label:\n\nprocess {\n  ...\n  withLabel: bigmem {\n     maxForks = 5\n     ...\n  }\n}\n",
        "example" : [
          {
            "example" : "label: highmem labels: [ highmem, highcpu ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "stageInMode",
        "type" : "Option of String",
        "description" : "By default NextFlow will create a symbolic link to the inputs for a process/module and run the tool at hand using those symbolic links. Some applications do not cope well with this strategy, in that case the files should effectively be copied rather than linked to. This can be achieved by using `stageInMode: copy`.\nThis attribute is optional, the default is `symlink`.\n",
        "example" : [
          {
            "example" : "stageInMode: copy",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "id",
        "type" : "String",
        "description" : "Every platform can be given a specific id that can later be referred to explicitly when running or building the Viash component."
      },
      {
        "name" : "labels",
        "type" : "OneOrMore of String",
        "description" : "When running the module in a cluster context and depending on the cluster type, [NextFlow allows for attaching labels](https://www.nextflow.io/docs/latest/process.html#label) to the process that can later be used as selectors for associating resources to this process.\n\nIn order to attach one label to a process/component, one can use the `label: ...` attribute, multiple labels can be added using `labels: [ ..., ... ]` and the two can even be mixed.\n\nIn the main `nextflow.config`, one can now use this label:\n\nprocess {\n  ...\n  withLabel: bigmem {\n     maxForks = 5\n     ...\n  }\n}\n",
        "example" : [
          {
            "example" : "label: highmem labels: [ highmem, highcpu ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the platform."
      },
      {
        "name" : "registry",
        "type" : "Option of String",
        "description" : "The URL to the a [custom Docker registry](https://docs.docker.com/registry/).",
        "example" : [
          {
            "example" : "registry: https://my-docker-registry.org",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "per_id",
        "type" : "Option of Boolean",
        "description" : "By default, a subdirectory is created corresponding to the unique ID that is passed in the triplet. Let us illustrate this with an example. The following code snippet uses the value of `--input` as an input of a workflow. The input can include a wildcard so that multiple samples can run in parallel. We use the parent directory name (`.getParent().baseName`) as an identifier for the sample. We pass this as the first entry of the triplet:\n\n```\nChannel.fromPath(params.input) \\\n    | map{ it -> [ it.getParent().baseName , it ] } \\\n    | map{ it -> [ it[0] , it[1], params ] }\n    | ...\n```\nSay the resulting sample names are `SAMPLE1` and `SAMPLE2`. The next step in the pipeline will be published (at least by default) under:\n```\n<publishDir>/SAMPLE1/\n<publishDir>/SAMPLE2/\n```\nThese per-ID subdirectories can be avoided by setting:\n```\nper_id: false\n```\n"
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "When `publish: true`, this attribute defines where the output is written relative to the `params.publishDir` setting. For example, `path: processed` in combination with `--output s3://some_bucket/` will store the output of this component under\n```\ns3://some_bucket/processed/\n```\nThis attribute gives control over the directory structure of the output. For example:\n```\npath: raw_data\n```\nOr even:\n```\npath: raw_data/bcl\n```\nPlease note that `per_id` and `path` can be combined.\n"
      },
      {
        "name" : "separate_multiple_outputs",
        "type" : "Boolean",
        "description" : "Separates the outputs generated by a Nextflow component with multiple outputs as separate events on the channel. Default value: `true`.",
        "example" : [
          {
            "example" : "separate_multiple_outputs: false",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "namespace_separator",
        "type" : "String",
        "description" : "The default namespace separator is \"_\".",
        "example" : [
          {
            "example" : "namespace_separator: \"+\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "publish",
        "type" : "Option of Boolean",
        "description" : "NextFlow uses the autogenerated `work` dirs to manage process IO under the hood. In order effectively output something one can publish the results a module or step in the pipeline. In order to do this, add `publish: true` to the config:\n\n - publish is optional\n - Default value is false\n\nThis attribute simply defines if output of a component should be published yes or no. The output location has to be provided at pipeline launch by means of the option `--publishDir ...` or as `params.publishDir` in `nextflow.config`:\n```\nparams.publishDir = \"...\"\n```\n"
      },
      {
        "name" : "version",
        "type" : "Option of String",
        "removed" : {
          "message" : "nextflow platform: attribute 'version' was removed",
          "deprecation" : "0.4.0",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "executor",
        "type" : "Option of String",
        "removed" : {
          "message" : "Undocumented & stale value",
          "deprecation" : "0.6.3",
          "removal" : "0.7.0"
        }
      }
    ]
  },
  "requirements" : {
    "javascriptRequirements" : [
      {
        "name" : "__this__",
        "type" : "JavaScriptRequirements",
        "hierarchy" : [
          "io.viash.platforms.requirements.JavaScriptRequirements",
          "io.viash.platforms.requirements.Requirements"
        ],
        "description" : "Specify which JavaScript packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: javascript\n    npm: packagename\n    git: \"https://some.git.repository/org/repo\"\n    github: \"owner/repository\"\n    url: \"https://github.com/org/repo/archive/HEAD.zip\"\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "github",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from GitHub.",
        "example" : [
          {
            "example" : "github: [ owner/repository ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "url",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using a generic URI.",
        "example" : [
          {
            "example" : "url: [ https://github.com/org/repo/archive/HEAD.zip ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "git",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using a Git URI.",
        "example" : [
          {
            "example" : "git: [ https://some.git.repository/org/repo ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "npm",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from npm.",
        "example" : [
          {
            "example" : "npm: [ packagename ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the requirement specification."
      },
      {
        "name" : "packages",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from npm.",
        "example" : [
          {
            "example" : "packages: [ packagename ]",
            "format" : "yaml"
          }
        ]
      }
    ],
    "pythonRequirements" : [
      {
        "name" : "__this__",
        "type" : "PythonRequirements",
        "hierarchy" : [
          "io.viash.platforms.requirements.PythonRequirements",
          "io.viash.platforms.requirements.Requirements"
        ],
        "description" : "Specify which Python packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: python\n    pip: numpy\n    github: [ jkbr/httpie, foo/bar ]\n    url: \"https://github.com/some_org/some_pkg/zipball/master\"\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "github",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from GitHub.",
        "example" : [
          {
            "example" : "github: [ jkbr/httpie ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "gitlab",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from GitLab.",
        "example" : [
          {
            "example" : "gitlab: [ foo/bar ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "pip",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from pip.",
        "example" : [
          {
            "example" : "pip: [ numpy ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "pypi",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from PyPI using pip.",
        "example" : [
          {
            "example" : "pypi: [ numpy ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "git",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using a Git URI.",
        "example" : [
          {
            "example" : "git: [ https://some.git.repository/org/repo ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "upgrade",
        "type" : "Boolean",
        "description" : "Sets the `--upgrade` flag when set to true. Default: true."
      },
      {
        "name" : "packages",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from pip.",
        "example" : [
          {
            "example" : "packages: [ numpy ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "url",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using a generic URI.",
        "example" : [
          {
            "example" : "url: [ https://github.com/some_org/some_pkg/zipball/master ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "svn",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using an SVN URI.",
        "example" : [
          {
            "example" : "svn: [ http://svn.repo/some_pkg/trunk/#egg=SomePackage ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "bazaar",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using a Bazaar URI.",
        "example" : [
          {
            "example" : "bazaar: [ http://bazaar.launchpad.net/some_pkg/some_pkg/release-0.1 ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "script",
        "type" : "OneOrMore of String",
        "description" : "Specifies a code block to run as part of the build.",
        "example" : [
          {
            "example" : "script: |\n  print(\"Running custom code\")\n  x = 1 + 1 == 2",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the requirement specification."
      },
      {
        "name" : "mercurial",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using a Mercurial URI.",
        "example" : [
          {
            "example" : "mercurial: [ https://hg.myproject.org/MyProject/#egg=MyProject ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "user",
        "type" : "Boolean",
        "description" : "Sets the `--user` flag when set to true. Default: false."
      }
    ],
    "rRequirements" : [
      {
        "name" : "__this__",
        "type" : "RRequirements",
        "hierarchy" : [
          "io.viash.platforms.requirements.RRequirements",
          "io.viash.platforms.requirements.Requirements"
        ],
        "description" : "Specify which R packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup: \n  - type: r\n    cran: anndata\n    bioc: [ AnnotationDbi, SingleCellExperiment ]\n    github: rcannood/SCORPIUS\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "bioc",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from BioConductor.",
        "example" : [
          {
            "example" : "bioc: [ AnnotationDbi ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "github",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from GitHub.",
        "example" : [
          {
            "example" : "github: [ rcannood/SCORPIUS ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "gitlab",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from GitLab.",
        "example" : [
          {
            "example" : "gitlab: [ org/package ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "url",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using a generic URI.",
        "example" : [
          {
            "example" : "url: [ https://github.com/hadley/stringr/archive/HEAD.zip ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "bioc_force_install",
        "type" : "Boolean",
        "description" : "Forces packages specified in `bioc` to be reinstalled, even if they are already present in the container. Default: false.",
        "example" : [
          {
            "example" : "bioc_force_install: false",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "git",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using a Git URI.",
        "example" : [
          {
            "example" : "git: [ https://some.git.repository/org/repo ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "cran",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from CRAN.",
        "example" : [
          {
            "example" : "cran: [ anndata, ggplot2 ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "bitbucket",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from Bitbucket.",
        "example" : [
          {
            "example" : "bitbucket: [ org/package ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "svn",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install using an SVN URI.",
        "example" : [
          {
            "example" : "svn: [ https://path.to.svn/group/repo ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "packages",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install from CRAN.",
        "example" : [
          {
            "example" : "packages: [ anndata, ggplot2 ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "script",
        "type" : "OneOrMore of String",
        "description" : "Specifies a code block to run as part of the build.",
        "example" : [
          {
            "example" : "script: |\n  cat(\"Running custom code\n\")\n  install.packages(\"anndata\")",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the requirement specification."
      }
    ],
    "rubyRequirements" : [
      {
        "name" : "__this__",
        "type" : "RubyRequirements",
        "hierarchy" : [
          "io.viash.platforms.requirements.RubyRequirements",
          "io.viash.platforms.requirements.Requirements"
        ],
        "description" : "Specify which Ruby packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: ruby\n    packages: [ rspec ]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the requirement specification."
      },
      {
        "name" : "packages",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install.",
        "example" : [
          {
            "example" : "packages: [ rspec ]",
            "format" : "yaml"
          }
        ]
      }
    ],
    "yumRequirements" : [
      {
        "name" : "__this__",
        "type" : "YumRequirements",
        "hierarchy" : [
          "io.viash.platforms.requirements.YumRequirements",
          "io.viash.platforms.requirements.Requirements"
        ],
        "description" : "Specify which yum packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: yum\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the requirement specification."
      },
      {
        "name" : "packages",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install.",
        "example" : [
          {
            "example" : "packages: [ sl ]",
            "format" : "yaml"
          }
        ]
      }
    ],
    "apkRequirements" : [
      {
        "name" : "__this__",
        "type" : "ApkRequirements",
        "hierarchy" : [
          "io.viash.platforms.requirements.ApkRequirements",
          "io.viash.platforms.requirements.Requirements"
        ],
        "description" : "Specify which apk packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: apk\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the requirement specification."
      },
      {
        "name" : "packages",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install.",
        "example" : [
          {
            "example" : "packages: [ sl ]",
            "format" : "yaml"
          }
        ]
      }
    ],
    "dockerRequirements" : [
      {
        "name" : "__this__",
        "type" : "DockerRequirements",
        "hierarchy" : [
          "io.viash.platforms.requirements.DockerRequirements",
          "io.viash.platforms.requirements.Requirements"
        ],
        "description" : "Specify which Docker commands should be run during setup.",
        "example" : [
          {
            "example" : "setup:\n  - type: docker\n    build_args: \"R_VERSION=hello_world\"\n    run: |\n      echo 'Run a custom command'\n      echo 'Foo' > /path/to/file.txt",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "run",
        "type" : "OneOrMore of String",
        "description" : "Specifies which `RUN` entries to add to the Dockerfile while building it.",
        "example" : [
          {
            "example" : "run: |\n  echo 'Run a custom command'\n  echo 'Foo' > /path/to/file.txt",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "label",
        "type" : "OneOrMore of String",
        "description" : "Specifies which `LABEL` entries to add to the Dockerfile while building it.",
        "example" : [
          {
            "example" : "label: [ component=\"foo\" ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "build_args",
        "type" : "OneOrMore of String",
        "description" : "Specifies which `ARG` entries to add to the Dockerfile while building it.",
        "example" : [
          {
            "example" : "build_args: [ \"R_VERSION=4.2\" ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the requirement specification."
      },
      {
        "name" : "add",
        "type" : "OneOrMore of String",
        "description" : "Specifies which `ADD` entries to add to the Dockerfile while building it.",
        "example" : [
          {
            "example" : "add: [ \"http://foo/bar .\" ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "env",
        "type" : "OneOrMore of String",
        "description" : "Specifies which `ENV` entries to add to the Dockerfile while building it. Unlike `ARG`, `ENV` entries are also accessible from inside the container.",
        "example" : [
          {
            "example" : "env: [ \"R_VERSION=4.2\" ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "resources",
        "type" : "OneOrMore of String",
        "description" : "Specifies which `COPY` entries to add to the Dockerfile while building it.",
        "example" : [
          {
            "example" : "resources: [ \"resource.txt /path/to/resource.txt\" ]",
            "format" : "yaml"
          }
        ],
        "removed" : {
          "message" : "`resources` in `setup: {type: docker, resources: ...}` was removed. Please use `copy` instead.",
          "deprecation" : "0.6.3",
          "removal" : "0.7.0"
        }
      },
      {
        "name" : "copy",
        "type" : "OneOrMore of String",
        "description" : "Specifies which `COPY` entries to add to the Dockerfile while building it.",
        "example" : [
          {
            "example" : "copy: [ \"resource.txt /path/to/resource.txt\" ]",
            "format" : "yaml"
          }
        ]
      }
    ],
    "aptRequirements" : [
      {
        "name" : "__this__",
        "type" : "AptRequirements",
        "hierarchy" : [
          "io.viash.platforms.requirements.AptRequirements",
          "io.viash.platforms.requirements.Requirements"
        ],
        "description" : "Specify which apt packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: apt\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "interactive",
        "type" : "Boolean",
        "description" : "If `false`, the Debian frontend is set to non-interactive (recommended). Default: false."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the requirement specification."
      },
      {
        "name" : "packages",
        "type" : "OneOrMore of String",
        "description" : "Specifies which packages to install.",
        "example" : [
          {
            "example" : "packages: [ sl ]",
            "format" : "yaml"
          }
        ]
      }
    ]
  },
  "arguments" : {
    "string" : [
      {
        "name" : "__this__",
        "type" : "StringArgument",
        "hierarchy" : [
          "io.viash.functionality.arguments.StringArgument",
          "io.viash.functionality.arguments.Argument"
        ],
        "description" : "A `string` type argument has a value made up of an ordered sequences of characters, like \"Hello\" or \"I'm a string\".",
        "example" : [
          {
            "example" : "arguments:\n  - name: --search_query\n    type: string\n    default: \"meaning of life\"\n    description: The term to search for\n    alternatives: [\"-q\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
      },
      {
        "name" : "choices",
        "type" : "List of String",
        "description" : "Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.",
        "example" : [
          {
            "example" : "- name: --language\n  type: string\n  choices: [\"python\", \"r\", \"javascript\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "example" : [
          {
            "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.3"
      },
      {
        "name" : "default",
        "type" : "OneOrMore of String",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  default: \"The answer is 42\"\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of String",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  example: \"Hello World\"\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "multiple_sep",
        "type" : "String",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_string=Marc,Susan,Paul",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_string=Marc:Susan:Paul",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the argument."
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  required: true\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "double" : [
      {
        "name" : "__this__",
        "type" : "DoubleArgument",
        "hierarchy" : [
          "io.viash.functionality.arguments.DoubleArgument",
          "io.viash.functionality.arguments.Argument"
        ],
        "description" : "A `double` type argument has a numeric value with decimal points",
        "example" : [
          {
            "example" : "arguments:\n  - name: --litres\n    type: double\n    default: 1.5\n    description: Litres of fluid to process\n    alternatives: [\"-l\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "example" : [
          {
            "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.3"
      },
      {
        "name" : "max",
        "type" : "Option of Double",
        "description" : "Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  max: 80.4\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "default",
        "type" : "OneOrMore of Double",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  default: 5.8\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of Double",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  example: 5.8\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "multiple_sep",
        "type" : "String",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_double=5.8,22.6,200.4",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "min",
        "type" : "Option of Double",
        "description" : "Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  min: 25.5\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_double=5.8:22.6:200.4",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the argument."
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  required: true\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "long" : [
      {
        "name" : "__this__",
        "type" : "LongArgument",
        "hierarchy" : [
          "io.viash.functionality.arguments.LongArgument",
          "io.viash.functionality.arguments.Argument"
        ],
        "description" : "An `long` type argument has a numeric value without decimal points.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --core_amount\n    type: long\n    default: 16\n    description: Amount of CPU cores to use\n    alternatives: [\"-c\"]\n",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.1"
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
      },
      {
        "name" : "choices",
        "type" : "List of Long",
        "description" : "Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.",
        "example" : [
          {
            "example" : "- name: --values\n  type: long\n  choices: [1024, 2048, 4096]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "example" : [
          {
            "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.3"
      },
      {
        "name" : "max",
        "type" : "Option of Long",
        "description" : "Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_long\n  type: long\n  max: 150\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "default",
        "type" : "OneOrMore of Long",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_long\n  type: long\n  default: 100\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of Long",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_long\n  type: long\n  example: 100\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "multiple_sep",
        "type" : "String",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_long\n  type: long\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_long=10:80:152",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "min",
        "type" : "Option of Long",
        "description" : "Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_long\n  type: long\n  min: 50\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_long\n  type: long\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_long=10:80:152",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the argument."
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_long\n  type: long\n  required: true\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "boolean" : [
      {
        "name" : "__this__",
        "type" : "BooleanArgument",
        "hierarchy" : [
          "io.viash.functionality.arguments.BooleanArgument",
          "io.viash.functionality.arguments.BooleanArgumentBase",
          "io.viash.functionality.arguments.Argument"
        ],
        "description" : "A `boolean` type argument has two possible values: `true` or `false`.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --trim\n    type: boolean\n    default: true\n    description: Trim whitespace from the final output\n    alternatives: [\"-t\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--trim`, `-t` or `trim`. The number of dashes determines how values can be passed:  \n\n  - `--trim` is a long option, which can be passed with `executable_name --trim`\n  - `-t` is a short option, which can be passed with `executable_name -t`\n  - `trim` is an argument, which can be passed with `executable_name trim`  \n"
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "example" : [
          {
            "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.3"
      },
      {
        "name" : "default",
        "type" : "OneOrMore of Boolean",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  default: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of Boolean",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  example: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "multiple_sep",
        "type" : "String",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_boolean=true,true,false",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_boolean=true:true:false",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the argument."
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  required: true\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "integer" : [
      {
        "name" : "__this__",
        "type" : "IntegerArgument",
        "hierarchy" : [
          "io.viash.functionality.arguments.IntegerArgument",
          "io.viash.functionality.arguments.Argument"
        ],
        "description" : "An `integer` type argument has a numeric value without decimal points.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --core_amount\n    type: integer\n    default: 16\n    description: Amount of CPU cores to use\n    alternatives: [\"-c\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
      },
      {
        "name" : "choices",
        "type" : "List of Int",
        "description" : "Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.",
        "example" : [
          {
            "example" : "- name: --values\n  type: integer\n  choices: [1024, 2048, 4096]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "example" : [
          {
            "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.3"
      },
      {
        "name" : "max",
        "type" : "Option of Int",
        "description" : "Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  max: 150\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "default",
        "type" : "OneOrMore of Int",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  default: 100\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of Int",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  example: 100\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "multiple_sep",
        "type" : "String",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_integer=10:80:152",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "min",
        "type" : "Option of Int",
        "description" : "Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  min: 50\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_integer=10:80:152",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the argument."
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  required: true\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "file" : [
      {
        "name" : "__this__",
        "type" : "FileArgument",
        "hierarchy" : [
          "io.viash.functionality.arguments.FileArgument",
          "io.viash.functionality.arguments.Argument"
        ],
        "description" : "A `file` type argument has a string value that points to a file or folder path.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --input_csv\n    type: file\n    must_exist: true\n    description: CSV file to read contents from\n    alternatives: [\"-i\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
      },
      {
        "name" : "create_parent",
        "type" : "Boolean",
        "description" : "If the output filename is a path and it does not exist, create it before executing the script (only for `direction: output`).",
        "example" : [
          {
            "example" : "- name: --my_file\n  type: file\n  direction: output\n  create_parent: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "direction",
        "type" : "Direction",
        "description" : "Makes this argument an `input` or an `output`, as in does the file/folder needs to be read or written. `input` by default.",
        "example" : [
          {
            "example" : "- name: --my_output_file\n  type: file\n  direction: output\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "example" : [
          {
            "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.3"
      },
      {
        "name" : "must_exist",
        "type" : "Boolean",
        "description" : "Checks whether the file or folder exists. For input files, this check will happen before the execution of the script, while for output files the check will happen afterwards.",
        "example" : [
          {
            "example" : "- name: --my_file\n  type: file\n  must_exist: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "default",
        "type" : "OneOrMore of Path",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_file\n  type: file\n  default: data.csv\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of Path",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_file\n  type: file\n  example: data.csv\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "multiple_sep",
        "type" : "String",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_files\n  type: file\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_files=firstFile.csv,anotherFile.csv,yetAnother.csv",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_files\n  type: file\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_files=firstFile.csv:anotherFile.csv:yetAnother.csv",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the argument."
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_file\n  type: file\n  required: true\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "boolean_false" : [
      {
        "name" : "__this__",
        "type" : "BooleanFalseArgument",
        "hierarchy" : [
          "io.viash.functionality.arguments.BooleanFalseArgument",
          "io.viash.functionality.arguments.BooleanArgumentBase",
          "io.viash.functionality.arguments.Argument"
        ],
        "description" : "An argument of the `boolean_false` type acts like an inverted `boolean` flag with a default value of `true`. When called as an argument it sets the `boolean` to `false`.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --no-log\n    type: boolean_false\n    description: Disable logging\n    alternatives: [\"-nl\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--no-log`, `-n` or `no-log`. The number of dashes determines how values can be passed:  \n\n  - `--no-log` is a long option, which can be passed with `executable_name --no-log`\n  - `-n` is a short option, which can be passed with `executable_name -n`\n  - `no-log` is an argument, which can be passed with `executable_name no-log`  \n"
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "example" : [
          {
            "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.3"
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the argument."
      }
    ],
    "argument" : [
      {
        "name" : "__this__",
        "type" : "Argument",
        "hierarchy" : [
          "io.viash.functionality.arguments.Argument"
        ],
        "description" : "For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:  \n\n - @[string](arg_string)\n - @[file](arg_file)\n - @[integer](arg_integer)\n - @[double](arg_double)\n - @[boolean](arg_boolean)\n - @[boolean_true](arg_boolean_true)\n - @[boolean_false](arg_boolean_false)\n",
        "example" : [
          {
            "example" : "arguments:\n  - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    direction: output\n    required: false\n    multiple: true\n    multiple_sep: \",\"\n  - name: --bar\n    type: string\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "boolean_true" : [
      {
        "name" : "__this__",
        "type" : "BooleanTrueArgument",
        "hierarchy" : [
          "io.viash.functionality.arguments.BooleanTrueArgument",
          "io.viash.functionality.arguments.BooleanArgumentBase",
          "io.viash.functionality.arguments.Argument"
        ],
        "description" : "An argument of the `boolean_true` type acts like a `boolean` flag with a default value of `false`. When called as an argument it sets the `boolean` to `true`.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --silent\n    type: boolean_true\n    description: Ignore console output\n    alternatives: [\"-s\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--silent`, `-s` or `silent`. The number of dashes determines how values can be passed:  \n\n  - `--silent` is a long option, which can be passed with `executable_name --silent`\n  - `-s` is a short option, which can be passed with `executable_name -s`\n  - `silent` is an argument, which can be passed with `executable_name silent`  \n"
      },
      {
        "name" : "info",
        "type" : "Json",
        "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
        "example" : [
          {
            "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
            "format" : "yaml"
          }
        ],
        "since" : "Viash 0.6.3"
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the type of the argument."
      }
    ]
  },
  "resources" : {
    "cSharpScript" : [
      {
        "name" : "__this__",
        "type" : "CSharpScript",
        "hierarchy" : [
          "io.viash.functionality.resources.CSharpScript",
          "io.viash.functionality.resources.Script",
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "An executable C# script.\nWhen defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in functionality.test_resources, all entries will be executed during `viash test`."
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`."
      },
      {
        "name" : "text",
        "type" : "Option of String",
        "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`."
      },
      {
        "name" : "is_executable",
        "type" : "Option of Boolean",
        "description" : "Whether the resulting resource file should be made executable."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the resource as a C# script."
      },
      {
        "name" : "dest",
        "type" : "Option of String",
        "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter."
      }
    ],
    "pythonScript" : [
      {
        "name" : "__this__",
        "type" : "PythonScript",
        "hierarchy" : [
          "io.viash.functionality.resources.PythonScript",
          "io.viash.functionality.resources.Script",
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "An executable Python script.\nWhen defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in functionality.test_resources, all entries will be executed during `viash test`."
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`."
      },
      {
        "name" : "text",
        "type" : "Option of String",
        "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`."
      },
      {
        "name" : "is_executable",
        "type" : "Option of Boolean",
        "description" : "Whether the resulting resource file should be made executable."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the resource as a Python script."
      },
      {
        "name" : "dest",
        "type" : "Option of String",
        "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter."
      }
    ],
    "plainFile" : [
      {
        "name" : "__this__",
        "type" : "PlainFile",
        "hierarchy" : [
          "io.viash.functionality.resources.PlainFile",
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "A plain file. This can only be used as a supporting resource for the main script or unit tests."
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`."
      },
      {
        "name" : "text",
        "type" : "Option of String",
        "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`."
      },
      {
        "name" : "is_executable",
        "type" : "Option of Boolean",
        "description" : "Whether the resulting resource file should be made executable."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the resource as a plain file."
      },
      {
        "name" : "dest",
        "type" : "Option of String",
        "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter."
      }
    ],
    "resource" : [
      {
        "name" : "__this__",
        "type" : "Resource",
        "hierarchy" : [
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "Resources are files that support the component. The first resource should be @[a script](scripting_languages) that will be executed when the functionality is run. Additional resources will be copied to the same directory.\n\nCommon properties:\n\n * type: `file` / `r_script` / `python_script` / `bash_script` / `javascript_script` / `scala_script` / `csharp_script`, specifies the type of the resource. The first resource cannot be of type `file`. When the type is not specified, the default type is simply `file`.\n * dest: filename, the resulting name of the resource.  From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.\n * path: `path/to/file`, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.\n * text: ...multiline text..., the content of the resulting file specified as a string. Mutually exclusive with `path`.\n * is_executable: `true` / `false`, whether the resulting resource file should be made executable.\n",
        "example" : [
          {
            "example" : "resources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "bashScript" : [
      {
        "name" : "__this__",
        "type" : "BashScript",
        "hierarchy" : [
          "io.viash.functionality.resources.BashScript",
          "io.viash.functionality.resources.Script",
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "An executable Bash script.\nWhen defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in functionality.test_resources, all entries will be executed during `viash test`."
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`."
      },
      {
        "name" : "text",
        "type" : "Option of String",
        "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`."
      },
      {
        "name" : "is_executable",
        "type" : "Option of Boolean",
        "description" : "Whether the resulting resource file should be made executable."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the resource as a Bash script."
      },
      {
        "name" : "dest",
        "type" : "Option of String",
        "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter."
      }
    ],
    "scalaScript" : [
      {
        "name" : "__this__",
        "type" : "ScalaScript",
        "hierarchy" : [
          "io.viash.functionality.resources.ScalaScript",
          "io.viash.functionality.resources.Script",
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "An executable Scala script.\nWhen defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in functionality.test_resources, all entries will be executed during `viash test`."
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`."
      },
      {
        "name" : "text",
        "type" : "Option of String",
        "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`."
      },
      {
        "name" : "is_executable",
        "type" : "Option of Boolean",
        "description" : "Whether the resulting resource file should be made executable."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the resource as a Scala script."
      },
      {
        "name" : "dest",
        "type" : "Option of String",
        "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter."
      }
    ],
    "nextflowScript" : [
      {
        "name" : "__this__",
        "type" : "NextflowScript",
        "hierarchy" : [
          "io.viash.functionality.resources.NextflowScript",
          "io.viash.functionality.resources.Script",
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "A Nextflow script. Work in progress; added mainly for annotation at the moment."
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`."
      },
      {
        "name" : "text",
        "type" : "Option of String",
        "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`."
      },
      {
        "name" : "entrypoint",
        "type" : "Option of String",
        "description" : "The name of the workflow to be executed."
      },
      {
        "name" : "is_executable",
        "type" : "Option of Boolean",
        "description" : "Whether the resulting resource file should be made executable."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the resource as a Nextflow script."
      },
      {
        "name" : "dest",
        "type" : "Option of String",
        "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter."
      }
    ],
    "rScript" : [
      {
        "name" : "__this__",
        "type" : "RScript",
        "hierarchy" : [
          "io.viash.functionality.resources.RScript",
          "io.viash.functionality.resources.Script",
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "An executable R script.\nWhen defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in functionality.test_resources, all entries will be executed during `viash test`."
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`."
      },
      {
        "name" : "text",
        "type" : "Option of String",
        "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`."
      },
      {
        "name" : "is_executable",
        "type" : "Option of Boolean",
        "description" : "Whether the resulting resource file should be made executable."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the resource as a R script."
      },
      {
        "name" : "dest",
        "type" : "Option of String",
        "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter."
      }
    ],
    "executable" : [
      {
        "name" : "__this__",
        "type" : "Executable",
        "hierarchy" : [
          "io.viash.functionality.resources.Executable",
          "io.viash.functionality.resources.Script",
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "An executable file."
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`."
      },
      {
        "name" : "text",
        "type" : "Option of String",
        "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`."
      },
      {
        "name" : "is_executable",
        "type" : "Option of Boolean",
        "description" : "Whether the resulting resource file should be made executable."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the resource as an executable."
      },
      {
        "name" : "dest",
        "type" : "Option of String",
        "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter."
      }
    ],
    "javaScriptScript" : [
      {
        "name" : "__this__",
        "type" : "JavaScriptScript",
        "hierarchy" : [
          "io.viash.functionality.resources.JavaScriptScript",
          "io.viash.functionality.resources.Script",
          "io.viash.functionality.resources.Resource"
        ],
        "description" : "An executable JavaScript script.\nWhen defined in functionality.resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in functionality.test_resources, all entries will be executed during `viash test`."
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`."
      },
      {
        "name" : "text",
        "type" : "Option of String",
        "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`."
      },
      {
        "name" : "is_executable",
        "type" : "Option of Boolean",
        "description" : "Whether the resulting resource file should be made executable."
      },
      {
        "name" : "type",
        "type" : "String",
        "description" : "Specifies the resource as a JavaScript script."
      },
      {
        "name" : "dest",
        "type" : "Option of String",
        "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter."
      }
    ]
  },
  "nextflowParameters" : {
    "nextflowDirectives" : [
      {
        "name" : "__this__",
        "type" : "NextflowDirectives",
        "hierarchy" : [
          "io.viash.platforms.nextflow.NextflowDirectives"
        ],
        "description" : "Directives are optional settings that affect the execution of the process.\n",
        "example" : [
          {
            "example" : "directives:\n    container: rocker/r-ver:4.1\n    label: highcpu\n    cpus: 4\n    memory: 16 GB",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "beforeScript",
        "type" : "Option of String",
        "description" : "The `beforeScript` directive allows you to execute a custom (Bash) snippet before the main process script is run. This may be useful to initialise the underlying cluster environment or for other custom initialisation.\n\nSee [`beforeScript`](https://www.nextflow.io/docs/latest/process.html#beforeScript).\n",
        "example" : [
          {
            "example" : "source /cluster/bin/setup",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "module",
        "type" : "OneOrMore of String",
        "description" : "Environment Modules is a package manager that allows you to dynamically configure your execution environment and easily switch between multiple versions of the same software tool.\n\nIf it is available in your system you can use it with Nextflow in order to configure the processes execution environment in your pipeline.\n\nIn a process definition you can use the `module` directive to load a specific module version to be used in the process execution environment.\n\nSee [`module`](https://www.nextflow.io/docs/latest/process.html#module).\n",
        "example" : [
          {
            "example" : "\"ncbi-blast/2.2.27\"",
            "format" : "yaml"
          },
          {
            "example" : "\"ncbi-blast/2.2.27:t_coffee/10.0\"",
            "format" : "yaml"
          },
          {
            "example" : "[\"ncbi-blast/2.2.27\", \"t_coffee/10.0\"]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "queue",
        "type" : "OneOrMore of String",
        "description" : "The `queue` directory allows you to set the queue where jobs are scheduled when using a grid based executor in your pipeline.\n\nSee [`queue`](https://www.nextflow.io/docs/latest/process.html#queue).\n",
        "example" : [
          {
            "example" : "\"long\"",
            "format" : "yaml"
          },
          {
            "example" : "\"short,long\"",
            "format" : "yaml"
          },
          {
            "example" : "[\"short\", \"long\"]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "label",
        "type" : "OneOrMore of String",
        "description" : "The `label` directive allows the annotation of processes with mnemonic identifier of your choice.\n\nSee [`label`](https://www.nextflow.io/docs/latest/process.html#label).\n",
        "example" : [
          {
            "example" : "\"big_mem\"",
            "format" : "yaml"
          },
          {
            "example" : "\"big_cpu\"",
            "format" : "yaml"
          },
          {
            "example" : "[\"big_mem\", \"big_cpu\"]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "container",
        "type" : "Option[Either[Map of String,String,String]]",
        "description" : "The `container` directive allows you to execute the process script in a Docker container.\n\nIt requires the Docker daemon to be running in machine where the pipeline is executed, i.e. the local machine when using the local executor or the cluster nodes when the pipeline is deployed through a grid executor.\n\nViash implements allows either a string value or a map. In case a map is used, the allowed keys are: `registry`, `image`, and `tag`. The `image` value must be specified.\n\nSee [`container`](https://www.nextflow.io/docs/latest/process.html#container).\n",
        "example" : [
          {
            "example" : "\"foo/bar:tag\"",
            "format" : "yaml"
          },
          {
            "example" : "[ registry: \"reg\", image: \"im\", tag: \"ta\" ]",
            "format" : "yaml",
            "description" : "This is transformed to `\"reg/im:ta\"`:"
          },
          {
            "example" : "[ image: \"im\" ]",
            "format" : "yaml",
            "description" : "This is transformed to `\"im:latest\"`:"
          }
        ]
      },
      {
        "name" : "publishDir",
        "type" : "OneOrMore[Either[String,Map of String,String]]",
        "description" : "The `publishDir` directive allows you to publish the process output files to a specified folder.\n\nViash implements this directive as a plain string or a map. The allowed keywords for the map are: `path`, `mode`, `overwrite`, `pattern`, `saveAs`, `enabled`. The `path` key and value are required.\nThe allowed values for `mode` are: `symlink`, `rellink`, `link`, `copy`, `copyNoFollow`, `move`.\n\nSee [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir).\n",
        "example" : [
          {
            "example" : "[]",
            "format" : "yaml"
          },
          {
            "example" : "[ [ path: \"foo\", enabled: true ], [ path: \"bar\", enabled: false ] ]",
            "format" : "yaml"
          },
          {
            "example" : "\"/path/to/dir\"",
            "format" : "yaml",
            "description" : "This is transformed to `[[ path: \"/path/to/dir\" ]]`:"
          },
          {
            "example" : "[ path: \"/path/to/dir\", mode: \"cache\" ]",
            "format" : "yaml",
            "description" : "This is transformed to `[[ path: \"/path/to/dir\", mode: \"cache\" ]]`:"
          }
        ]
      },
      {
        "name" : "maxForks",
        "type" : "Option[Either of String,Int]",
        "description" : "The `maxForks` directive allows you to define the maximum number of process instances that can be executed in parallel. By default this value is equals to the number of CPU cores available minus 1.\n\nIf you want to execute a process in a sequential manner, set this directive to one.\n\nSee [`maxForks`](https://www.nextflow.io/docs/latest/process.html#maxforks).\n",
        "example" : [
          {
            "example" : "1",
            "format" : "yaml"
          },
          {
            "example" : "3",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "maxErrors",
        "type" : "Option[Either of String,Int]",
        "description" : "The `maxErrors` directive allows you to specify the maximum number of times a process can fail when using the `retry` error strategy. By default this directive is disabled.\n\nSee [`maxErrors`](https://www.nextflow.io/docs/latest/process.html#maxerrors).\n",
        "example" : [
          {
            "example" : "1",
            "format" : "yaml"
          },
          {
            "example" : "3",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "cpus",
        "type" : "Option[Either of Int,String]",
        "description" : "The `cpus` directive allows you to define the number of (logical) CPU required by the process' task.\n\nSee [`cpus`](https://www.nextflow.io/docs/latest/process.html#cpus).\n",
        "example" : [
          {
            "example" : "1",
            "format" : "yaml"
          },
          {
            "example" : "10",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "accelerator",
        "type" : "Map of String,String",
        "description" : "The `accelerator` directive allows you to specify the hardware accelerator requirement for the task execution e.g. GPU processor.\n\nViash implements this directive as a map with accepted keywords: `type`, `limit`, `request`, and `runtime`.\n\nSee [`accelerator`](https://www.nextflow.io/docs/latest/process.html#accelerator).\n",
        "example" : [
          {
            "example" : "[ limit: 4, type: \"nvidia-tesla-k80\" ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "time",
        "type" : "Option of String",
        "description" : "The `time` directive allows you to define how long a process is allowed to run.\n\nSee [`time`](https://www.nextflow.io/docs/latest/process.html#time).\n",
        "example" : [
          {
            "example" : "\"1h\"",
            "format" : "yaml"
          },
          {
            "example" : "\"2days\"",
            "format" : "yaml"
          },
          {
            "example" : "\"1day 6hours 3minutes 30seconds\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "afterScript",
        "type" : "Option of String",
        "description" : "The `afterScript` directive allows you to execute a custom (Bash) snippet immediately after the main process has run. This may be useful to clean up your staging area.\n\nSee [`afterScript`](https://www.nextflow.io/docs/latest/process.html#afterscript).\n",
        "example" : [
          {
            "example" : "source /cluster/bin/cleanup",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "executor",
        "type" : "Option of String",
        "description" : "The `executor` defines the underlying system where processes are executed. By default a process uses the executor defined globally in the nextflow.config file.\n\nThe `executor` directive allows you to configure what executor has to be used by the process, overriding the default configuration. The following values can be used:\n\n| Name | Executor |\n|------|----------|\n| awsbatch | The process is executed using the AWS Batch service. | \n| azurebatch | The process is executed using the Azure Batch service. | \n| condor | The process is executed using the HTCondor job scheduler. | \n| google-lifesciences | The process is executed using the Google Genomics Pipelines service. | \n| ignite | The process is executed using the Apache Ignite cluster. | \n| k8s | The process is executed using the Kubernetes cluster. | \n| local | The process is executed in the computer where Nextflow is launched. | \n| lsf | The process is executed using the Platform LSF job scheduler. | \n| moab | The process is executed using the Moab job scheduler. | \n| nqsii | The process is executed using the NQSII job scheduler. | \n| oge | Alias for the sge executor. | \n| pbs | The process is executed using the PBS/Torque job scheduler. | \n| pbspro | The process is executed using the PBS Pro job scheduler. | \n| sge | The process is executed using the Sun Grid Engine / Open Grid Engine. | \n| slurm | The process is executed using the SLURM job scheduler. | \n| tes | The process is executed using the GA4GH TES service. | \n| uge | Alias for the sge executor. |\n\nSee [`executor`](https://www.nextflow.io/docs/latest/process.html#executor).\n",
        "example" : [
          {
            "example" : "\"local\"",
            "format" : "yaml"
          },
          {
            "example" : "\"sge\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "containerOptions",
        "type" : "OneOrMore of String",
        "description" : "The `containerOptions` directive allows you to specify any container execution option supported by the underlying container engine (ie. Docker, Singularity, etc). This can be useful to provide container settings only for a specific process e.g. mount a custom path.\n\nSee [`containerOptions`](https://www.nextflow.io/docs/latest/process.html#containeroptions).\n",
        "example" : [
          {
            "example" : "\"--foo bar\"",
            "format" : "yaml"
          },
          {
            "example" : "[\"--foo bar\", \"-f b\"]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "disk",
        "type" : "Option of String",
        "description" : "The `disk` directive allows you to define how much local disk storage the process is allowed to use.\n\nSee [`disk`](https://www.nextflow.io/docs/latest/process.html#disk).\n",
        "example" : [
          {
            "example" : "\"1 GB\"",
            "format" : "yaml"
          },
          {
            "example" : "\"2TB\"",
            "format" : "yaml"
          },
          {
            "example" : "\"3.2KB\"",
            "format" : "yaml"
          },
          {
            "example" : "\"10.B\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "tag",
        "type" : "Option of String",
        "description" : "The `tag` directive allows you to associate each process execution with a custom label, so that it will be easier to identify them in the log file or in the trace execution report.\n\nSee [`tag`](https://www.nextflow.io/docs/latest/process.html#tag).\n",
        "example" : [
          {
            "example" : "\"foo\"",
            "format" : "yaml"
          },
          {
            "example" : "'$id'",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "conda",
        "type" : "OneOrMore of String",
        "description" : "The `conda` directive allows for the definition of the process dependencies using the Conda package manager.\n\nNextflow automatically sets up an environment for the given package names listed by in the `conda` directive.\n\nSee [`conda`](https://www.nextflow.io/docs/latest/process.html#conda).\n",
        "example" : [
          {
            "example" : "\"bwa=0.7.15\"",
            "format" : "yaml"
          },
          {
            "example" : "\"bwa=0.7.15 fastqc=0.11.5\"",
            "format" : "yaml"
          },
          {
            "example" : "[\"bwa=0.7.15\", \"fastqc=0.11.5\"]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "machineType",
        "type" : "Option of String",
        "description" : " The `machineType` can be used to specify a predefined Google Compute Platform machine type when running using the Google Life Sciences executor.\n\nSee [`machineType`](https://www.nextflow.io/docs/latest/process.html#machinetype).\n",
        "example" : [
          {
            "example" : "\"n1-highmem-8\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "stageInMode",
        "type" : "Option of String",
        "description" : "The `stageInMode` directive defines how input files are staged-in to the process work directory. The following values are allowed:\n\n| Value | Description |\n|-------|-------------| \n| copy | Input files are staged in the process work directory by creating a copy. | \n| link | Input files are staged in the process work directory by creating an (hard) link for each of them. | \n| symlink | Input files are staged in the process work directory by creating a symbolic link with an absolute path for each of them (default). | \n| rellink | Input files are staged in the process work directory by creating a symbolic link with a relative path for each of them. | \n\nSee [`stageInMode`](https://www.nextflow.io/docs/latest/process.html#stageinmode).\n",
        "example" : [
          {
            "example" : "\"copy\"",
            "format" : "yaml"
          },
          {
            "example" : "\"link\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "cache",
        "type" : "Option[Either of Boolean,String]",
        "description" : "The `cache` directive allows you to store the process results to a local cache. When the cache is enabled and the pipeline is launched with the resume option, any following attempt to execute the process, along with the same inputs, will cause the process execution to be skipped, producing the stored data as the actual results.\n\nThe caching feature generates a unique key by indexing the process script and inputs. This key is used to identify univocally the outputs produced by the process execution.\n\nThe `cache` is enabled by default, you can disable it for a specific process by setting the cache directive to `false`.\n\nAccepted values are: `true`, `false`, `\"deep\"`, and `\"lenient\"`.\n\nSee [`cache`](https://www.nextflow.io/docs/latest/process.html#cache).\n",
        "example" : [
          {
            "example" : "true",
            "format" : "yaml"
          },
          {
            "example" : "false",
            "format" : "yaml"
          },
          {
            "example" : "\"deep\"",
            "format" : "yaml"
          },
          {
            "example" : "\"lenient\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "pod",
        "type" : "OneOrMore[Map of String,String]",
        "description" : "The `pod` directive allows the definition of pods specific settings, such as environment variables, secrets and config maps when using the Kubernetes executor.\n\nSee [`pod`](https://www.nextflow.io/docs/latest/process.html#pod).\n",
        "example" : [
          {
            "example" : "[ label: \"key\", value: \"val\" ]",
            "format" : "yaml"
          },
          {
            "example" : "[ annotation: \"key\", value: \"val\" ]",
            "format" : "yaml"
          },
          {
            "example" : "[ env: \"key\", value: \"val\" ]",
            "format" : "yaml"
          },
          {
            "example" : "[ [label: \"l\", value: \"v\"], [env: \"e\", value: \"v\"]]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "penv",
        "type" : "Option of String",
        "description" : "The `penv` directive allows you to define the parallel environment to be used when submitting a parallel task to the SGE resource manager.\n\nSee [`penv`](https://www.nextflow.io/docs/latest/process.html#penv).\n",
        "example" : [
          {
            "example" : "\"smp\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "scratch",
        "type" : "Option[Either of Boolean,String]",
        "description" : "The `scratch` directive allows you to execute the process in a temporary folder that is local to the execution node.\n\nSee [`scratch`](https://www.nextflow.io/docs/latest/process.html#scratch).\n",
        "example" : [
          {
            "example" : "true",
            "format" : "yaml"
          },
          {
            "example" : "\"/path/to/scratch\"",
            "format" : "yaml"
          },
          {
            "example" : "'$MY_PATH_TO_SCRATCH'",
            "format" : "yaml"
          },
          {
            "example" : "\"ram-disk\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "storeDir",
        "type" : "Option of String",
        "description" : "The `storeDir` directive allows you to define a directory that is used as a permanent cache for your process results.\n\nSee [`storeDir`](https://www.nextflow.io/docs/latest/process.html#storeDir).\n",
        "example" : [
          {
            "example" : "\"/path/to/storeDir\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "maxRetries",
        "type" : "Option[Either of String,Int]",
        "description" : "The `maxRetries` directive allows you to define the maximum number of times a process instance can be re-submitted in case of failure. This value is applied only when using the retry error strategy. By default only one retry is allowed.\n\nSee [`maxRetries`](https://www.nextflow.io/docs/latest/process.html#maxretries).\n",
        "example" : [
          {
            "example" : "1",
            "format" : "yaml"
          },
          {
            "example" : "3",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "echo",
        "type" : "Option[Either of Boolean,String]",
        "description" : "By default the stdout produced by the commands executed in all processes is ignored. By setting the `echo` directive to true, you can forward the process stdout to the current top running process stdout file, showing it in the shell terminal.\n \nSee [`echo`](https://www.nextflow.io/docs/latest/process.html#echo).\n",
        "example" : [
          {
            "example" : "true",
            "format" : "yaml"
          },
          {
            "example" : "false",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "errorStrategy",
        "type" : "Option of String",
        "description" : "The `errorStrategy` directive allows you to define how an error condition is managed by the process. By default when an error status is returned by the executed script, the process stops immediately. This in turn forces the entire pipeline to terminate.\n\nTable of available error strategies:\n| Name | Executor |\n|------|----------|\n| `terminate` | Terminates the execution as soon as an error condition is reported. Pending jobs are killed (default) |\n| `finish` | Initiates an orderly pipeline shutdown when an error condition is raised, waiting the completion of any submitted job. |\n| `ignore` | Ignores processes execution errors. |\n| `retry` | Re-submit for execution a process returning an error condition. |\n\nSee [`errorStrategy`](https://www.nextflow.io/docs/latest/process.html#errorstrategy).\n",
        "example" : [
          {
            "example" : "\"terminate\"",
            "format" : "yaml"
          },
          {
            "example" : "\"finish\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "memory",
        "type" : "Option of String",
        "description" : "The `memory` directive allows you to define how much memory the process is allowed to use.\n\nSee [`memory`](https://www.nextflow.io/docs/latest/process.html#memory).\n",
        "example" : [
          {
            "example" : "\"1 GB\"",
            "format" : "yaml"
          },
          {
            "example" : "\"2TB\"",
            "format" : "yaml"
          },
          {
            "example" : "\"3.2KB\"",
            "format" : "yaml"
          },
          {
            "example" : "\"10.B\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "stageOutMode",
        "type" : "Option of String",
        "description" : "The `stageOutMode` directive defines how output files are staged-out from the scratch directory to the process work directory. The following values are allowed:\n\n| Value | Description |\n|-------|-------------| \n| copy | Output files are copied from the scratch directory to the work directory. | \n| move | Output files are moved from the scratch directory to the work directory. | \n| rsync | Output files are copied from the scratch directory to the work directory by using the rsync utility. |\n\nSee [`stageOutMode`](https://www.nextflow.io/docs/latest/process.html#stageoutmode).\n",
        "example" : [
          {
            "example" : "\"copy\"",
            "format" : "yaml"
          },
          {
            "example" : "\"link\"",
            "format" : "yaml"
          }
        ]
      }
    ],
    "nextflowAuto" : [
      {
        "name" : "__this__",
        "type" : "NextflowAuto",
        "hierarchy" : [
          "io.viash.platforms.nextflow.NextflowAuto"
        ],
        "description" : "Automated processing flags which can be toggled on or off."
      },
      {
        "name" : "simplifyInput",
        "type" : "Boolean",
        "description" : "If `true`, an input tuple only containing only a single File (e.g. `[\"foo\", file(\"in.h5ad\")]`) is automatically transformed to a map (i.e. `[\"foo\", [ input: file(\"in.h5ad\") ] ]`).\n\nDefault: `true`.\n"
      },
      {
        "name" : "simplifyOutput",
        "type" : "Boolean",
        "description" : "If `true`, an output tuple containing a map with a File (e.g. `[\"foo\", [ output: file(\"out.h5ad\") ] ]`) is automatically transformed to a map (i.e. `[\"foo\", file(\"out.h5ad\")]`).\n\nDefault: `true`.\n"
      },
      {
        "name" : "publish",
        "type" : "Boolean",
        "description" : "If `true`, the module's outputs are automatically published to `params.publishDir`.\nWill throw an error if `params.publishDir` is not defined.\n\nDefault: `false`.\n"
      },
      {
        "name" : "transcript",
        "type" : "Boolean",
        "description" : "If `true`, the module's transcripts from `work/` are automatically published to `params.transcriptDir`.\nIf not defined, `params.publishDir + \"/_transcripts\"` will be used.\nWill throw an error if neither are defined.\n\nDefault: `false`.\n"
      }
    ],
    "nextflowConfig" : [
      {
        "name" : "__this__",
        "type" : "NextflowConfig",
        "hierarchy" : [
          "io.viash.platforms.nextflow.NextflowConfig"
        ],
        "description" : "Allows tweaking how the Nextflow Config file is generated."
      },
      {
        "name" : "labels",
        "type" : "ListMap of String,String",
        "description" : "A series of default labels to specify memory and cpu constraints.\n\nThe default memory labels are defined as \"mem1gb\", \"mem2gb\", \"mem4gb\", ... upto \"mem512tb\" and follows powers of 2.\nThe default cpu labels are defined as \"cpu1\", \"cpu2\", \"cpu5\", \"cpu10\", ... upto \"cpu1000\" and follows a semi logarithmic scale (1, 2, 5 per decade).\n\nConceptually it is possible for a Viash Config to overwrite the full labels parameter, however likely it is more efficient to add additional labels\nin the Viash Project with a config mod.\n",
        "example" : [
          {
            "example" : "labels:\n  lowmem: \"memory = 4.GB\"\n  lowcpu: \"cpus = 4\"\n  midmem: \"memory = 25.GB\"\n  midcpu: \"cpus = 10\"\n  highmem: \"memory = 50.GB\"\n  highcpu: \"cpus = 20\"\n  vhighmem: \"memory = 100.GB\"\n  vhighcpu: \"cpus = 40\"\n",
            "format" : "yaml",
            "description" : "Replace the default labels with a different set of labels"
          },
          {
            "example" : "-c '.platforms[.type == \"nextflow\"].config.labels.lowmem := \"memory = 4.GB\";.platforms[.type == \"nextflow\"].config.labels.lowcpu := \"cpus = 4\"'",
            "format" : "viash_config_mod",
            "description" : "Add 'lowmem' and 'lowcpu' to the default labels by using a config mod"
          },
          {
            "example" : "config_mods: |\n  .platforms[.type == \"nextflow\"].config.labels.lowmem := \"memory = 4.GB\"\n  .platforms[.type == \"nextflow\"].config.labels.lowcpu := \"cpus = 4\"\n",
            "format" : "viash_project_file",
            "description" : "Add 'lowmem' and 'lowcpu' to the default labels by using the Viash Project file"
          },
          {
            "example" : "config_mods: |\n  .platforms[.type == \"nextflow\"].config.labels := { lowmem: \"memory = 4.GB\", lowcpu: \"cpus = 4\", midmem: \"memory = 25.GB\", midcpu: \"cpus = 10\", highmem: \"memory = 50.GB\", highcpu: \"cpus = 20\", vhighmem: \"memory = 100.GB\", vhighcpu: \"cpus = 40\" }\n",
            "format" : "viash_project_file",
            "description" : "Replace the default labels with a different set of labels by using the Viash Project file"
          }
        ]
      }
    ]
  }
}