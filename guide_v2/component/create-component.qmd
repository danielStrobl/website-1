---
title: Create a new component
search: true

engine: knitr
---

{{< include ../../includes/_language_chooser.qmd >}}

```{r echo=FALSE, output="asis"}
repo_path <- system("git rev-parse --show-toplevel", intern = TRUE)
source(paste0(repo_path, "/includes/_r_helper.R"))
```

A Viash component can be translated into one or more platforms: Native, Docker, Nextflow. Each of these platforms result in a different artifact:

* When targeting a [native platform](/reference/config/platforms/NativePlatform.html), a single executable is generated which runs natively on the host system. This assumes all dependencies are already installed by the user and is therefore not reproducible.
* When a [Docker platform](/reference/config/platforms/DockerPlatform.html) is used, also a single executable is generated but it runs inside a Docker container instead. The Docker platform specification can help you install custom dependencies and will take care of auto-mounting input/output files.
* Using the [Nextflow platform](/reference/config/platforms/NextflowVdsl3Platform.html) generates a Nextflow module which can be used as a standalone workflow or as a module in a larger workflow. 

Below we will create our first baseline Viash component using any of the languages natively supported by Viash.

## Requirements

In order to run any of the artifacts, you need the following dependencies:

* To run a **native** executable, you will need to have the required packages installed on your system depending on your chosen scripting language and component. In essence: you're on your own.
* To run a **Docker** executable, the only requirement is to have Docker installed on your system. This is one of the biggest benefits of targeting the Docker platform. You can find instructions on how to install Docker for your OS on the [Viash installation page](/installation/).
* To run a **Nextflow** workflow, you need to have Nextflow and one of Docker, Singularity or Podman installed.Follow the instructions on [Nextflow's homepage](https://www.nextflow.io/) to install it on your system if you haven't done so already.
 
## Your first component

When creating a new Viash component, you can usually start off with a pre-existing script. 

## Create a script
For this example, we'll start from the script below that simply copies an input file to an output destination. 

To start off, create a script by following the instructions below based on your preferred scripting language.

::: {.panel-tabset}

```{r echo=FALSE, output="asis"}
pwalk(langs, function(id, label, script) {
  cat("## ", label, "\n")

  # create dir
  dir.create(paste0("tmp/", id), recursive = TRUE, showWarnings = FALSE)

  # copy source files
  config_path <- paste0("tmp/", id, "/config.vsh.yaml")
  script_path <- paste0("tmp/", id, "/", script)
  file.copy(
    paste0(repo_path, "/src/guide/viash_component/my_copy_", id, "/config.vsh.yaml"),
    config_path
  )
  file.copy(
    paste0(repo_path, "/src/guide/viash_component/my_copy_", id, "/", script),
    script_path
  )
  
  # generate markdown
  md <- glue::glue("

Create a new file named `{script}` and copy the following content inside of it. This script will copy an input file to an output destination.

{quo}{id}
{paste(readr::read_lines(script_path), collapse = \"\n\")}
{quo}


")
  cat(md)
})
```

:::

:::{.callout-note}
The `par` variable(s) appear to be hard coded, but they're not! When running this script with Viash, Viash will strip away the section between `VIASH START` and `VIASH END`, and replace it with parameter values at runtime. The values included in this script are thus entirely for development and debugging purposes. More information on how this works will be given in the next section.
:::


### Create a config
 
A [Viash config file](/reference/config/overview.html) is a YAML file that describes the functionality of a component and the platform(s) it targets.
Create a file name `config.vsh.yaml` and add the contents below based on your chosen scripting language.

::: {.panel-tabset}
## Bash

```python
print_file_contents("/src/guide/viash_component/my_copy_bash/config.vsh.yaml", "yaml", False, replace_dict={"copy_bash": "copy"})
```

## C\#

```python
print_file_contents("/src/guide/viash_component/my_copy_csharp/config.vsh.yaml", "yaml", False, replace_dict={"copy_csharp": "copy"})
```

## JavaScript

```python
print_file_contents("/src/guide/viash_component/my_copy_js/config.vsh.yaml", "yaml", False, replace_dict={"copy_js": "copy"})
```

## Python

```python
print_file_contents("/src/guide/viash_component/my_copy_python/config.vsh.yaml", "yaml", False, replace_dict={"copy_python": "copy"})
```

## Scala

```python
print_file_contents("/src/guide/viash_component/my_copy_scala/config.vsh.yaml", "yaml", False, replace_dict={"copy_scala": "copy"})
```

## R

```python
print_file_contents("/src/guide/viash_component/my_copy_r/config.vsh.yaml", "yaml", False, replace_dict={"copy_r": "copy"})
```

:::

Here's a breakdown of the different sections:

- `functionality` describes what the component does and the resources it needs. It contains the `name`, a short `description` and more importantly, the `arguments` and `resources` the component uses.
  - `arguments` contains all arguments the component accepts and will be passed to the script.
  - `resources` holds references to all necessary files and folders to make the component work.
- `platforms` lists what platforms the component can target. As is, this component is defined to output all three currently supported platforms.

## Run the component

With the two necessary files present to create a component, you can call upon Viash to generate a temporary executable and run it:

```bash
viash run config.vsh.yaml -- --help
```

You can run the component by providing a value for `--input` and `--output`:

```bash
echo hello > foo.txt
viash run your_first_component/config.vsh.yaml -- --input foo.txt --output bar.txt
```

:::{.callout-note}
The double dash (`--`) between the viash command and the arguments is used to signify the end of the arguments passed to viash and the start of those passed to the component. If you forgot to add these, you'll get an error similar to this:   
  
```bash
[scallop] Error: Unknown option 'input'
```
:::


## What's next?

To learn how to use Viash to build an executable and run it, see the [Building an executable](build-executable.qmd).