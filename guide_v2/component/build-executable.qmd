---
title: Building an executable
search: true
engine: knitr
---

{{< include ../../includes/_language_chooser.qmd >}}

```{r setup, include=FALSE}
repo_path <- system("git rev-parse --show-toplevel", intern = TRUE)
source(paste0(repo_path, "/includes/_r_helper.R"))
source(paste0(repo_path, "/guide_v2/component/_helper.R"))

temp_dir <- tempfile("build_executable")
dir.create(temp_dir, recursive = TRUE, showWarnings = FALSE)
on.exit(unlink(temp_dir, recursive = TRUE), add = TRUE)
```

The following sections discuss how a Viash component can be turned into an executable and how they work.

## Building an executable

We continue with the component created in the [previous section](create-component.qmd).

::: {.panel-tabset}

```{r echo=FALSE, output="asis"}
# TODO: fix download links
# root_url <- "https://raw.githubusercontent.com/viash-io/website/issue_9/download/examples"
root_url <- "https://viash.io/examples"

# download one file to check whether the url is working
# download.file(
#   paste0(root_url, "/my_copy_bash/config.vsh.yaml"),
#   "tmp/check_url.txt"
# )

pwalk(langs, function(id, label, example_config, example_script, ...) {
  cat("## ", label, "\n")

  # create dir
  dir.create(paste0(temp_dir, "/", id), recursive = TRUE, showWarnings = FALSE)

  # copy source files
  config_path <- paste0(temp_dir, "/", id, "/", basename(example_config))
  script_path <- paste0(temp_dir, "/", id, "/", basename(example_script))
  file.copy(example_config, config_path)
  file.copy(example_script, script_path)

  # generate markdown
  qmd <- glue::glue("

{qua}{{.callout-tip}}
You can download the source files by running the following commands in a Bash terminal:

{quo}bash
root_url=\"{root_url}/example_{id}\"

wget \"$root_url/{basename(example_config)}\" -q -O \"{basename(example_config)}\"
wget \"$root_url/{basename(example_script)}\" -q -O \"{basename(example_script)}\"
{quo}
{qua}

Use the [viash build](/reference/viash/build.qmd) command to generate an executable:

{quo}{{bash build-example}}
viash build config.vsh.yaml --output target
{quo}

This will generate an executable in the `target/` directory:

{quo}{{bash view-tree}}
tree
{quo}

")
  cat(run_quarto(qmd, dir = paste0(temp_dir, "/", id)))
})
```

:::


## Displaying the help text

It's often useful to know what arguments an executable expects before trying to run it.


::: {.panel-tabset}
```{r echo=FALSE, output="asis"}

pwalk(langs, function(id, label, example_config, example_script, ...) {
  cat("## ", label, "\n")

  # generate markdown
  qmd <- glue::glue("
To display its documentation, run the executable with just the `--help` argument:

{quo}{{bash exec-help}}
target/example_{id} --help
{quo}
")
  cat(run_quarto(qmd, dir = paste0(temp_dir, "/", id)))
})
```
:::


This executable takes a file as input and will create an output file.

## Running the executable

Running an executable is the same as any other executable on your system.

::: {.panel-tabset}
```{r viash-run-dont-worry-this-takes-a-long-time, echo=FALSE, output="asis"}
pwalk(langs, function(id, label, example_config, example_script, ...) {
  cat("## ", label, "\n")

  exec <- paste0("target/my_copy_", id)

  # generate markdown
  qmd <- glue::glue("
You can run the executable by providing a value for `--input` and `--output`:

{quo}{{bash exec-run}}
target/example_{id} --input config.vsh.yaml --output output.txt
{quo}

This results in the following output:

{quo}{{bash ls-dir}}
ls -l
{quo}

")
  cat(run_quarto(qmd, dir = paste0(temp_dir, "/", id)))
})
```
:::
