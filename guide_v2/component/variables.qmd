---
title: Variables and meta-variables (WIP)
search: true
engine: knitr
---

{{< include ../../includes/_language_chooser.qmd >}}

```{r setup, include=FALSE}
repo_path <- system("git rev-parse --show-toplevel", intern = TRUE)
source(paste0(repo_path, "/includes/_r_helper.R"))
source(paste0(repo_path, "/guide_v2/component/_helper.R"))

temp_dir <- tempfile("variables")
dir.create(temp_dir, recursive = TRUE, showWarnings = FALSE)
on.exit(unlink(temp_dir, recursive = TRUE), add = TRUE)
```


When running [`viash build`](/reference/viash/build.qmd), Viash wraps your script into a Bash executable. When running the executable, the `VIASH START` -- `VIASH END` code block is replaced with a dictionary / map called `par` which contains the passed parameter values.

However, Viash also automatically creates a `meta` variable containing additional information related to the execution.

## Overriding the parameter placeholder
To get insight into how `par` and `meta` are defined, you can run [`viash config inject`](/reference/viash/config.qmd) to replace the current parameter placeholder with an auto-generated parameter placeholder.

::: {.callout-warning}
This will change the contents of your script!
:::

::: {.panel-tabset}

```{r config-inject, echo=FALSE, output="asis"}
pwalk(langs, function(id, label, example_config, example_script, script, ...) {
  cat("## ", label, "\n")

  # create dir
  temp_dir2 <- paste0(temp_dir, "/inject_", id)
  dir.create(temp_dir2, recursive = TRUE, showWarnings = FALSE)

  # copy source files
  config_path <- paste0(temp_dir2, "/", basename(example_config))
  script_path <- paste0(temp_dir2, "/", basename(example_script))
  file.copy(example_config, config_path)
  file.copy(example_script, script_path)

  # generate markdown
  qmd <- glue::glue("

Recall that our script `{script}` looks as follows:

{quo}{{embed, lang='{id}'}}
{script}
{quo}

Running `viash config inject` effectively changes the contents of the script.

{quo}{{bash config-inject}}
viash config inject {basename(example_config)}
{quo}

The updated `{script}` now contains the following code:

{quo}{{embed, lang='{id}'}}
{script}
{quo}

")
  cat(run_quarto(qmd, dir = temp_dir2))
})
```

:::

## `par`

The `par` object (or `par_` environment variables) will contain argument values passed at runtime. For example, passing `--input foo.txt` will result in a `par["input"]` being equal to `"foo.txt"`.

:::{.callout-tip}
Try adding more [arguments](/reference/config/functionality.html#arguments) with different file types to see what effect this has on the resulting placeholder.
:::

## `meta["functionality_name"]`

The value of `.functionality.name` in the config. This can be useful for logging.


```yaml
functionality:
  name: my_component
```

::: {.panel-tabset}

```{r functionality-name, echo=FALSE, output="asis"}
chunks <- list(
  bash = "echo $meta_functionality_name",
  python = 'print(meta["functionality_name"])',
  csharp = 'Console.WriteLine(meta.functionality_name);',
  js = "console.log(meta['functionality_name']);",
  r = 'cat(meta$functionality_name)',
  scala = 'println(meta.functionality_name)'
)

pwalk(langs, function(id, label, script, script_type, container, ...) {
  cat("## ", label, "\n")

  # create dir
  temp_dir2 <- paste0(temp_dir, "/fun_name_", id)
  dir.create(temp_dir2, recursive = TRUE, showWarnings = FALSE)

  config_path <- paste0(temp_dir2, "/config.vsh.yaml")
  config_yaml <- glue::glue("
functionality:
  name: meta_fun_name_{id}
  resources:
    - type: {script_type}
      path: {script}
      text: |
        {chunks[[id]]}
platforms:
  - type: docker
    image: {container}
")
  readr::write_lines(config_yaml, config_path)

  # generate markdown
  qmd <- glue::glue("

Contents of `config.vsh.yaml`:

{quo}{{embed, lang='yaml'}}
config.vsh.yaml
{quo}

{quo}{{bash build-{id}, include=FALSE}}
# need to rebuild to ensure the container is the correct one
viash run config.vsh.yaml -- ---setup cb
{quo}

Output by running the component:

{quo}{{bash run-{id}}}
viash run config.vsh.yaml
{quo}

")
  cat(run_quarto(qmd, dir = temp_dir2))
})
```


:::

## `meta["resources_dir"]`

Path where the [resources](/reference/config/functionality.qmd#resources) are stored.


## `meta["executable"]`

The path to the executable itself. This is typically only useful when running unit tests, as this value will point to the executable being unit tested and not the unit test itself.

<!-- todo: add example -->

## `meta["temp_dir"]`

A temporary directory in which your script is allowed to create new temporary files / directories. By default, this will be set to the `$VIASH_TEMP` environment variable. If that is undefined, `/tmp` is used instead.

<!-- todo: add example -->

## `meta["cpus"]` and `meta["memory_*"]`

A limit to the amount of resources is allowed to use. The `memory_*` variables exist in the different denominations. 

By default, these limits are unset, but can be set by passing a value for `---cpus` and `---memory` to the executable. For instance, `./example_bash --input foo.txt --output bar.txt ---cpus 2 ---memory 10GB`.

<!-- todo: add example -->
