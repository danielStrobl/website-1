---
title: Add dependencies
search: true
engine: knitr
---

{{< include ../../includes/_language_chooser.qmd >}}

```{r setup, include=FALSE}
repo_path <- system("git rev-parse --show-toplevel", intern = TRUE)
source(paste0(repo_path, "/includes/_r_helper.R"))
source(paste0(repo_path, "/guide_v2/component/_language_examples.R"))

temp_dir <- tempfile("containerization")
dir.create(temp_dir, recursive = TRUE, showWarnings = FALSE)
on.exit(unlink(temp_dir, recursive = TRUE), add = TRUE)

# create tempdir with 
add_setup <- function(...) {
  function(config) {
    config$platforms <- map(config$platforms, function(platform) {
      if (platform$type == "docker") {
        platform$setup <- list(...)
      }
      platform
    })
    config
  }
}
config_overrides <- list(
  bash = add_setup(list(type = "apk", packages = c("curl", "wget"))),
  csharp = add_setup(list(type = "apk", packages = c("curl", "wget"))),
  js = add_setup(list(type = "apk", packages = c("curl", "wget"))),
  python = add_setup(
    list(type = "apk", packages = c("curl", "wget")),
    list(type = "python", packages = "anndata")
  ),
  r = add_setup(
    list(type = "apk", packages = c("curl", "wget")),
    list(type = "r", packages = "tidyverse")
  ),
  scala = add_setup(list(type = "apk", packages = c("curl", "wget")))
)
langs <- langs %>%
  mutate(
    label = gsub("#", "\\\\#", label),
    config_path = paste0(temp_dir, "/", id, "/", basename(example_config)),
    script_path = paste0(temp_dir, "/", id, "/", basename(example_script))
  )
pwalk(langs, function(id, label, example_config, example_script, config_path, script_path, ...) {
  # create dir
  dir.create(paste0(temp_dir, "/", id), recursive = TRUE, showWarnings = FALSE)
  
  # copy script
  file.copy(example_script, script_path)

  # read config, make modifications, write to file
  conf <- yaml::read_yaml(example_config)
  conf2 <- config_overrides[[id]](conf)
  handlers <- list(
    logical = function(x) {
      result <- ifelse(x, "true", "false")
      class(result) <- "verbatim"
      return(result)
    }
  )
  yaml::write_yaml(
    conf2,
    config_path,
    handlers = handlers
  )
})
```

In the previous section, reproducibility of our Viash component was ensured by a predefined Docker image such as `bash:4.0` and `python:3.10`. However, your script might require other software dependencies, such as command-line tools or Python and R packages.

By default, Viash will build component-specific Docker images. This means that every Viash component can have its own set of dependencies.

## Adding additional software to base images

::: {.panel-tabset}

```{r create-config, echo=FALSE, output="asis"}
pwalk(langs, function(id, label, config_path, ...) {
  qrt(
    "## {% label %}
    |
    |You can install additional software by adding entries to the `setup` section of a Docker platform. For example, we modified our earlier example by installing curl and wget:
    |
    |```yaml
    |{% paste(readr::read_lines(config_path), collapse = '\n    |') %}
    |```
    |
    |")
})
```

:::

## Traditional solutions

### Find a fitting Docker image

Hunt down a Docker image with the right set of dependencies

### Build your own Dockerfile

### Comparison of benefits

* Find a fitting Docker image
  - Relatively easy for just one or two dependencies, but certain combinations of dependencies will be difficult to find pre-existing Docker images for.
  - Poses a security risk
* Build custom Dockerfile
  - Requires manual bookkeeping of which Docker images are used in which components.
  - Not difficult but requires more know-how on how to build custom Docker images.
* Let Viash build component-specific Docker images
  - More maintainable: Easier to add / change dependencies to one component without breaking another
  - More control: Comply with security requirements
  - Store images in a centralized container registry


## Todo: add


* Copy guide/component/creation/docker.qmd.
* Add information on how to install extra software/packages using setup:.
* Add info on:
  - Docker volumes (guide/building-block/docker/docker-volume.qmd)
  - Inspecting the dockerfile (guide/building-block/docker/inspect-dockerfile.qmd)
  - Debugging the container (---debug)
  - Setup strategies (guide/building-block/docker/setup-strategies.qmd)
    ( try to point to the reference documentation instead of copying the ref docs verbatim )
