---
title: Scripting Languages
search: true
execute:
  echo: false
  output: asis
---

{{< include ../../includes/_language_chooser.qmd >}}
{{< include ../../includes/_python_helper.qmd >}}

Viash supports several languages to use in your components. This guide explains how to reference scripts in your Viash config files and how to use Viash specific variables.  

## Requirements

:::{.callout-note}
If you're using WSL2, make sure to follow the Linux instructions and execute the commands in a WSL2 terminal.  
:::

::: {.panel-tabset}
## Bash
Bash doesn't have any dependencies and is included in every modern Linux distro, including those provided for WSL2 on Microsoft's Store app. On macOS, the default shell is [Zsh](https://www.zsh.org/) since 2019, but it still comes packaged with an older Bash 3.2.


## C\#
To get started with C# scripting, you need to download and install the [.NET 6.0 SDK](https://dotnet.microsoft.com/en-us/download). 

After installing the SDK, run this command to install the `dotnet-script` tool:

```bash
dotnet tool install -g dotnet-script
```

To verify that dotnet-script was installed successfully, run this command to get a list of installed tools:

```bash
dotnet tool list -g
```

The output should look something like this:

```
Package Id         Version      Commands     
---------------------------------------------
dotnet-script      1.3.1        dotnet-script
```


## JavaScript
To run JavaScript on your system, you'll need to download and install [Node.js](https://nodejs.org/) from their homepage.


## Python
To run Python scripts on your system, download and install [Python](https://www.python.org/downloads/). Most package managers include a python package as well. Make sure to install a version of Python that's at least version 3.8 or newer.

## R
To be able to run R scripts, you'll need [download and install R](https://cran.r-project.org/mirrors.html) for your OS. 


## Scala
Running Scala scripts requires you to download and install [Scala](https://www.scala-lang.org/download/).

:::


## Referencing scripts in a Viash config file

::: {.panel-tabset}
## Bash
When referencing a Bash script in the [`resources`](/reference/config/functionality.html#resources) of the `functionality` section your [Viash config](/reference/config/overview.html), use `bash_script` as its type:

```yaml
functionality:
  name: my_component
  resources:
  - type: bash_script
    path: script.sh
```

## C\#
When referencing a C# script in the [`resources`](/reference/config/functionality.html#resources) of the `functionality` section your [Viash config](/reference/config/overview.html), use `csharp_script` as its type:

```yaml
functionality:
  name: my_component
  resources:
  - type: csharp_script
    path: script.csx
```



## JavaScript
When referencing a JavaScript script in the [`resources`](/reference/config/functionality.html#resources) of the `functionality` section your [Viash config](/reference/config/overview.html), use `javascript_script` as its type:

```yaml
functionality:
  name: my_component
  resources:
  - type: javascript_script
    path: script.js
```

## Python
When referencing a Python script in the [`resources`](/reference/config/functionality.html#resources) of the `functionality` section your [Viash config](/reference/config/overview.html), use `python_script` as its type:

```yaml
functionality:
  name: my_component
  resources:
  - type: python_script
    path: script.py
```

## R
When referencing a R script in the [`resources`](/reference/config/functionality.html#resources) of the `functionality` section your [Viash config](/reference/config/overview.html), use `r_script` as its type:

```yaml
functionality:
  name: my_component
  resources:
  - type: r_script
    path: script.r
```

## Scala
When referencing a Scala script in the [`resources`](/reference/config/functionality.html#resources) of the `functionality` section your [Viash config](/reference/config/overview.html), use `scala_script` as its type:

```yaml
functionality:
  name: my_component
  resources:
  - type: scala_script
    path: script.scala
```

:::

## Executing scripts



::: {.panel-tabset}
## Bash
Bash scripts end with the **.sh** extension. They can be run locally by using the `bash` command:

```bash
bash script.sh
```

## C\#
C# scripts end with the **.csx** extension. They can be run locally by using the `dotnet script` command:

```bash
dotnet script script.csx
```

## JavaScript
JavaScript scripts end with the **.js** extension. They can be run locally by using the `node` command:

```bash
node script.js
```


## Python
Python scripts end with the **.py** extension. They can be run locally by using the `python` command:

```bash
python script.py
```

## R
R scripts end with the **.r** extension. They can be run locally by using the `Rscript` command:

```bash
Rscript script.r
```

## Scala
Scala scripts end with the **.scala** extension. They can be run locally by using the `scala -nc` command:

```bash
scala -nc script.scala
```

:::

## Script examples

These examples will briefly show to start scripting with Viash in mind. Each example shows the source code and the output after running it.

### Using variables

::: {.panel-tabset}
## Bash
```bash
#!/bin/bash

hello="Hello World!"
echo $hello
```

## C\#
```csharp
#!/usr/bin/env dotnet-script

string hello = "Hello World!";
Console.WriteLine(hello);
```

## JavaScript
```js
#!/usr/bin/env node

let hello = 'Hello World!'
console.log(hello)
```

## Python
```python
#!/usr/bin/env python3

hello = "Hello World!"
print(hello)
```

## R
```R
#!/usr/bin/env Rscript

hello = "Hello World!"
cat(hello)
```
```bash
Rscript script.r
```

## Scala
```scala
#!/usr/bin/env scala

val hello = "Hello World!";
println(hello)
```

:::

**Output**
```
Hello World!
```

### Using Viash arguments as variables

Viash generates variables based on the arguments defined in the [Viash config file](/reference/config/overview.html) and injects them at the top of your script. 


::: {.panel-tabset}
## Bash
Variables start with `$par_`, followed by the name of the argument.

**config.vsh.yaml**
```yaml
functionality:
  name: hello_world
  arguments:
  - type: string
    name: --hello
    default: "Hello World!"
  resources:
  - type: bash_script
    path: ViashVariables.sh
```

**ViashVariables.sh**
```bash
#!/bin/bash

echo $par_hello
```

## C\#
Variables are grouped inside an anonymous `par` class and can be referenced by name.

**config.vsh.yaml**
```yaml
functionality:
  name: hello_world
  arguments:
  - type: string
    name: --hello
    default: "Hello World!"
  resources:
  - type: csharp_script
    path: ViashVariables.csx
```

**ViashVariables.csx**
```csharp
#!/usr/bin/env dotnet-script

Console.WriteLine(par.hello);
```

## JavaScript
Variables are grouped inside a dictionary named `par` and can be referenced by name.

**config.vsh.yaml**
```yaml
functionality:
  name: hello_world
  arguments:
  - type: string
    name: --hello
    default: "Hello World!"
  resources:
  - type: javascript_script
    path: ViashVariables.js
```

**ViashVariables.js**
```js
#!/usr/bin/env node

console.log(par['hello'])
```

## Python
Variables are grouped inside a dictionary named `par` and can be referenced by name.

**config.vsh.yaml**
```yaml
functionality:
  name: hello_world
  arguments:
  - type: string
    name: --hello
    default: "Hello World!"
  resources:
  - type: python_script
    path: ViashVariables.py
```

**ViashVariables.py**
```python
#!/usr/bin/env python3

print(par["hello"])
```

## R
Variables are grouped inside a list named `par` and can be referenced by name.

**config.vsh.yaml**
```yaml
functionality:
  name: hello_world
  arguments:
  - type: string
    name: --hello
    default: "Hello World!"
  resources:
  - type: r_script
    path: ViashVariables.r
```

**ViashVariables.r**
```R
#!/usr/bin/env Rscript

cat(par$hello)
```

## Scala
Variables are grouped inside an instance of a class named `par` and can be referenced by name.

**config.vsh.yaml**
```yaml
functionality:
  name: hello_world
  arguments:
  - type: string
    name: --hello
    default: "Hello World!"
  resources:
  - type: scala_script
    path: ViashVariables.scala
```

**ViashVariables.scala**
```scala
#!/usr/bin/env scala

println(par.hello.get)
```

:::

### Using Viash placeholder variables

By adding Viash variables between a `VIASH START` and a `VIASH END` comment, you can write your script with Viash in mind while keeping it working for standalone execution.   

::: {.panel-tabset}
## Bash
```bash
#!/bin/bash

## VIASH START
par_hello="Hello World!"
## VIASH END

echo $par_hello
```

## C\#
```csharp
#!/usr/bin/env dotnet-script

// VIASH START
var par = new {
  hello = "Hello World!"
};
// VIASH END

Console.WriteLine(par.hello);
```

## JavaScript
```js
#!/usr/bin/env node

// VIASH START
let par = {
    'hello': 'Hello World!'
  }
// VIASH END

console.log(par['hello'])
```

## Python
```python
#!/usr/bin/env python3

## VIASH START
par = {
  "hello": "Hello World!"
}
## VIASH END

print(par["hello"])
```

## R
```R
#!/usr/bin/env Rscript

## VIASH START
par <- list(
  hello = "Hello World!"
)
## VIASH END

cat(par$hello)
```

## Scala
```scala
#!/usr/bin/env scala

// VIASH START
case class ViashPar(
  greeter: Option[String]
)

val par = ViashPar(
  greeter = Some("Hello World!")
)
// VIASH END

println(par.hello.get)
```

:::

**Output**
```
Hello World!
```

Anything between `VIASH START` and `VIASH END` will be replaced by the injected variables Viash generates once the script is executed as part of a component. This allows you to easily troubleshoot your script while being compatible with Viash.  

### Language specific tips

::: {.panel-tabset}
## Bash

### Sourcing other scripts

With bash, you can include other bash scripts to share content and functionality by using the `source` command.  
By writing two scripts and adding them to the same directory, one can reference the other:

**script.sh**
```bash
#!/bin/bash

source include_me.sh
echo "Hello from the main script!"
```

**include_me.sh**
```bash
#!/bin/bash

echo "Hi from the included script!"
```

Running `script.sh` results in the following output:

```
Hi from the included script!
Hello from the main script!
```

Viash supports the sourcing of scripts by adding them as a resource:

**config.vsh.yaml**
```yaml
functionality:
  name: source_example
  resources:
  - type: bash_script
    path: script.sh
  - type: bash_script
    path: include_me.sh
```

Doing this will ensure any needed scripts will be included with the build target.

## C\#

### Using NuGet packages

With `dotnet-script`, you can reference [NuGet](https://www.nuget.org/) packages directly from within the script. In the example below, we add a reference to [Newtonsoft.Json](https://www.nuget.org/packages/Newtonsoft.Json) to convert a dictionary to JSON and output it to the console.

**script.csx**
```csharp
#!/usr/bin/env dotnet-script
#r "nuget: Newtonsoft.Json, 13.0.1"

using Newtonsoft.Json;

Dictionary<string, int> downloads = new Dictionary<string, int>
{
    { "v1.0", 501 },
    { "v1.1", 802 },
    { "v2.0", 2857 }
};

string json = JsonConvert.SerializeObject(downloads, Formatting.Indented);
Console.WriteLine(json);
```

Running `script.csx` results in the following output:

```
{
  "v1.0": 501,
  "v1.1": 802,
  "v2.0": 2857
}
```

## JavaScript

We don't have any JavaScript tips yet!

## Python

We don't have any Python tips yet!

## R

We don't have any R tips yet!

## Scala

We don't have any Scala tips yet!

:::



## Meta variables

Viash offers hidden variables to use in your scripts that can be used to get meta information about your component.

### Functionality name

Name of the component found in the [`functionality`](/reference/config/functionality.html) section of the [Viash config](/reference/config/overview.html):

```yaml
functionality:
  name: my_component
```

::: {.panel-tabset}
## Bash
```bash
echo $meta_functionality_name
```

## C\#
```csharp
Console.WriteLine(meta.functionality_name);
```

## JavaScript
```js
console.log(meta['functionality_name']);
```

## Python
```python
print(meta["functionality_name"])
```

## R
```R
cat(meta$functionality_name)
```

## Scala
```scala
println(meta.functionality_name)
```

:::

**Output**
```
my_component
```

### Resources directory

Path where the [resources](/reference/config/functionality.html#resources) as defined in the [Viash config file](/reference/config/overview.html) are stored.

::: {.panel-tabset}
## Bash
```bash
echo $meta_resources_dir
```

## C\#
```csharp
Console.WriteLine(meta.resources_dir);
```

## JavaScript
```js
console.log(meta['resources_dir']);
```

## Python
```python
print(meta["resources_dir"])
```

## R
```R
cat(meta$resources_dir)
```

## Scala
```scala
println(meta.resources_dir)
```

:::

When using [`viash run`](/reference/viash/run.html) to create a temporary build target and execute it, this will point to the temporary path where the executable was generated:

```
/tmp/viash_my_component9560481446119256265
```

After building a component using [`viash build`](/reference/viash/build.html) and running the generated executable, it points to the directory where the executable and the other resources reside in:

```
/home/user/components/my_component_target_dir
```

### Temp directory

Path to the directory supplied by the host system where you can write temporary files to. 

::: {.panel-tabset}
## Bash
```bash
echo $meta_temp_dir
```

## C\#
```csharp
Console.WriteLine(meta.temp_dir);
```

## JavaScript
```js
console.log(meta['temp_dir']);
```

## Python
```python
print(meta["temp_dir"])
```

## R
```R
cat(meta$temp_dir)
```

## Scala
```scala
println(meta.temp_dir)
```

:::

**Output**
```
/tmp
```
