---
title: Using a project
order: 10
---


```{r setup, include=FALSE}
repo_path <- system("git rev-parse --show-toplevel", intern = TRUE)
source(paste0(repo_path, "/includes/_r_helper.R"))

# why doesn't this want to work inside a tempdir?
# temp_dir <- tempfile("create_pipeline")
# dir.create(temp_dir, recursive = TRUE, showWarnings = FALSE)
# on.exit(unlink(temp_dir, recursive = TRUE), add = TRUE)

proj_dir <- "_viash_project_template"

if (dir.exists(proj_dir)) {
  unlink(proj_dir, recursive = TRUE)
}
processx::run(
  "git",
  c("clone", "https://github.com/viash-io/viash_project_template.git", proj_dir)
)

knitr::opts_knit$set(root.dir = proj_dir)
```

In this guide, we'll go into detail on how to use and manage Viash projects. This project may or may not contain Nextflow pipelines, but always contains Viash components ;)


## Get the template project

To get started, we provide a [template project](https://github.com/viash-io/viash_project_template)
which already contains a few components. First create a new repository by clicking the "Use this template" button in the [viash_project_template](https://github.com/viash-io/viash_project_template) repository or clicking the button below.

[Use project template](https://github.com/viash-io/viash_project_template/generate){class="btn btn-info btn-md"}

Then clone the repository using the following command.

```bash
git clone https://github.com/youruser/my_first_pipeline.git
```


## Contents of this template

This template repo contains the following content:

    .
    ├── LICENSE.md                            License information
    ├── README.qmd                            The source qmd file for this readme
    ├── README.md                             This readme
    ├── _viash.yaml                           Global Viash settings
    ├── resources_test/*.tsv                  Sample files to showcase pipeline and
    │   ├── file1.tsv                         run component unit tests.
    │   └── file2.tsv
    ├── src/demo                              Source directory with Viash components
    │   ├── combine_columns
    │   ├── remove_comments
    │   └── take_column
    ├── target                                Target platform files generated by Viash
    │   ├── docker                            Executables generated from source
    │   └── nextflow                          Nextflow modules generated from source
    └── workflows
        └── demo_pipeline                     Demo Nextflow pipeline
            ├── main.nf
            └── nextflow.config

## Run component

```{bash}
viash run src/demo/remove_comments/config.vsh.yaml -- \
  --input resources_test/file1.tsv \
  --output output/foo.tsv
```

```{bash}
cat output/foo.tsv
```


## Test component

```{bash}
viash test src/demo/remove_comments/config.vsh.yaml
```


## Build all components

You can generate your first development build by running:

```{bash}
viash ns build --setup cachedbuild --parallel
```


## Run executable

```{bash}
target/docker/demo/remove_comments/remove_comments \
  --input resources_test/file1.tsv \
  --output output/bar.tsv
```

## Run VDSL3 module

```bash
nextflow run .
  -main-script target/nextflow/remove_comments/main.nf \
  -profile docker \
  --input resources_test/file*.tsv \
  --publish_dir output1
```

```bash
tree output1
```

## Run pipeline

```bash
nextflow run . \
  -main-script workflows/demo_pipeline/main.nf \
  -profile docker \
  --input resources_test/file*.tsv \
  --publishDir output2
```

```bash
tree output2
```

## Test components

```{bash}
viash ns test --parallel
```

## Project config

```{r, output="asis"}
cat(paste(readr::read_lines("_viash.yaml"), collapse = "\n"))
```

## More information

* Recommended IDE setup
* Recommended CI setup
* Other commands:
  - Listing components
  - Ns exec
