```{python}
#| echo: false
#| output: asis

# Imports
import git, os, shutil

# Get root dir of repo
repo = git.Repo('.', search_parent_directories=True)
repo_root = repo.working_tree_dir

# Run `quarto pandoc --list-highlight-languages` for full list of supported languages
# Example: print_file_contents("/download/components/remove_comments/bash/config.vsh.yaml", "yaml", False, {"Replace me":"With this"})
def print_file_contents(path, language = "default", folded = False, replace_dict = {}):
    filepath = repo_root + path
    basename = os.path.basename(filepath)
    f = open(filepath)
    file_contents = f.read()

    for key, value in replace_dict.items():
        file_contents = file_contents.replace(key,value)

    if folded:
        print("<details>")
        print(f"<summary>Contents of {basename}</summary>")

    print(f"```{language}  ")
    print(file_contents)
    print("```  ")
    if folded:
        print("</details>")

# Example: create_download_button("/download/components/remove_comments/bash/config.vsh.yaml")
def create_download_button(path):
    basename = os.path.basename(path)
    download_path = path
    print(f"<a href=\"{download_path}\" id=\"btn-download\" class=\"btn btn-info btn-md\" role=\"button\" download>Download {basename}</a>  ")

# Example: create_zip(parent_dir = "/download/projects", zip_dir = "namespace_example")
def create_zip(parent_dir, zip_dir):
    work_dir = repo_root + parent_dir
    os.chdir(work_dir)
    shutil.make_archive(zip_dir, 'zip', zip_dir)
```