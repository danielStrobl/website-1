
---
title: Unit Testing
search: true
execute:
  echo: false
  output: asis
---

{{< include ../../../includes/_python_helper.qmd >}}

To ensure that your components and namespaces works as expected during its development cycle, writing one or more tests is essential.  
Viash supports **unit testing**, which is a software testing method by which individual units of source code are tested to determine whether they output data as expected.

## Unit testing a single component

To write a unit test for a component, you need two things: a definition in the [config file](/documentation/reference/config/overview.html) and a script that runs the executable and verifies its output.  

This tutorial uses a sample component named **md_url_checker**  to explain how to write a unit test for Viash. To follow along, start by creating a new folder named "**testing**" on your machine.  
Now create a new file named **Testfile.md** and add the following contents:

```{python}
# create_download_button("/download/components/md_url_checker/bash/Testfile.md")
print_file_contents("/download/components/md_url_checker/bash/Testfile.md", "md", False)
```
 
Next, either download or copy the text for the config file and script below and add them to the same folder:

```{python}
create_download_button("/download/components/md_url_checker/bash/config.vsh.yaml")
print_file_contents("/download/components/md_url_checker/bash/config.vsh.yaml", "yaml", True)
```

```{python}
create_download_button("/download/components/md_url_checker/bash/script.sh")
print_file_contents("/download/components/md_url_checker/bash/script.sh", "bash", True)

```

### Configuration

To see where to define your unit tests, open up **config.vsh.yaml** file and take a look at the end of the [functionality](/documentation/reference/config/functionality.html) dictionary, between the `path: script.sh` and `platforms:` lines:

```yaml
  test_resources:
  - type: bash_script
    path: test.sh
  - path: Testfile.md
```

The [`test_resources`](/documentation/reference/config/functionality.html#test_resources) dictionary contains a reference to a test script and all of the files that need to be copied over in order to complete a test:

- The `type` signifies what [scripting language](/documentation/guide/component/languages.html) is used for performing the unit test, which doesn't need to be the same language as the main script. The `path` points to the test script.
- Every file `path` added straight into the `tests` dictionary will be copied over next to the temporary test directory. Any files that are necessary for the test to work correctly can be added here. 

In the case of this example, **test.sh** will be the test script and **Testfile.md** is necessary as an input markdown file for the script to function.  

### Test script

To write the test itself, create a new file named **test.sh** in the **testing** folder and add this as its content:

```{python}
print_file_contents("/download/components/md_url_checker/bash/test.sh", "bash", False)
```

:::{.callout-tip}
As you can see above, you can use the [meta variable](/documentation/guide/component/languages.html#meta-variables) `$meta_functionality_name` to automatically get the name of the component (and the generated executable). This way, you can more reuse parts of your test scripts.
:::

:::{.callout-tip}
This script uses [grep](https://www.gnu.org/software/grep/manual/grep.html) to search for files and strings. Make sure to read the comments to understand what is happening.
:::

The bash script above is just a minimal example of how you can write a test. You can use any of the [supported languages](/documentation/guide/component/languages.html) and your favorite testing framework if that's your preference. The most important part is the last line, which uses a 0 [exit code](https://en.wikipedia.org/wiki/Exit_status) to signal a success.

### Running a test

To run all tests defined in a config file, use the [`viash test`](/documentation/reference/viash/test.html) command:

```bash
viash test config.vsh.yaml
```

Viash will now automatically build an executable and place it alongside the other defined resources in a temporary working directory. The output should look like this:  

```
Running tests in temporary directory: '/tmp/viash_test_md_url_checker5828773777380597444'
====================================================================
+/tmp/viash_test_md_url_checker5828773777380597444/build_executable/md_url_checker ---setup
====================================================================
+/tmp/viash_test_md_url_checker5828773777380597444/test_test.sh/test.sh
>>> Checking whether output is correct
+ echo '>>> Checking whether output is correct'
+ ./md_url_checker --inputfile Testfile.md
+ [[ ! -f test-output.txt ]]
+ grep -q '1: https://www.google.com' test-output.txt
+ grep -q 'HTTP/2 404' test-output.txt
>>> Checking whether an output file was created correctly
+ echo '>>> Checking whether an output file was created correctly'
+ [[ ! -f output.txt ]]
+ grep -q 'URL: https://www.google.com' output.txt
+ grep -q 'Status: ERROR! URL cannot be reached. Status code: HTTP/2 404' output.txt
+ grep -q 'Link name: install viash here' output.txt
+ echo '>>> Test finished successfully!'
>>> Test finished successfully!
+ exit 0
====================================================================
[32mSUCCESS! All 1 out of 1 test scripts succeeded![0m
Cleaning up temporary directory
```

If the test succeeds, Viash writes the full output to the shell and deletes the temporary files. If there are any issues, the script stops and an error message will appear in red. In this case, you can inspect the temporary files to troubleshoot.  

:::{.callout-tip}
You can pass the [`--keep true`](/documentation/reference/viash/test.html) argument to `viash test` to prevent viash from automatically deleting the temporary files in case of a success: `viash test --keep true config.vsh.yaml`.
:::