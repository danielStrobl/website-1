---
title: Native
search: true
execute:
  echo: false
  output: asis
---

{{< include ../../../../includes/_language_chooser.qmd >}}
{{< include ../../../../includes/_python_helper.qmd >}}

## Overview

A Viash component can target one or more platforms. When targetting the native platform, a single executable is generated.

## Requirements

The example targets the [Native platform](), which means you will need to have the required packages installed on your system depending on your chosen scripting language. If you are using any of the languages on your system, there's a good chance you already meet the requirements. To get up and running quickly, we recommend using Bash.

::: {.panel-tabset}
## Bash

- A Bash Unix shell (built into Linux, macOS and WSL2)

## C\#

- A Bash Unix shell (built into Linux, macOS and WSL2)
- Download and install [.NET Core](https://dotnet.microsoft.com/download).
- Run `dotnet tool install -g dotnet-script` to enable the C# scripting functionality.

## JavaScript

- A Bash Unix shell (built into Linux, macOS and WSL2)
- Download and install [Node.js](https://nodejs.org/en/).
- Execute the following command to install the required npm packages: `npm install --save needle markdown-link-extractor`

## Python

- A Bash Unix shell (built into Linux, macOS and WSL2)
- Install [Python 3.8 or newer](https://www.python.org/downloads/). You may have to install the `python-is-python3` package on Ubuntu and its derivatives.

## Scala

- A Bash Unix shell (built into Linux, macOS and WSL2)
- Install [Scala 2](https://www.scala-lang.org/download/scala2.html).

## R

- A Bash Unix shell (built into Linux, macOS and WSL2)
- Install the [R software environment](https://cran.r-project.org/mirrors.html)

:::

## Creating the Viash component

### Writing the script

For this example, you'll use a tiny script that simply outputs "Hello World", with the "Viash" part being a variable. 
To start off, create a folder named **hello_world** and follow the instructions below based on your preferred scripting language.

::: {.panel-tabset}

## Bash

Create a new file named **script.sh** and copy the following content inside of it:

```{python}
print_file_contents("/download/components/hello_world/bash/script.sh", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [Bash page]() for more information and examples.
:::


## C\#

Create script.csx

```{python}
print_file_contents("/download/components/hello_world/csharp/script.csx", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [C# page]() for more information and examples.
:::

## JavaScript

Create script.js

```{python}
print_file_contents("/download/components/hello_world/js/script.js", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [JavaScript page]() for more information and examples.
:::

## Python

Create script.py

```{python}
print_file_contents("/download/components/hello_world/python/script.py", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [Python page]() for more information and examples.
:::

## Scala

Create script.scala

```{python}
print_file_contents("/download/components/hello_world/scala/script.scala", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [Scala page]() for more information and examples.
:::

## R

Create script.R

```{python}
print_file_contents("/download/components/hello_world/r/script.R", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [R page]() for more information and examples.
:::

:::

### Adding the config
 
A [Viash config file]() is a YAML file that describes the functionality of a component and the platform(s) it targets.
Create a file name **config.vsh.yaml** and add the contents below based on your chosen scripting language.

::: {.panel-tabset}
## Bash

```{python}
create_download_button("/download/components/hello_world/bash/config.vsh.yaml")
print_file_contents("/download/components/hello_world/bash/config.vsh.yaml", "yaml", False)
```

## C\#

```{python}
create_download_button("/download/components/hello_world/csharp/config.vsh.yaml")
print_file_contents("/download/components/hello_world/csharp/config.vsh.yaml", "yaml", False)
```

## JavaScript

```{python}
create_download_button("/download/components/hello_world/js/config.vsh.yaml")
print_file_contents("/download/components/hello_world/js/config.vsh.yaml", "yaml", False)
```

## Python

```{python}
create_download_button("/download/components/hello_world/python/config.vsh.yaml")
print_file_contents("/download/components/hello_world/python/config.vsh.yaml", "yaml", False)
```

## Scala

```{python}
create_download_button("/download/components/hello_world/scala/config.vsh.yaml")
print_file_contents("/download/components/hello_world/scala/config.vsh.yaml", "yaml", False)
```

## R

```{python}
create_download_button("/download/components/hello_world/r/config.vsh.yaml")
print_file_contents("/download/components/hello_world/r/config.vsh.yaml", "yaml", False)
```

:::

Here's a breakdown of the different sections:

- `functionality` describes what the component does and the resources it needs. It contains the `name`, a short `description` and more importantly, the `arguments` and `resources` the component uses.
  - `arguments` contains all arguments the component accepts and will be passed to the script. In this case, a single `string` named `--input` resides here with a default value of `Viash`. 
  - `resources` holds references to all necessary files and folders to make the component work. For this example, a single script is all that's needed.
- `platforms` lists what platforms the component can target. This example targets the [`native`]() platform, which will generate an executable that's run using the system resources.

## Running

With the two necessary files present to create a component, you can call upon Viash to generate a temporary executable and run it:

```bash
viash run config.vsh.yaml
```

Without passing any arguments, this will use the default value for `--input`, which is `Viash`. This results in the following output:

```
Hello World
```

By providing the a value for `--input`, you can customize the greeting: 

```bash
viash run config.vsh.yaml -- --input World
```

:::{.callout-note}
The double dash (`--`) between the viash command and the arguments is used to signify the end of the arguments passed to viash and the start of those passed to the component. If you forgot to add these, you'll get an error similar to this:   
  
```bash
[scallop] Error: Unknown option 'input'
```
:::

The example above results in this output:

```
Hello World
```

## What's next?

To learn how to use Viash to build an executable and run it, see [Native Executable Building and Running]().