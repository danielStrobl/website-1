---
title: Nextflow
search: true
execute:
  echo: false
  output: asis
---

{{< include ../../../../includes/_language_chooser.qmd >}}
{{< include ../../../../includes/_python_helper.qmd >}}

## Overview

When targeting the nextflow platform, a NextFlow module is generated that can run standalone or used in a pipeline.  

## Requirements

This example targets the [Nextflow platform](), which requires you to install Nextflow and Docker. Follow the instructions on [NextFlow's homepage](https://www.nextflow.io/) to install it on your system if you haven't done so already. You can find instructions on how to install Docker for your OS on the [Viash installation page](/documentation/get-started/).

## Creating a Viash component

To start off, create a folder named **nextflow_component** and create a **src** folder inside of it. Next, add another folder inside of the **src** folder and name it **remove_comments**. This is where the component will be placed, a minimal example that uses a bash script to remove comments from a TSV file.

The directory structure should look like this:

```
nextflow_component
└── src
    └── remove_comments
```

### Writing the script

Add the following small script to the **remove_comments** folder:

```{python}
print_file_contents("/download/remove_comments/bash/script.sh", "bash", False)
```

As mentioned above, this script removes comments from a TSV file. It does so by removing all lines that start with a hashtag (#) from an `input` file and writing the result to the `output`.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [Bash page]() for more information and examples.
:::

### Adding the config

A [Viash config file]() is a YAML file that describes the functionality of a component and the platform(s) it targets. Create a file name **config.vsh.yaml** inside of the **remove_comments** folder and add the contents below.

```{python}
create_download_button("/download/remove_comments/bash/config.vsh.yaml")
print_file_contents("/download/remove_comments/bash/config.vsh.yaml", "yaml", False)
```

Here's a breakdown of the different sections:

#### `functionality`

This section describes what the component does and the resources it needs. It contains the `name`, a short `description` and more importantly, the `arguments` and `resources` the component uses. This component is part of a [namespace]() named `nextflow_modules`, which we'll explore further in the [pipeline guides](/documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html).

#### `arguments`

The [`arguments`](/documentation/reference/config/functionality.html#arguments) section contains all arguments the component accepts and will be passed to the script. In this case, an `input` and an `output` file path argument that are both **required**.

#### `resources`

All references to the necessary files and folders to make the component work are added to this section. For this example, a single script is all that's needed.

#### `platforms`

This lists what platforms the component can target. For this example, the only platform is `nextflow`.  

- The [`variant`]() property can be used to choose between our [legacy]() NextFlow implementation or the next-generation VDSL3 variant. The latter is recommended as it has a lot of features to make creating modules more streamlined. You can read more about VDSL3 in [our guide]().
- The [`directives`]() dictionary contains optional settings that affect the execution of the module. For this example, a single directive is used: `container`. The `container` is the base Docker image that should be used to run the module.

:::{.callout-tip}
If you specify a Docker platform in addition to NextFlow, the image in the docker platform section will be automatically used for NextFlow as well:

```yaml
platforms:
  - type: docker
    image: ubuntu:20.04
  - type: nextflow
    variant: vdsl3
```
:::

With the script and config added, the final directory should now look like this:

```
nextflow_component
└── src
    └── remove_comments
        ├── config.vsh.yaml
        └── script.sh
```

### Running

In contrast to native and Docker based components, a Nextflow based component cannot be ran by using the [`viash run`]() command. These types of components require you to use [`viash build`]() first to generate a Nextflow module and run that module using `nextflow run`. See [Building and Running Nextflow](/documentation/guide/building-block/nextflow/building-running.html) for more information and an example of how to run a NextFlow module as a standalone pipeline.