---
title: Docker
search: true
execute:
  echo: false
  output: asis
---

{{< include ../../../../includes/_language_chooser.qmd >}}
{{< include ../../../../includes/_python_helper.qmd >}}

## Overview

A Viash component can target one or more platforms. When targetting the docker platform, a single executable is generated that will build and run a docker container.  

## Requirements

As this example targets the [Docker platform](#), the only requirement is to have Docker installed on your system. This is one of the biggest benefits of targeting the Docker platform. You can find instructions on how to install Docker for your OS on the [Viash installation page](/documentation/get-started/).

### Writing the script

For this example, you'll use the same tiny script the [native guide](/documentation/guide/component/creation/native.html) uses. It simply outputs "Hello Viash", with the "Viash" part being a variable. 
To start off, create a folder named **hello_viash_docker** and follow the instructions below based on your preferred scripting language.

::: {.panel-tabset}

## Bash

Create a new file named **script.sh** and copy the following content inside of it:

```{python}
print_file_contents("/download/hello_viash_docker/bash/script.sh", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [Bash page](#) for more information and examples.
:::


## C\#

Create script.csx

```{python}
print_file_contents("/download/hello_viash_docker/csharp/script.csx", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [C# page](#) for more information and examples.
:::

## Javascript

Create script.js

```{python}
print_file_contents("/download/hello_viash_docker/js/script.js", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [Javascript page](#) for more information and examples.
:::

## Python

Create script.py

```{python}
print_file_contents("/download/hello_viash_docker/python/script.py", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [Python page](#) for more information and examples.
:::

## Scala

Create script.scala

```{python}
print_file_contents("/download/hello_viash_docker/scala/script.scala", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [Scala page](#) for more information and examples.
:::

## R

Create script.R

```{python}
print_file_contents("/download/hello_viash_docker/r/script.R", "yaml", False)
```

This outputs `Hello ` to the console, followed by an `input` variable. Notice that this variable isn't defined in the script itself as Viash will generate it for you based on the config file you'll create in the next step.

:::{.callout-tip}
Every scripting language has its own way of using variables generated by Viash. Check out the [R page](#) for more information and examples.
:::

:::

### Adding the config
 
A [Viash config file]() is a YAML file that describes the functionality of a component and the platform(s) it targets.
Create a file name **config.vsh.yaml** and add the contents below based on your chosen scripting language.

::: {.panel-tabset}
## Bash

```{python}
create_download_button("/download/hello_viash_docker/bash/config.vsh.yaml")
print_file_contents("/download/hello_viash_docker/bash/config.vsh.yaml", "yaml", False)
```

## C\#

```{python}
create_download_button("/download/hello_viash_docker/csharp/config.vsh.yaml")
print_file_contents("/download/hello_viash_docker/csharp/config.vsh.yaml", "yaml", False)
```

## Javascript

```{python}
create_download_button("/download/hello_viash_docker/js/config.vsh.yaml")
print_file_contents("/download/hello_viash_docker/js/config.vsh.yaml", "yaml", False)
```

## Python

```{python}
create_download_button("/download/hello_viash_docker/python/config.vsh.yaml")
print_file_contents("/download/hello_viash_docker/python/config.vsh.yaml", "yaml", False)
```

## Scala

```{python}
create_download_button("/download/hello_viash_docker/scala/config.vsh.yaml")
print_file_contents("/download/hello_viash_docker/scala/config.vsh.yaml", "yaml", False)
```

## R

```{python}
create_download_button("/download/hello_viash_docker/r/config.vsh.yaml")
print_file_contents("/download/hello_viash_docker/r/config.vsh.yaml", "yaml", False)
```

:::

The `platforms` list in the example contains two target platforms, `native` and `docker`.  The `docker` platform has an image property that points to a [Docker image](/documentation/reference/config/dockerPlatform.html#image) from [Docker Hub](https://hub.docker.com/) to use as a base. Depending on the language, a [setup](#) might be included that will install additional packages in the final image.



:::{.callout-note}
When building your own components that only target Docker or Nextflow, adding the `native` target platform isn't necessary.
:::

### Running

With the two necessary files present to create a component, you can call upon Viash to generate a temporary executable and run it:

```bash
viash run config.vsh.yaml -platform docker
```

The [-platform](#) argument is passed to [`viash run`](#) so **Docker** will be chosen as the build target. If the platform isn't specified, the first one in the `platforms` list is picked.  
No arguments are passed to the component, so it will use the default value for `--input`, which is `Viash`. This results in the following output:

```
[notice] Checking if Docker image is available at 'hello_viash:latest'
[warning] Could not pull from 'hello_viash:latest'. Docker image doesn't exist or is not accessible.
[notice] Building container 'hello_viash:latest' with Dockerfile
Hello Viash
```

As you can see, Viash checks first if an image has been generated before continuing. If the image already exists, Viash will run a contained based on the image. In this case, no image was found for this component, so Viash generates the image before building and running the container.  
By providing the a value for `--input`, you can customize the greeting: 

```bash
viash run config.vsh.yaml -- --input World
```

:::{.callout-note}
The double dash (`--`) between the viash command and the arguments is used to signify the end of the arguments passed to viash and the start of those passed to the component. If you forgot to add these, you'll get an error similar to this:   
  
```bash
[scallop] Error: Unknown option 'input'
```
:::

The example above results in this output:

```
Hello World
```

## What's next?

To learn how to use Viash to build an executable and run it, see [Native Executable Building and Running]().
