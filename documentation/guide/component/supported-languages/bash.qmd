---
title: Bash
search: true
execute:
  echo: false
  output: asis
---

{{< include ../../../../includes/_language_chooser.qmd >}}
{{< include ../../../../includes/_python_helper.qmd >}}

## Overview

[Bash](https://www.gnu.org/software/bash/) is the [GNU Project](https://www.gnu.org/home.en.html)'s shell, the **Bourne Again SHell**. Besides being a shell, Bash can interpret commands in Bash scripts line-by-line.  
All executables generated by Viash use Bash scripting as a wrapper to provide a CLI and additional logic.

## Requirements

Bash doesn't have any dependencies and is included in every modern Linux distro, including those provided for WSL2 on Microsoft's Store app. On macOS, the default shell is [Zsh](https://www.zsh.org/) since 2019, but it still comes packaged with an older Bash 3.2.

## Referencing Bash scripts in a Viash config file

When referencing a Bash script in the [`resources`](/documentation/reference/config/functionality.html#resources) of the `functionality` section your [Viash config](/documentation/reference/config/overview.html), use `bash_script` as its type:

```yaml
functionality:
  name: my_component
  resources:
  - type: bash_script
    path: script.sh
```

## Executing scripts

Bash scripts end with the **.sh** extension. They can be run locally by using the `bash` command:

```bash
bash script.sh
```

## Script examples

These examples will briefly show to use Bash in the context of Viash. Each example shows the source code and the output after running it.

### Using variables

**Variables.sh**
```bash
#!/bin/bash

hello="Hello World!"
echo $hello
```

**Output**
```
Hello World!
```

### Using Viash arguments as variables

Viash generates variables based on the arguments defined in the [Viash config file](/documentation/reference/config/overview.html) and injects them at the top of your script. In the case of Bash, these variables start with `$par_`, followed by the name of the argument.

**config.vsh.yaml**
```yaml
functionality:
  name: hello_world
  arguments:
  - type: string
    name: --hello
    default: "Hello World!"
  resources:
  - type: bash_script
    path: ViashVariables.sh
```

**ViashVariables.sh**
```bash
#!/bin/bash

echo $par_hello
```

**Output**
```
Hello World!
```

### Using Viash placeholder variables

In some cases, you want to be able to write or adapt a script and test it out before creating a component. While you can write your script as normal and switch out the variables later on with their Viash variants, we supply a useful method of adding Viash variables beforehand in the form of a comment section.

**PlaceholderVariables.sh**
```bash
#!/bin/bash

## VIASH START
par_hello="Hello World!"
## VIASH END

echo $par_hello
```

**Output**
```
Hello World!
```

Anything between `## VIASH START` and `## VIASH END` will be replaced by the injected variables Viash generates once the script is executed as part of a component. This allows you to easily troubleshoot your script while being compatible with Viash.  

### Sourcing other scripts

With bash, you can include other bash scripts to share content and functionality by using the `source` command.  
By writing two scripts and adding them to the same directory, one can reference the other:

**script.sh**
```bash
#!/bin/bash

source include_me.sh
echo "Hello from the main script!"
```

**include_me.sh**
```bash
#!/bin/bash

echo "Hi from the included script!"
```

Running `script.sh` results in the following output:

```
Hi from the included script!
Hello from the main script!
```

Viash supports the sourcing of scripts by adding them as a [resource](/documentation/guide/component/resources.html):

**config.vsh.yaml**
```yaml
functionality:
  name: source_example
  resources:
  - type: bash_script
    path: script.sh
  - type: bash_script
    path: include_me.sh
```

Doing this will ensure any needed scripts will be included with the build target.

## Meta variables

Viash offers hidden variables to use in your scripts that can be used to get meta information about your component.

### Functionality name

Name of the component found in the [`functionality`](/documentation/reference/config/functionality.html) section of the [Viash config](/documentation/reference/config/overview.html):

```yaml
functionality:
  name: my_component
```

This can be referenced in your script using `$meta_functionality_name`:

```bash
echo $meta_functionality_name
```

**Output**
```
my_component
```

### Resources directory

Path where the [resources](/documentation/reference/config/functionality.html#resources) as defined in the [Viash config file](/documentation/reference/config/overview.html) are stored. You can access this value using `$meta_resources_dir`:

```bash
echo $meta_resources_dir
```

When using [`viash run`](/documentation/reference/viash/run.html) to create a temporary build target and execute it, this will point to the temporary path where the executable was generated:

```
/tmp/viash_my_component9560481446119256265
```

After building a component using [`viash build`](/documentation/reference/viash/build.html) and running the generated executable, it points to the directory where the executable and the other resources reside in:

```
/home/user/components/my_component_target_dir
```

### Temp directory

Path to the directory supplied by the host system where you can write temporary files to. This can be referenced in your script using `$meta_temp_dir`:

```bash
echo $meta_temp_dir
```

**Output**
```
/tmp
```
