---
title: Scala
search: true
execute:
  echo: false
  output: asis
---

{{< include ../../../../includes/_language_chooser.qmd >}}
{{< include ../../../../includes/_python_helper.qmd >}}

## Overview

[Scala](https://www.Scala.org/) is an object-oriented and functional high-level programming language.

## Dependencies

Running Scala scripts requires you to download and install [Scala](https://www.scala-lang.org/download/).

## Referencing Scala scripts in a Viash config file

When referencing a Scala script in the [`resources`](/documentation/reference/config/functionality.html#resources) of the `functionality` section your [Viash config](/documentation/reference/config/overview.html), use `scala_script` as its type:

```yaml
functionality:
  name: my_component
  resources:
  - type: scala_script
    path: script.scala
```

## Executing scripts

Scala scripts end with the **.scala** extension. They can be run locally by using the `scala -nc` command:

```bash
scala -nc script.scala
```

## Script examples

These examples will briefly show to use Scala in the context of Viash. Each example shows the source code and the output after running it.

### Hello World

Here's the classic Hello World written in Scala:

**HelloWorld.scala**
```scala
#!/usr/bin/env scala

println("Hello World!")
```

**Output**
```
Hello World!
```

:::{.callout-note}
The first line with the [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)) is optional but recommended as it indicates what interpreter should be used for execution.
:::

### Using variables

**Variables.scala**
```scala
#!/usr/bin/env scala

val hello = "Hello World!";
println(hello)
```

**Output**
```
Hello World!
```

### Using Viash arguments as variables

Viash generates variables based on the arguments defined in the [Viash config file](/documentation/reference/config/overview.html) and injects them at the top of your script.  In the case of Scala, these variables are grouped inside an instance of a class named `par` and can be referenced by name.

**config.vsh.yaml**
```yaml
functionality:
  name: hello_world
  arguments:
  - type: string
    name: --hello
    default: "Hello World!"
  resources:
  - type: scala_script
    path: script.scala
```

**ViashVariables.scala**
```scala
#!/usr/bin/env scala

println(par.hello.get)
```

**Output**
```
Hello World!
```

### Using Viash placeholder variables

In some cases, you want to be able to write or adapt a script and test it out before creating a component. While you can write your script as normal and switch out the variables later on with their Viash variants, we supply a useful method of adding Viash variables beforehand in the form of a comment section.

**PlaceholderVariables.scala**
```scala
#!/usr/bin/env scala

// VIASH START
case class ViashPar(
  greeter: Option[String]
)

val par = ViashPar(
  greeter = Some("Hello World!")
)
// VIASH END

println(par.hello.get)
```

**Output**
```
Hello World!
```

Anything between `// VIASH START` and `// VIASH END` will be replaced by the injected variables Viash generates once the script is executed as part of a component. This allows you to easily troubleshoot your script while being compatible with Viash.  

## Meta variables

Viash offers hidden variables to use in your scripts that can be used to get meta information about your component.

### Functionality name

Name of the component found in the [`functionality`](/documentation/reference/config/functionality.html) section of the [Viash config](/documentation/reference/config/overview.html):

```yaml
functionality:
  name: my_component
```

This can be referenced in your script using `meta.functionality_name`:

```scala
println(meta.functionality_name)
```

**Output**
```
my_component
```

### Resources directory

Path where the [resources](/documentation/reference/config/functionality.html#resources) as defined in the [Viash config file](/documentation/reference/config/overview.html) are stored. You can access this value using `meta.resources_dir`:

```scala
println(meta.resources_dir)
```

When using [`viash run`](/documentation/reference/viash/run.html) to create a temporary build target and execute it, this will point to the temporary path where the executable was generated:

```
/tmp/viash_my_component9560481446119256265
```

After building a component using [`viash build`](/documentation/reference/viash/build.html) and running the generated executable, it points to the directory where the executable and the other resources reside in:

```
/home/user/components/my_component_target_dir
```

### Temp directory

Path to the directory supplied by the host system where you can write temporary files to. This can be referenced in your script using `meta.temp_dir`:

```scala
println(meta.temp_dir)
```

**Output**
```
/tmp
```

