---
title: Advanced Pipeline
search: true
execute:
  echo: false
  output: asis
---

{{< include ../../../../includes/_python_helper.qmd >}}

This guide explains how to create an example pipeline that's closer to a typical use-case of a Nextflow bioinformatics pipeline. It has a mixture of scripting languages and uses a `join` to merge all events.

## Creating the modules

The sections below describe how to create the VDSL3 modules in preparation for creating the pipeline. 

### Preparation

create a new folder named advanced pipeline, add src folder with a nextflow_module folder inside. Now create three folders inside nextflow_module folder, one per component needed for the pipeline:

- `combine_columns`
- `remove_comments`
- `take_columns`


The folder structure should look like this now:

```
advanced_pipeline
└── src
    └── nextflow_modules
        ├── combine_columns
        ├── remove_comments
        └── take_column
```

### Creating the `remove_comments` component

This component removes all comments (lines starting with a hashtag) from a **tsv** file.  
Download or copy the contents of `config.vsh.yaml` and `script.sh` below into the **remove_comments** folder. 

```{python}
create_download_button("/download/components/remove_comments/bash/config.vsh.yaml")
print_file_contents("/download/components/remove_comments/bash/config.vsh.yaml", "yaml", True)
```


```{python}
create_download_button("/download/components/remove_comments/bash/script.sh")
print_file_contents("/download/components/remove_comments/bash/script.sh", "bash", True)
```

### Creating the `take_column` component

This component subsets an incoming **tsv** file by extracting a certain column from the file.  
Download or copy the contents of `config.vsh.yaml` and `script.py` below into the **take_column** folder. 

```{python}
create_download_button("/download/components/take_column/python/config.vsh.yaml")
print_file_contents("/download/components/take_column/python/config.vsh.yaml", "yaml", True)
```


```{python}
create_download_button("/download/components/take_column/python/script.py")
print_file_contents("/download/components/take_column/python/script.py", "python", True)
```


### Creating the `combine_columns` component

This component combines multiple **tsv** files into one by concatenating all of the columns together. It assumes each incoming **tsv** file has an equal number of rows.  
Download or copy the contents of `config.vsh.yaml` and `script.R` below into the **combine_columns** folder. 

```{python}
create_download_button("/download/components/combine_columns/R/config.vsh.yaml")
print_file_contents("/download/components/combine_columns/R/config.vsh.yaml", "yaml", True)
```


```{python}
create_download_button("/download/components/combine_columns/R/script.R")
print_file_contents("/download/components/combine_columns/R/script.R", "r", True)
```


## Building the modules

The [basic pipeline guide](/documentation/guide/data-workflow/nextflow-pipeline/pipeline-basics.html) describes how to generate an individual VDSL3 Nextflow module using the [`viash build`](/documentation/reference/viash/build.html) command, but there's a better way when it comes to building multiple modules at once: [`viash ns build`](/documentation/reference/viash/ns.html#viash-ns-build). Each one of the three components has its namespace defined as nextflow_modules inside of its config file.
Execute this command from the root of the **advanced_pipeline** directory

```bash
viash ns build
```

This will result in the following output:

```
Exporting take_column (nextflow_modules) =nextflow=> target/nextflow/nextflow_modules/take_column
Exporting combine_columns (nextflow_modules) =nextflow=> target/nextflow/nextflow_modules/combine_columns
Exporting remove_comments (nextflow_modules) =nextflow=> target/nextflow/nextflow_modules/remove_comments
```

The VDSL3 Nextflow modules were generated inside of a **target** folder. The directory structure now looks like this:

```
advanced_pipeline
├── src
│   └── nextflow_modules
│       ├── combine_columns
│       │   ├── config.vsh.yaml
│       │   └── script.R
│       ├── remove_comments
│       │   ├── config.vsh.yaml
│       │   └── script.sh
│       └── take_column
│           ├── config.vsh.yaml
│           └── script.py
└── target
    └── nextflow
        └── nextflow_modules
            ├── combine_columns
            │   ├── main.nf
            │   └── nextflow.config
            ├── remove_comments
            │   ├── main.nf
            │   └── nextflow.config
            └── take_column
                ├── main.nf
                └── nextflow.config
```

## Creating the pipeline

Create a new file named **main.nf** and add it to the root of the **advanced_pipeline** directory. Use the following as its contents: 

```{python}
print_file_contents("/download/pipeline_workflow/advanced_pipeline/main.nf", "groovy", False)
```

1. Target directory where the modules are located
2. Include the modules from the `target` directory
3. Create a channel based on the `input` parameter's path
4. Assign a unique ID to each event using [`map{}`](https://www.nextflow.io/docs/latest/operator.html#map)
5. Run `remove_comments` to remove the comments from the TSV
6. Extract a single column from TSV by running `take_column`
7. Combine all events into a single List event using [`toList()`](https://www.nextflow.io/docs/latest/operator.html#tolist)
8. Add **unique ID** to the tuple
9. Concatenate the TSVs into one by running the `combine_columns` module with [auto publishing](/documentation/reference/config/platforms/NextflowVdsl3Platform.html#auto) enabled using the `auto` directive 
10. View the channel contents bu printing it to the console using [`view()`](https://www.nextflow.io/docs/latest/operator.html?highlight=view#view)

## Running the pipeline

Before being able to run the pipeline, you'll need some TSV files to work with. Download the files below and place them in a new directory named **data** in the root of **advanced_pipeline**.

```{python}
create_download_button("/download/components/sample_input/file1.tsv")
```

```{python}
create_download_button("/download/components/sample_input/file2.tsv")
```

Now run the following command to run the pipeline using Nextflow:

```bash
nextflow run main.nf --input "data/file?.tsv" --publishDir output
```

You should get an output similar to this:

```
N E X T F L O W  ~  version 22.04.3
Launching `workflows/310-realistic_pipeline/main.nf` [stupefied_saha] DSL2 - revision: 6669aefc6c
[93/232aba] Submitted process > remove_comments:remove_comments_process (2)
[ef/a28e89] Submitted process > remove_comments:remove_comments_process (1)
[63/279f98] Submitted process > take_column:take_column_process (1)
[50/2a17ef] Submitted process > take_column:take_column_process (2)
[8d/6eeff5] Submitted process > combine_columns:combine_columns_process
Output: [combined, /home/runner/work/viash_nxf_course/viash_nxf_course/work/8d/6eeff571e9ff2c5389851c6ab3001c/combined.combine_columns.output]
```

You can find the final TSV in the **output** directory:

```tsv
# this is a header		
# this is also a header		
one     0.11	123
two	    0.23	456
three	0.35	789
four	0.47	123
```