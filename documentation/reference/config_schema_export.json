{
  "functionality" : [
    {
      "name" : "__this__",
      "type" : "Functionality",
      "description" : "The functionality-part of the config file describes the behaviour of the script in terms of arguments and resources.\nBy specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you.\n"
    },
    {
      "name" : "enabled",
      "type" : "Boolean",
      "description" : "Setting this to false with disable this component when using namespaces.",
      "since" : "Viash 0.5.13",
      "deprecated" : {
        "message" : "Use `status` instead.",
        "since" : "Viash 0.6.0"
      }
    },
    {
      "name" : "tests",
      "type" : "List of Resource",
      "description" : "One or more Bash/R/Python scripts to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing.",
      "deprecated" : {
        "message" : "Use `test_resources` instead. No functional difference.",
        "since" : "Viash 0.5.13"
      }
    },
    {
      "name" : "add_resources_to_path",
      "type" : "Boolean",
      "description" : "Adds the resources directory to the PATH variable when set to true. This is set to false by default.",
      "since" : "Viash 0.5.5",
      "removed" : {
        "message" : "Extending the PATH turned out to be not desirable.",
        "since" : "Viash 0.5.11"
      }
    },
    {
      "name" : "requirements",
      "type" : "ComputationalRequirements",
      "description" : "Computational requirements related to running the component. \n`n_proc` specifies the maximum number of processes a component is allowed to spawn in parallel, whereas\n`memory` specifies the maximum amount of memory a component is allowed to allicate. Memory units must be\nin B, KB, MB, GB, TB or PB.",
      "example" : [
        {
          "example" : "requirements:\n  n_proc: 5\n  memory: 10GB\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.0"
    },
    {
      "name" : "status",
      "type" : "Status",
      "description" : "Allows setting a component to active, deprecated or disabled.",
      "since" : "Viash 0.6.0"
    },
    {
      "name" : "info",
      "type" : "Map of String,String",
      "description" : "A map for storing custom annotations.",
      "example" : [
        {
          "example" : "info: {twitter: wizzkid, appId: com.example.myApplication}",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.4.0"
    },
    {
      "name" : "test_resources",
      "type" : "List of Resource",
      "description" : "One or more @[scripting_language](scripts) to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing. See @[unit_testing](Unit Testing) for more info.",
      "example" : [
        {
          "example" : "test_resources:\n  - type: bash_script\n    path: tests/test1.sh\n  - type: r_script\n    path: tests/test2.R\n  - path: resource1.txt\n",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "usage",
      "type" : "Option of String",
      "description" : "A description on how to use the component. This will be displayed with `--help` under the 'Usage:' section.",
      "example" : [
        {
          "example" : "usage: Place the executable in a directory containing TSV files and run it",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "description",
      "type" : "Option of String",
      "description" : "A description of the component. This will be displayed with `--help`.",
      "example" : [
        {
          "example" : "description: |\n  This component performs function Y and Z.\n  It is possible to make this a multiline string.\n",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "resources",
      "type" : "List of Resource",
      "description" : "@[resources](Resources) are files that support the component. The first resource should be @[scripting_languages](a script) that will be executed when the functionality is run. Additional resources will be copied to the same directory.\n\nCommon properties:\n\n * type: `file` / `r_script` / `python_script` / `bash_script` / `javascript_script` / `scala_script` / `csharp_script`, the type of resource. The first resource cannot be of type `file`. When the type is not specified, the default type is simply `file`.\n * name: filename, the resulting name of the resource.\n * path: `path/to/file`, the path of the input file. Can be a relative or an absolute path, or a URI.\n * text: ...multiline text..., the raw content of the input file. Exactly one of path or text must be defined, the other undefined.\n * is_executable: `true` / `false`, whether the resulting file is made executable.\n",
      "example" : [
        {
          "example" : "resources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt\n",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "argument_groups",
      "type" : "List of ArgumentGroup",
      "description" : "A grouping of the arguments, used to display the help message.\n\n - `name: foo`, the name of the argument group. \n - `description: Description of foo`, a description of the argument group. Multiline descriptions are supported.\n - `arguments: [arg1, arg2, ...]`, list of the arguments names.\n\n",
      "example" : [
        {
          "example" : "argument_groups:\n  - name: \"Input\"\n    arguments:\n      - name: \"--id\"\n        type: string\n        required: true\n      - name: \"--input\"\n        type: file\n        required: true\n  - name: \"Output\"\n    arguments:\n      - name: \"--output\"\n        type: file\n        direction: output\n        required: true\n      - name: \"--output_optional\"\n        type: file\n        direction: output\n",
          "format" : "yaml"
        },
        {
          "example" : "component_name\n\n  Input:\n      --id\n          type: string\n\n      --input\n          type: file\n\n  Output:\n      --output\n          type: file\n\n      --optional_output\n          type: file\n",
          "format" : "bash",
          "description" : "This results in the following output when calling the component with the `--help` argument:"
        }
      ],
      "since" : "Viash 0.5.14"
    },
    {
      "name" : "arguments",
      "type" : "List of Argument",
      "description" : "A list of arguments for this component. For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:  \n\n - @[arg_string](string)\n - @[arg_file](file)\n - @[arg_integer](integer)\n - @[arg_double](double)\n - @[arg_boolean](boolean)\n - @[arg_boolean_true](boolean_true)\n - @[arg_boolean_false](boolean_false)\n",
      "example" : [
        {
          "example" : "arguments:\n   - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    direction: output\n    required: false\n    multiple: true\n    multiple_sep: \",\"\n   - name: --bar\n    type: string\n",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "outputs",
      "type" : "List of Argument",
      "description" : "A list of output arguments in addition to the `arguments` list. Any arguments specified here will have their `type` set to `file` and thr `direction` set to `output` by default.",
      "example" : [
        {
          "example" : "outputs:\n  - name: output_file\n  - name: another_output",
          "format" : "yaml"
        },
        {
          "example" : "component_with_outputs\n  \n  Outputs:\n      output_file\n          type: file, output\n  \n      another_output\n          type: file, output",
          "format" : "bash",
          "description" : "This results in the following output when calling the component with the `--help` argument:"
        }
      ],
      "since" : "Viash 0.5.11",
      "deprecated" : {
        "message" : "Use `arguments` instead.",
        "since" : "Viash 0.6.0"
      }
    },
    {
      "name" : "inputs",
      "type" : "List of Argument",
      "description" : "A list of input arguments in addition to the `arguments` list. Any arguments specified here will have their `type` set to `file` and the `direction` set to `input` by default.",
      "example" : [
        {
          "example" : "inputs:\n  - name: input_file\n  - name: another_input",
          "format" : "yaml"
        },
        {
          "example" : "component_with_inputs\n  \n  Inputs:\n      input_file\n          type: file\n  \n      another_input\n          type: file",
          "format" : "bash",
          "description" : "This results in the following output when calling the component with the `--help` argument:"
        }
      ],
      "since" : "Viash 0.5.11",
      "deprecated" : {
        "message" : "Use `arguments` instead.",
        "since" : "Viash 0.6.0"
      }
    },
    {
      "name" : "authors",
      "type" : "List of Author",
      "description" : "A list of authors. An author must at least have a name, but can also have a list of roles, an e-mail address, and a map of custom properties.\n\nSuggested values for roles are:\n \n| Role | Abbrev. | Description |\n|------|---------|-------------|\n| maintainer | mnt | for the maintainer of the code. Ideally, exactly one maintainer is specified. |\n| author | aut | for persons who have made substantial contributions to the software. |\n| contributor | ctb| for persons who have made smaller contributions (such as code patches).\n| datacontributor | dtc | for persons or organisations that contributed data sets for the software\n| copyrightholder | cph | for all copyright holders. This is a legal concept so should use the legal name of an institution or corporate body.\n| funder | fnd | for persons or organizations that furnished financial support for the development of the software\n\nThe [full list of roles](https://www.loc.gov/marc/relators/relaterm.html) is extremely comprehensive.\n",
      "example" : [
        {
          "example" : "authors:\n  - name: Bob Cando\n    roles: [maintainer, author]\n    email: bob@can.do\n    props: {github: bobcando, orcid: 0000-0001-0002-0003}\n  - name: Tim Farbe\n    roles: [author]\n    email: tim@far.be",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.3.1"
    },
    {
      "name" : "version",
      "type" : "Option of Version",
      "description" : "Version of the component. This field will be used to version the executable and the Docker container.",
      "example" : [
        {
          "example" : "version: 0.8",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "namespace",
      "type" : "Option of String",
      "description" : "Namespace this component is a part of. See the @[namespace](Namespaces guide) for more information on namespaces.",
      "example" : [
        {
          "example" : "namespace: fancy_components",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "name",
      "type" : "String",
      "description" : "Name of the component and the filename of the executable when built with `viash build`.",
      "example" : [
        {
          "example" : "name: this_is_my_component",
          "format" : "yaml"
        }
      ]
    }
  ],
  "platforms" : {
    "nativePlatform" : [
      {
        "name" : "__this__",
        "type" : "NativePlatform",
        "description" : "Running a Viash component on a native platform means that the script will be executed in your current environment.\nAny dependencies are assumed to have been installed by the user, so the native platform is meant for developers (who know what they’re doing) or for simple bash scripts (which have no extra dependencies).\n"
      },
      {
        "name" : "id",
        "type" : "String",
        "description" : "As with all platforms, you can give a platform a different name. By specifying `id: foo`, you can target this platform (only) by specifying `-p foo` in any of the Viash commands.",
        "example" : [
          {
            "example" : "id: foo",
            "format" : "yaml"
          }
        ]
      }
    ],
    "dockerPlatform" : [
      {
        "name" : "__this__",
        "type" : "DockerPlatform",
        "description" : "Run a Viash component on a Docker backend platform.\nBy specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository.\n"
      },
      {
        "name" : "test_setup",
        "type" : "List of Requirements",
        "description" : "",
        "since" : "Viash 0.5.13"
      },
      {
        "name" : "docker",
        "type" : "Option of DockerRequirements",
        "description" : "Specify which Docker commands should be run during setup.",
        "example" : [
          {
            "example" : "setup:\n  - type: docker\n    build_args: [ GITHUB_PAT=hello_world ]\n    run: [ git clone ... ]\n    add: [ \"http://foo.bar .\" ]\n    copy: [ \"http://foo.bar .\" ]\n    resources: \n      - resource.txt /path/to/resource.txt\n",
            "format" : "yaml"
          }
        ],
        "deprecated" : {
          "message" : "Use `setup` instead.",
          "since" : "Viash 0.5.15"
        }
      },
      {
        "name" : "python",
        "type" : "Option of PythonRequirements",
        "description" : "Specify which Python packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: python\n    pip: [ numpy ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ jkbr/httpie ]\n    gitlab: [ foo/bar ]\n    mercurial: [ http://... ]\n    svn: [ http://...]\n    bazaar: [ http://... ]\n    url: [ http://... ]\n",
            "format" : "yaml"
          }
        ],
        "deprecated" : {
          "message" : "Use `setup` instead.",
          "since" : "Viash 0.5.15"
        }
      },
      {
        "name" : "r",
        "type" : "Option of RRequirements",
        "description" : "Specify which R packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup: \n  - type: r\n    cran: [ dynutils ]\n    bioc: [ AnnotationDbi ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ rcannood/SCORPIUS ]\n    gitlab: [ org/package ]\n    svn: [ https://path.to.svn/group/repo ]\n    url: [ https://github.com/hadley/stringr/archive/HEAD.zip ]\n    script: [ 'devtools::install(\".\")' ]\n",
            "format" : "yaml"
          }
        ],
        "deprecated" : {
          "message" : "Use `setup` instead.",
          "since" : "Viash 0.5.15"
        }
      },
      {
        "name" : "yum",
        "type" : "Option of YumRequirements",
        "description" : "Specify which yum packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: yum\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ],
        "deprecated" : {
          "message" : "Use `setup` instead.",
          "since" : "Viash 0.5.15"
        }
      },
      {
        "name" : "apt",
        "type" : "Option of AptRequirements",
        "description" : "Specify which apt packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: apt\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ],
        "deprecated" : {
          "message" : "Use `setup` instead.",
          "since" : "Viash 0.5.15"
        }
      },
      {
        "name" : "apk",
        "type" : "Option of ApkRequirements",
        "description" : "Specify which apk packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: apk\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ],
        "deprecated" : {
          "message" : "Use `setup` instead.",
          "since" : "Viash 0.5.15"
        }
      },
      {
        "name" : "setup",
        "type" : "List of Requirements",
        "description" : "A list of requirements for installing the following types of packages:\n\n - @[apt_req](apt)\n - @[apk_req](apk)\n - @[yum_req](yum)\n - @[r_req](R)\n - @[python_req](Python)\n - @[javascript_req](JavaScript)\n - @[docker_req](Docker setup instructions)\n\nThe order in which these dependencies are specified determines the order in which they will be installed.\n"
      },
      {
        "name" : "target_image_source",
        "type" : "Option of String",
        "description" : "The source of the target image. This is used for defining labels in the dockerfile.",
        "example" : [
          {
            "example" : "target_image_source: https://github.com/foo/bar",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "run_args",
        "type" : "OneOrMore of String",
        "description" : "Add [docker run](https://docs.docker.com/engine/reference/run/) arguments."
      },
      {
        "name" : "setup_strategy",
        "type" : "DockerSetupStrategy",
        "description" : "The Docker setup strategy to use when building a container.\n\n| Strategy | Description |\n|-----|----------|\n| `alwaysbuild` / `build` / `b` | Always build the image from the dockerfile. This is the default setup strategy.\n| `alwayscachedbuild` / `cachedbuild` / `cb` | Always build the image from the dockerfile, with caching enabled.\n| `ifneedbebuild` |  Build the image if it does not exist locally.\n| `ifneedbecachedbuild` | Build the image with caching enabled if it does not exist locally, with caching enabled.\n| `alwayspull` / `pull` / `p` |  Try to pull the container from [Docker Hub](https://hub.docker.com) or the @[docker_registry](specified docker registry).\n| `alwayspullelsebuild` / `pullelsebuild` |  Try to pull the image from a registry and build it if it doesn't exist.\n| `alwayspullelsecachedbuild` / `pullelsecachedbuild` |  Try to pull the image from a registry and build it with caching if it doesn't exist.\n| `ifneedbepull` |  If the image does not exist locally, pull the image.\n| `ifneedbepullelsebuild` |  If the image does not exist locally, pull the image. If the image does exist, build it.\n| `ifneedbepullelsecachedbuild` | If the image does not exist locally, pull the image. If the image does exist, build it with caching enabled.\n| `push` | Push the container to [Docker Hub](https://hub.docker.com)  or the @[docker_registry](specified docker registry).\n| `pushifnotpresent` | Push the container to [Docker Hub](https://hub.docker.com) or the @[docker_registry](specified docker registry) if the @[docker_tag](tag) does not exist yet.\n| `donothing` / `meh` | Do not build or pull anything.\n\n",
        "example" : [
          {
            "example" : "setup_strategy: alwaysbuild",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "workdir",
        "type" : "Option of String",
        "description" : "The working directory when starting the container. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.",
        "example" : [
          {
            "example" : "workdir: /home/user",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "port",
        "type" : "OneOrMore of String",
        "description" : "A list of enabled ports. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.",
        "example" : [
          {
            "example" : "port:\n  - 80\n  - 8080\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "chown",
        "type" : "Boolean",
        "description" : "In Linux, files created by a Docker container will be owned by `root`. With `chown: true`, Viash will automatically change the ownership of output files (arguments with `type: file` and `direction: output`) to the user running the Viash command after execution of the component. Default value: `true`.",
        "example" : [
          {
            "example" : "chown: false",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "namespace_separator",
        "type" : "String",
        "description" : "The default namespace separator is \"_\".",
        "example" : [
          {
            "example" : "namespace_separator: \"+\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "target_tag",
        "type" : "Option of Version",
        "description" : "The tag the resulting image gets.",
        "example" : [
          {
            "example" : "target_tag: 0.5.0",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "target_registry",
        "type" : "Option of String",
        "description" : "The URL where the resulting image will be pushed to.",
        "example" : [
          {
            "example" : "target_registry: https://my-docker-registry.org",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "target_image",
        "type" : "Option of String",
        "description" : "If anything is specified in the setup section, running the `---setup` will result in an image with the name of `<target_image>:<version>`. If nothing is specified in the `setup` section, simply `image` will be used.",
        "example" : [
          {
            "example" : "target_image: myfoo",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "tag",
        "type" : "Option of Version",
        "description" : "Specify a Docker image based on its tag.",
        "example" : [
          {
            "example" : "tag: 4.0",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "registry",
        "type" : "Option of String",
        "description" : "The URL to the a [custom Docker registry](https://docs.docker.com/registry/)",
        "example" : [
          {
            "example" : "registry: https://my-docker-registry.org",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "organization",
        "type" : "Option of String",
        "description" : "Name of a container’s [organization](https://docs.docker.com/docker-hub/orgs/)."
      },
      {
        "name" : "image",
        "type" : "String",
        "description" : "The base container to start from. You can also add the tag here if you wish.",
        "example" : [
          {
            "example" : "image: \"bash:4.0\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "id",
        "type" : "String",
        "description" : "As with all platforms, you can give a platform a different name. By specifying `id: foo`, you can target this platform (only) by specifying `-p foo` in any of the Viash commands.",
        "example" : [
          {
            "example" : "id: foo",
            "format" : "yaml"
          }
        ]
      }
    ],
    "nextflowVdsl3Platform" : [
      {
        "name" : "__this__",
        "type" : "NextflowVdsl3Platform",
        "description" : "Next-gen platform for generating NextFlow VDSL3 modules."
      },
      {
        "name" : "debug",
        "type" : "Boolean",
        "description" : "Whether or not to print debug messages."
      },
      {
        "name" : "auto",
        "type" : "NextflowAuto",
        "description" : "Automated processing flags which can be toggled on or off:  \n\n| Flag | Description | Default |\n|---|---------|----|\n| `simplifyInput` | If `true`, an input tuple only containing only a single File (e.g. `[\"foo\", file(\"in.h5ad\")]`) is automatically transformed to a map (i.e. `[\"foo\", [ input: file(\"in.h5ad\") ] ]`). | `true` |\n| `simplifyOutput` | If `true`, an output tuple containing a map with a File (e.g. `[\"foo\", [ output: file(\"out.h5ad\") ] ]`) is automatically transformed to a map (i.e. `[\"foo\", file(\"out.h5ad\")]`). | `true` |\n| `transcript` | If `true`, the module's transcripts from `work/` are automatically published to `params.transcriptDir`. If not defined, `params.publishDir + \"/_transcripts\"` will be used. Will throw an error if neither are defined. | `false` |\n| `publish` | If `true`, the module's outputs are automatically published to `params.publishDir`.  Will throw an error if `params.publishDir` is not defined. | `false` |\n\n",
        "example" : [
          {
            "example" : "auto:\n    publish: true",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "directives",
        "type" : "NextflowDirectives",
        "description" : "Directives are optional settings that affect the execution of the process. These mostly match up with the Nextflow counterparts that are linked below:  \n\n - [`accelerator`](https://www.nextflow.io/docs/latest/process.html#accelerator)\n - [`afterScript`](https://www.nextflow.io/docs/latest/process.html#afterscript)\n - [`beforeScript`](https://www.nextflow.io/docs/latest/process.html#beforeScript)\n - [`cache`](https://www.nextflow.io/docs/latest/process.html#cache)\n - [`conda`](https://www.nextflow.io/docs/latest/process.html#conda)\n - [`container`](https://www.nextflow.io/docs/latest/process.html#container)\n - [`containerOptions`](https://www.nextflow.io/docs/latest/process.html#containeroptions)\n - [`cpus`](https://www.nextflow.io/docs/latest/process.html#cpus)\n - [`disk`](https://www.nextflow.io/docs/latest/process.html#disk)\n - [`echo`](https://www.nextflow.io/docs/latest/process.html#echo)\n - [`errorStrategy`](https://www.nextflow.io/docs/latest/process.html#errorstrategy)\n - [`executor`](https://www.nextflow.io/docs/latest/process.html#executor)\n - [`machineType`](https://www.nextflow.io/docs/latest/process.html#machinetype)\n - [`maxErrors`](https://www.nextflow.io/docs/latest/process.html#maxerrors)\n - [`maxForks`](https://www.nextflow.io/docs/latest/process.html#maxforks)\n - [`maxRetries`](https://www.nextflow.io/docs/latest/process.html#maxretries)\n - [`memory`](https://www.nextflow.io/docs/latest/process.html#memory)\n - [`module`](https://www.nextflow.io/docs/latest/process.html#module)\n - [`penv`](https://www.nextflow.io/docs/latest/process.html#penv)\n - [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir)\n - [`queue`](https://www.nextflow.io/docs/latest/process.html#queue)\n - [`scratch`](https://www.nextflow.io/docs/latest/process.html#scratch)\n - [`storeDir`](https://www.nextflow.io/docs/latest/process.html#storeDir)\n - [`stageInMode`](https://www.nextflow.io/docs/latest/process.html#stageinmode)\n - [`stageOutMode`](https://www.nextflow.io/docs/latest/process.html#stageoutmode)\n - [`tag`](https://www.nextflow.io/docs/latest/process.html#tag)\n - [`time`](https://www.nextflow.io/docs/latest/process.html#time)",
        "example" : [
          {
            "example" : "directives:\n    container: rocker/r-ver:4.1\n    label: highcpu\n    cpus: 4\n    memory: 16 GB",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "id",
        "type" : "String",
        "description" : "Every platform can be given a specific id that can later be referred to explicitly when running or building the Viash component.",
        "example" : [
          {
            "example" : "id: foo",
            "format" : "yaml"
          }
        ]
      }
    ],
    "nextflowLegacyPlatform" : [
      {
        "name" : "__this__",
        "type" : "NextflowLegacyPlatform",
        "description" : "Run a Viash component as a Nextflow module.",
        "deprecated" : {
          "message" : "Use VDSL3 Nextflow modules instead",
          "since" : "Viash 0.6.0"
        }
      },
      {
        "name" : "stageInMode",
        "type" : "Option of String",
        "description" : "By default NextFlow will create a symbolic link to the inputs for a process/module and run the tool at hand using those symbolic links. Some applications do not cope well with this strategy, in that case the files should effectively be copied rather than linked to. This can be achieved by using `stageInMode: copy`.\nThis attribute is optional, the default is `symlink`.\n",
        "example" : [
          {
            "example" : "stageInMode: copy",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "labels",
        "type" : "OneOrMore of String",
        "description" : "When running the module in a cluster context and depending on the cluster type, [NextFlow allows for attaching labels](https://www.nextflow.io/docs/latest/process.html#label) to the process that can later be used as selectors for associating resources to this process.\n\nIn order to attach one label to a process/component, one can use the `label: ...` attribute, multiple labels can be added using `labels: [ ..., ... ]` and the two can even be mixed.\n\nIn the main `nextflow.config`, one can now use this label:\n\nprocess {\n  ...\n  withLabel: bigmem {\n     maxForks = 5\n     ...\n  }\n}\n",
        "example" : [
          {
            "example" : "label: highmem labels: [ highmem, highcpu ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "label",
        "type" : "Option of String",
        "description" : "When running the module in a cluster context and depending on the cluster type, [NextFlow allows for attaching labels](https://www.nextflow.io/docs/latest/process.html#label) to the process that can later be used as selectors for associating resources to this process.\n\nIn order to attach one label to a process/component, one can use the `label: ...` attribute, multiple labels can be added using `labels: [ ..., ... ]` and the two can even be mixed.\n\nIn the main `nextflow.config`, one can now use this label:\n\nprocess {\n  ...\n  withLabel: bigmem {\n     maxForks = 5\n     ...\n  }\n}\n",
        "example" : [
          {
            "example" : "label: highmem labels: [ highmem, highcpu ]",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "path",
        "type" : "Option of String",
        "description" : "When `publish: true`, this attribute defines where the output is written relative to the `params.publishDir` setting. For example, `path: processed` in combination with `--output s3://some_bucket/` will store the output of this component under\n```\ns3://some_bucket/processed/\n```\nThis attribute gives control over the directory structure of the output. For example:\n```\npath: raw_data\n```\nOr even:\n```\npath: raw_data/bcl\n```\nPlease note that `per_id` and `path` can be combined.\n"
      },
      {
        "name" : "separate_multiple_outputs",
        "type" : "Boolean",
        "description" : "Separates the outputs generated by a Nextflow component with multiple outputs as separate events on the channel. Default value: `true`.",
        "example" : [
          {
            "example" : "separate_multiple_outputs: false",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "per_id",
        "type" : "Option of Boolean",
        "description" : "By default, a subdirectory is created corresponding to the unique ID that is passed in the triplet. Let us illustrate this with an example. The following code snippet uses the value of `--input` as an input of a workflow. The input can include a wildcard so that multiple samples can run in parallel. We use the parent directory name (`.getParent().baseName`) as an identifier for the sample. We pass this as the first entry of the triplet:\n\n```\nChannel.fromPath(params.input) \\\n    | map{ it -> [ it.getParent().baseName , it ] } \\\n    | map{ it -> [ it[0] , it[1], params ] }\n    | ...\n```\nSay the resulting sample names are `SAMPLE1` and `SAMPLE2`. The next step in the pipeline will be published (at least by default) under:\n```\n<publishDir>/SAMPLE1/\n<publishDir>/SAMPLE2/\n```\nThese per-ID subdirectories can be avoided by setting:\n```\nper_id: false\n```\n"
      },
      {
        "name" : "publish",
        "type" : "Option of Boolean",
        "description" : "NextFlow uses the autogenerated `work` dirs to manage process IO under the hood. In order effectively output something one can publish the results a module or step in the pipeline. In order to do this, add `publish: true` to the config:\n\n - publish is optional\n - Default value is false\n\nThis attribute simply defines if output of a component should be published yes or no. The output location has to be provided at pipeline launch by means of the option `--publishDir ...` or as `params.publishDir` in `nextflow.config`:\n```\nparams.publishDir = \"...\"\n```\n"
      },
      {
        "name" : "namespace_separator",
        "type" : "String",
        "description" : "The default namespace separator is \"_\".",
        "example" : [
          {
            "example" : "namespace_separator: \"+\"",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "organization",
        "type" : "Option of String",
        "description" : "Name of a container’s [organization](https://docs.docker.com/docker-hub/orgs/).",
        "example" : [
          {
            "example" : "organization: viash-io",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "registry",
        "type" : "Option of String",
        "description" : "The URL to the a [custom Docker registry](https://docs.docker.com/registry/).",
        "example" : [
          {
            "example" : "registry: https://my-docker-registry.org",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "tag",
        "type" : "Option of Version",
        "description" : "Specify a Docker image based on its tag.",
        "example" : [
          {
            "example" : "tag: 4.0",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "image",
        "type" : "Option of String",
        "description" : "If no image attributes are configured, Viash will use the auto-generated image name from the Docker platform:\n\n```\n[<namespace>/]<name>:<version>\n```\nIt’s possible to specify the container image explicitly with which to run the module in different ways:\n\n```\nimage: dataintuitive/viash:0.4.0\n```\nExactly the same can be obtained with\n\n```\nimage: dataintuitive/viash\nregistry: index.docker.io/v1/\ntag: 0.4.0\n```\nSpecifying the attribute(s) like this will use the container `dataintuitive/viash:0.4.0` from Docker hub (registry).\n\nIf no tag is specified Viash will use `functionality.version` as the tag.\n\nIf no registry is specified, Viash (and NextFlow) will assume the image is available locally or on Docker Hub. In other words, the `registry: ...` attribute above is superfluous. No other registry is checked automatically due to a limitation from Docker itself.\n"
      },
      {
        "name" : "id",
        "type" : "String",
        "description" : "Every platform can be given a specific id that can later be referred to explicitly when running or building the Viash component."
      }
    ]
  },
  "requirements" : {
    "dockerRequirements" : [
      {
        "name" : "__this__",
        "type" : "DockerRequirements",
        "description" : "Specify which Docker commands should be run during setup.",
        "example" : [
          {
            "example" : "setup:\n  - type: docker\n    build_args: [ GITHUB_PAT=hello_world ]\n    run: [ git clone ... ]\n    add: [ \"http://foo.bar .\" ]\n    copy: [ \"http://foo.bar .\" ]\n    resources: \n      - resource.txt /path/to/resource.txt\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "aptRequirements" : [
      {
        "name" : "__this__",
        "type" : "AptRequirements",
        "description" : "Specify which apt packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: apt\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "javascriptRequirements" : [
      {
        "name" : "__this__",
        "type" : "JavaScriptRequirements",
        "description" : "Specify which JavaScript packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: javascript\n    npm: [ packagename ]\n    git: [ https://... ]\n    github: [ owner/repository ]\n    url: [ https://... ]\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "pythonRequirements" : [
      {
        "name" : "__this__",
        "type" : "PythonRequirements",
        "description" : "Specify which Python packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: python\n    pip: [ numpy ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ jkbr/httpie ]\n    gitlab: [ foo/bar ]\n    mercurial: [ http://... ]\n    svn: [ http://...]\n    bazaar: [ http://... ]\n    url: [ http://... ]\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "rRequirements" : [
      {
        "name" : "__this__",
        "type" : "RRequirements",
        "description" : "Specify which R packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup: \n  - type: r\n    cran: [ dynutils ]\n    bioc: [ AnnotationDbi ]\n    git: [ https://some.git.repository/org/repo ]\n    github: [ rcannood/SCORPIUS ]\n    gitlab: [ org/package ]\n    svn: [ https://path.to.svn/group/repo ]\n    url: [ https://github.com/hadley/stringr/archive/HEAD.zip ]\n    script: [ 'devtools::install(\".\")' ]\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "rubyRequirements" : [
      {
        "name" : "__this__",
        "type" : "RubyRequirements",
        "description" : "Specify which Ruby packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: ruby\n    packages: [ rspec ]\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "yumRequirements" : [
      {
        "name" : "__this__",
        "type" : "YumRequirements",
        "description" : "Specify which yum packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: yum\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ]
      }
    ],
    "apkRequirements" : [
      {
        "name" : "__this__",
        "type" : "ApkRequirements",
        "description" : "Specify which apk packages should be available in order to run the component.",
        "example" : [
          {
            "example" : "setup:\n  - type: apk\n    packages: [ sl ]\n",
            "format" : "yaml"
          }
        ]
      }
    ]
  },
  "arguments" : {
    "string" : [
      {
        "name" : "__this__",
        "type" : "StringArgument",
        "description" : "A `string` type argument has a value made up of an ordered sequences of characters, like \"Hello\" or \"I'm a string\".",
        "example" : [
          {
            "example" : "arguments:\n  - name: --search_query\n    type: string\n    default: \"meaning of life\"\n    description: The term to search for\n    alternatives: [\"-q\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "multiple_sep",
        "type" : "Char",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_string=Marc,Susan,Paul",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_string=Marc:Susan:Paul",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "choices",
        "type" : "List of String",
        "description" : "Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.",
        "example" : [
          {
            "example" : "- name: --language\n  type: string\n  choices: [\"python\", \"r\", \"javascript\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  required: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "default",
        "type" : "OneOrMore of String",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  default: \"The answer is 42\"\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of String",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_string\n  type: string\n  example: \"Hello World\"\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
      }
    ],
    "double" : [
      {
        "name" : "__this__",
        "type" : "DoubleArgument",
        "description" : "A `double` type argument has a numeric value with decimal points",
        "example" : [
          {
            "example" : "arguments:\n  - name: --litres\n    type: double\n    default: 1.5\n    description: Litres of fluid to process\n    alternatives: [\"-l\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "multiple_sep",
        "type" : "Char",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_double=5.8,22.6,200.4",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_double=5.8:22.6:200.4",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "max",
        "type" : "Option of Double",
        "description" : "Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  max: 80.4\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "min",
        "type" : "Option of Double",
        "description" : "Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  min: 25.5\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  required: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "default",
        "type" : "OneOrMore of Double",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  default: 5.8\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of Double",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_double\n  type: double\n  example: 5.8\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
      }
    ],
    "boolean" : [
      {
        "name" : "__this__",
        "type" : "BooleanArgument",
        "description" : "A `boolean` type argument has two possible values: `true` or `false`.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --trim\n    type: boolean\n    default: true\n    description: Trim whitespace from the final output\n    alternatives: [\"-t\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "multiple_sep",
        "type" : "Char",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_boolean=true,true,false",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_boolean=true:true:false",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  required: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "default",
        "type" : "OneOrMore of Boolean",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  default: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of Boolean",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_boolean\n  type: boolean\n  example: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--trim`, `-t` or `trim`. The number of dashes determines how values can be passed:  \n\n  - `--trim` is a long option, which can be passed with `executable_name --trim`\n  - `-t` is a short option, which can be passed with `executable_name -t`\n  - `trim` is an argument, which can be passed with `executable_name trim`  \n"
      }
    ],
    "file" : [
      {
        "name" : "__this__",
        "type" : "FileArgument",
        "description" : "A `file` type argument has a string value that points to a file or folder path.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --input_csv\n    type: file\n    must_exist: true\n    description: CSV file to read contents from\n    alternatives: [\"-i\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "multiple_sep",
        "type" : "Char",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_files\n  type: file\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_files=firstFile.csv,anotherFile.csv,yetAnother.csv",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_files\n  type: file\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_files=firstFile.csv:anotherFile.csv:yetAnother.csv",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "direction",
        "type" : "Direction",
        "description" : "Makes this argument an `input` or an `output`, as in does the file/folder needs to be read or written. `input` by default.",
        "example" : [
          {
            "example" : "- name: --my_output_file\n  type: file\n  direction: output\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_file\n  type: file\n  required: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "must_exist",
        "type" : "Boolean",
        "description" : "The file or folder should exist before the start of execution. If set to `true`, an error will be produced if the file or folder wasn't found.",
        "example" : [
          {
            "example" : "- name: --my_file\n  type: file\n  must_exist: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "default",
        "type" : "OneOrMore of Path",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_file\n  type: file\n  default: data.csv\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of Path",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_file\n  type: file\n  example: data.csv\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
      }
    ],
    "boolean_false" : [
      {
        "name" : "__this__",
        "type" : "BooleanFalseArgument",
        "description" : "An argument of the `boolean_false` type acts like an inverted `boolean` flag with a default value of `true`. When called as an argument it sets the `boolean` to `false`.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --no-log\n    type: boolean_false\n    description: Disable logging\n    alternatives: [\"-nl\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--no-log`, `-n` or `no-log`. The number of dashes determines how values can be passed:  \n\n  - `--no-log` is a long option, which can be passed with `executable_name --no-log`\n  - `-n` is a short option, which can be passed with `executable_name -n`\n  - `no-log` is an argument, which can be passed with `executable_name no-log`  \n"
      }
    ],
    "integer" : [
      {
        "name" : "__this__",
        "type" : "IntegerArgument",
        "description" : "An `integer` type argument has a numeric value without decimal points.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --core_amount\n    type: integer\n    default: 16\n    description: Amount of CPU cores to use\n    alternatives: [\"-c\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "multiple_sep",
        "type" : "Char",
        "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  multiple: true\n  multiple_sep: \",\"\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_integer=10:80:152",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  multiple: true\n",
            "format" : "yaml"
          },
          {
            "example" : "my_component --my_integer=10:80:152",
            "format" : "bash",
            "description" : "Here's an example of how to use this:"
          }
        ]
      },
      {
        "name" : "max",
        "type" : "Option of Int",
        "description" : "Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  max: 150\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "min",
        "type" : "Option of Int",
        "description" : "Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  min: 50\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "choices",
        "type" : "List of Int",
        "description" : "Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.",
        "example" : [
          {
            "example" : "- name: --memory\n  type: integer\n  choices: [1024, 2048, 4096]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "required",
        "type" : "Boolean",
        "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  required: true\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "default",
        "type" : "OneOrMore of Int",
        "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  default: 100\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "example",
        "type" : "OneOrMore of Int",
        "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
        "example" : [
          {
            "example" : "- name: --my_integer\n  type: integer\n  example: 100\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
      }
    ],
    "boolean_true" : [
      {
        "name" : "__this__",
        "type" : "BooleanTrueArgument",
        "description" : "An argument of the `boolean_true` type acts like a `boolean` flag with a default value of `false`. When called as an argument it sets the `boolean` to `true`.",
        "example" : [
          {
            "example" : "arguments:\n  - name: --silent\n    type: boolean_true\n    description: Ignore console output\n    alternatives: [\"-s\"]\n",
            "format" : "yaml"
          }
        ]
      },
      {
        "name" : "description",
        "type" : "Option of String",
        "description" : "A description of the argument. This will be displayed with `--help`."
      },
      {
        "name" : "alternatives",
        "type" : "OneOrMore of String",
        "description" : "List of alternative format variations for this argument."
      },
      {
        "name" : "name",
        "type" : "String",
        "description" : "The name of the argument. Can be in the formats `--silent`, `-s` or `silent`. The number of dashes determines how values can be passed:  \n\n  - `--silent` is a long option, which can be passed with `executable_name --silent`\n  - `-s` is a short option, which can be passed with `executable_name -s`\n  - `silent` is an argument, which can be passed with `executable_name silent`  \n"
      }
    ]
  }
}
