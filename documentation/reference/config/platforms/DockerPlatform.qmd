---
title: Docker Platform
search: true
execute:
  echo: false
  output: asis
---

Run a Viash component on a Docker backend platform.
By specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository.


## apk

**Type**: `ApkRequirements`

::: {.callout-warning}
Deprecated since Viash 0.5.15. Use `setup` instead.
:::
Specify which apk packages should be available in order to run the component.

### Example

```yaml
setup:
  - type: apk
    packages: [ sl ]

```

## apt

**Type**: `AptRequirements`

::: {.callout-warning}
Deprecated since Viash 0.5.15. Use `setup` instead.
:::
Specify which apt packages should be available in order to run the component.

### Example

```yaml
setup:
  - type: apt
    packages: [ sl ]

```

## chown

**Type**: `Boolean`

In Linux, files created by a Docker container will be owned by `root`. With `chown: true`, Viash will automatically change the ownership of output files (arguments with `type: file` and `direction: output`) to the user running the Viash command after execution of the component. Default value: `true`.

### Example

```yaml
chown: false
```

## docker

**Type**: `DockerRequirements`

::: {.callout-warning}
Deprecated since Viash 0.5.15. Use `setup` instead.
:::
Specify which Docker commands should be run during setup.

### Example

```yaml
setup:
  - type: docker
    build_args: [ GITHUB_PAT=hello_world ]
    run: [ git clone ... ]
    add: [ "http://foo.bar ." ]
    copy: [ "http://foo.bar ." ]
    resources: 
      - resource.txt /path/to/resource.txt

```

## id

**Type**: `String`

As with all platforms, you can give a platform a different name. By specifying `id: foo`, you can target this platform (only) by specifying `-p foo` in any of the Viash commands.

### Example

```yaml
id: foo
```

## image

**Type**: `String`

The base container to start from. You can also add the tag here if you wish.

### Example

```yaml
image: "bash:4.0"
```

## namespace_separator

**Type**: `String`

The default namespace separator is "_".

### Example

```yaml
namespace_separator: "+"
```

## organization

**Type**: `String`

Name of a container’s [organization](https://docs.docker.com/docker-hub/orgs/).

## port

**Type**: `String` / `List of String`

A list of enabled ports. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.

### Example

```yaml
port:
  - 80
  - 8080

```

## python

**Type**: `PythonRequirements`

::: {.callout-warning}
Deprecated since Viash 0.5.15. Use `setup` instead.
:::
Specify which Python packages should be available in order to run the component.

### Example

```yaml
setup:
  - type: python
    pip: [ numpy ]
    git: [ https://some.git.repository/org/repo ]
    github: [ jkbr/httpie ]
    gitlab: [ foo/bar ]
    mercurial: [ http://... ]
    svn: [ http://...]
    bazaar: [ http://... ]
    url: [ http://... ]

```

## r

**Type**: `RRequirements`

::: {.callout-warning}
Deprecated since Viash 0.5.15. Use `setup` instead.
:::
Specify which R packages should be available in order to run the component.

### Example

```yaml
setup: 
  - type: r
    cran: [ dynutils ]
    bioc: [ AnnotationDbi ]
    git: [ https://some.git.repository/org/repo ]
    github: [ rcannood/SCORPIUS ]
    gitlab: [ org/package ]
    svn: [ https://path.to.svn/group/repo ]
    url: [ https://github.com/hadley/stringr/archive/HEAD.zip ]
    script: [ 'devtools::install(".")' ]

```

## registry

**Type**: `String`

The URL to the a [custom Docker registry](https://docs.docker.com/registry/)

### Example

```yaml
registry: https://my-docker-registry.org
```

## run_args

**Type**: `String` / `List of String`

Add [docker run](https://docs.docker.com/engine/reference/run/) arguments.

## setup

**Type**: `List of Requirements`

A list of requirements for installing the following types of packages:

 - [apt](/documentation/reference/config/requirements.html#apt-requirements)
 - [apk](/documentation/reference/config/requirements.html#apk-requirements)
 - [yum](/documentation/reference/config/requirements.html#yum-requirements)
 - [R](/documentation/reference/config/requirements.html#r-requirements)
 - [Python](/documentation/reference/config/requirements.html#python-requirements)
 - [JavaScript](/documentation/reference/config/requirements.html#javascript-requirements)
 - [Docker setup instructions](/documentation/reference/config/requirements.html#docker-requirements)

The order in which these dependencies are specified determines the order in which they will be installed.


## setup_strategy

**Type**: `DockerSetupStrategy`

The Docker setup strategy to use when building a container.

| Strategy | Description |
|-----|----------|
| `alwaysbuild` / `build` / `b` | Always build the image from the dockerfile. This is the default setup strategy.
| `alwayscachedbuild` / `cachedbuild` / `cb` | Always build the image from the dockerfile, with caching enabled.
| `ifneedbebuild` |  Build the image if it does not exist locally.
| `ifneedbecachedbuild` | Build the image with caching enabled if it does not exist locally, with caching enabled.
| `alwayspull` / `pull` / `p` |  Try to pull the container from [Docker Hub](https://hub.docker.com) or the [specified docker registry](/documentation/reference/config/platforms/DockerPlatform.html#registry).
| `alwayspullelsebuild` / `pullelsebuild` |  Try to pull the image from a registry and build it if it doesn't exist.
| `alwayspullelsecachedbuild` / `pullelsecachedbuild` |  Try to pull the image from a registry and build it with caching if it doesn't exist.
| `ifneedbepull` |  If the image does not exist locally, pull the image.
| `ifneedbepullelsebuild` |  If the image does not exist locally, pull the image. If the image does exist, build it.
| `ifneedbepullelsecachedbuild` | If the image does not exist locally, pull the image. If the image does exist, build it with caching enabled.
| `push` | Push the container to [Docker Hub](https://hub.docker.com)  or the [specified docker registry](/documentation/reference/config/platforms/DockerPlatform.html#registry).
| `pushifnotpresent` | Push the container to [Docker Hub](https://hub.docker.com) or the [specified docker registry](/documentation/reference/config/platforms/DockerPlatform.html#registry) if the [specified tag](/documentation/reference/config/platforms/DockerPlatform.html#tag) does not exist yet.
| `donothing` / `meh` | Do not build or pull anything.



### Example

```yaml
setup_strategy: alwaysbuild
```

## tag

**Type**: `Version`

Specify a Docker image based on its tag.

### Example

```yaml
tag: 4.0
```

## target_image

**Type**: `String`

If anything is specified in the setup section, running the `---setup` will result in an image with the name of `<target_image>:<version>`. If nothing is specified in the `setup` section, simply `image` will be used.

### Example

```yaml
target_image: myfoo
```

## target_image_source

**Type**: `String`

The source of the target image. This is used for defining labels in the dockerfile.

### Example

```yaml
target_image_source: https://github.com/foo/bar
```

## target_registry

**Type**: `String`

The URL where the resulting image will be pushed to.

### Example

```yaml
target_registry: https://my-docker-registry.org
```

## target_tag

**Type**: `Version`

The tag the resulting image gets.

### Example

```yaml
target_tag: 0.5.0
```

## test_setup

**Type**: `List of Requirements`



## workdir

**Type**: `String`

The working directory when starting the container. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.

### Example

```yaml
workdir: /home/user
```

## yum

**Type**: `YumRequirements`

::: {.callout-warning}
Deprecated since Viash 0.5.15. Use `setup` instead.
:::
Specify which yum packages should be available in order to run the component.

### Example

```yaml
setup:
  - type: yum
    packages: [ sl ]

```

