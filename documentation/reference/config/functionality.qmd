---
title: "Functionality"
---

The functionality-part of the config file describes the behaviour of the script in terms of arguments and resources.\nBy specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you.\n

## tests

One or more Bash/R/Python scripts to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing.

## add_resources_to_path

Adds the resources directory to the PATH variable when set to true. This is set to false by default.

Introduced in Viash 0.5.5

## enabled

Setting this to false with disable this component when using namespaces.

Introduced in Viash 0.5.13

## info

A map for storing custom annotation.

Introduced in Viash 0.4.0

## test_resources

One or more Bash/R/Python scripts to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing.

### Example(s)

```yaml
"tests:
  - type: bash_script
    path: tests/test1.sh
  - type: r_script
    path: tests/test2.R
  - path: resource1.txt
"
```

## usage

A description of the component. This will be displayed with --help under the 'Usage:' section.

## description

A description of the component. This will be displayed with --help.

### Example(s)

```yaml
"description: |
This component performs function Y and Z.
It is possible to make this a multiline string.
"
```

## resources

"The first resource should be a script (bash_script, r_script, python_script, javascript_script, scala_script) which is what will be executed when the functionality is run. Additional resources will be copied to the same directory.\n\nCommon properties:\n\n * type: file/r_script/python_script/bash_script/javascript_script/scala_script, the type of resource. The first resource cannot be of type file. When the type is not specified, the default type is simply file. For more information regarding how to write a script in Bash, R or Python with Viash, check out the guides for the respective languages on the left.\n * name: filename, the resulting name of the resource.\n * path: path/to/file, the path of the input file. Can be a relative or an absolute path, or a URI.\n * text: ...multiline text..., the raw content of the input file. Exactly one of path or text must be defined, the other undefined.\n * is_executable: true/false, whether the resulting file is made executable.\n"

### Example(s)

```yaml
"resources:
  - type: r_script
    path: script.R
  - type: file
    path: resource1.txt
"
```

## argument_groups

Introduced in Viash 0.5.14

## arguments

"A list of arguments for this component. For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. Common properties for all argument types are the following.\n - `type: string/file/integer/double/boolean/boolean_true/boolean_false`, the type of argument determining to what object type the value will be cast in the downstream scripts.\n - `direction: input/output`, the directionality of the argument. Only needs to be specified for output files. Default: “input”.\n - `name: --foo`, the name of the argument. Can also be `-foo` or `foo`. The number of dashes determines how values can be passed:\n   - with `--foo`: long option, e.g. `exe --foo=bar` or exe `--foo bar`\n   - with `-foo`: short option, e.g. `exe -foo bar`\n   - with `foo`: argument, e.g. `exe bar`\n - `alternatives: [-f]`, list of alternative names. Typically only used to provide a short alternative option.\n - `description: Description of foo`, a description of the argument. Multiline descriptions are supported.\n - `default: bar`, the default value when no argument value is provided. Not allowed when `required: true`.\n - `required: true/false`, whether the argument is required. If true and the functionality is executed, an error will be produced if no value is provided. Default = false.\n - `multiple: true/false`, whether to treat the argument value as an array or not. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. Default = false.\n - `multiple_sep: \":\"`, the delimiter for providing multiple values. Default = “:”.\nOn types: \n * `type: string`, The value passed through an argument of this type is converted to an ‘str’ object in Python, and to a ‘character’ object in R.\n * `type: integer`, The resulting value is an ‘int’ in Python and an ‘integer’ in R.\n * `type: double`, The resulting value is a ‘float’ in Python and an ‘double’ in R.\n * `type: boolean`, The resulting value is a ‘bool’ in Python and a ‘logical’ in R.\n * `type: boolean_true/boolean_false`, Arguments of this type can only be used by providing a flag `--foo` or not. The resulting value is a ‘bool’ in Python and a ‘logical’ in R. These properties cannot be altered: required is false, default is undefined, multiple is false.\n * `type: file`, The resulting value is still an ‘str’ in Python and a ‘character’ in R. In order to correctly pass files in some platforms (e.g. Docker and Nextflow), Viash needs to know which arguments are input/output files.\nAdditional property values:\n - `must_exist: true/false`, denotes whether the file or folder should exist at the start of the execution.\n"

### Example(s)

```yaml
"- name: --foo                           
  type: file
  alternatives: [-f]
  description: Description of foo
  default: \"/foo/bar\"
  must_exist: true
  required: false
  multiple: true
  multiple_sep: \",\"
"
```

## outputs

Introduced in Viash 0.5.11

## inputs

Introduced in Viash 0.5.11

## authors

"A list of authors. An author must at least have a name, but can also have a list of roles, an e-mail address, and a map of custom properties.\n\nSuggested values for roles are:\n| Role | Abbrev. | Description |\n|------|---------|-------------|\n| maintainer | mnt | for the maintainer of the code. Ideally, exactly one maintainer is specified. |\n| author | aut | for persons who have made substantial contributions to the software. |\n| contributor | ctb| for persons who have made smaller contributions (such as code patches).\n| datacontributor | dtc | for persons or organisations that contributed data sets for the software\n| copyrightholder | cph | for all copyright holders. This is a legal concept so should use the legal name of an institution or corporate body.\n| funder | fnd | for persons or organizations that furnished financial support for the development of the software\n\nThe [full list of roles](https://www.loc.gov/marc/relators/relaterm.html) is extremely comprehensive.\n"

Introduced in Viash 0.3.1

## version

Version of the component. This field will be used to version the executable and the Docker container.

## namespace

Namespace this component is a part of. This is required when grouping components together in a pipeline and building multiple components at once using viash `ns build`.

### Example(s)

```yaml
namespace: fancy_components
```

## name

Name of the component and the filename of the executable when built with `viash build`.

### Example(s)

```yaml
name: exe
```

